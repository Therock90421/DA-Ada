Job start at 2023-09-18 16:26:03
Job run at:
   Static hostname: localhost.localdomain
Transient hostname: gpu-v17
         Icon name: computer-server
           Chassis: server
        Machine ID: 3c24a75933524e05b1355059af119e57
           Boot ID: 13b0420494394c49a519962d4d45632d
  Operating System: CentOS Linux 7 (Core)
       CPE OS Name: cpe:/o:centos:centos:7
            Kernel: Linux 3.10.0-1127.13.1.el7.x86_64
      Architecture: x86-64
Use GPU 0,1,2,3,4,5,6,7$
Mon Sep 18 16:26:03 2023       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 510.47.03    Driver Version: 510.47.03    CUDA Version: 11.6     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Tesla V100-PCIE...  On   | 00000000:89:00.0 Off |                    0 |
| N/A   30C    P0    25W / 225W |      0MiB / 32768MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   1  Tesla V100-PCIE...  On   | 00000000:8A:00.0 Off |                    0 |
| N/A   28C    P0    26W / 225W |      0MiB / 32768MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   2  Tesla V100-PCIE...  On   | 00000000:8B:00.0 Off |                    0 |
| N/A   27C    P0    25W / 225W |      0MiB / 32768MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   3  Tesla V100-PCIE...  On   | 00000000:8C:00.0 Off |                    0 |
| N/A   25C    P0    23W / 225W |      0MiB / 32768MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   4  Tesla V100-PCIE...  On   | 00000000:DA:00.0 Off |                    0 |
| N/A   26C    P0    24W / 225W |      0MiB / 32768MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   5  Tesla V100-PCIE...  On   | 00000000:DB:00.0 Off |                    0 |
| N/A   27C    P0    23W / 225W |      0MiB / 32768MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   6  Tesla V100-PCIE...  On   | 00000000:DC:00.0 Off |                    0 |
| N/A   28C    P0    23W / 225W |      0MiB / 32768MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   7  Tesla V100-PCIE...  On   | 00000000:DD:00.0 Off |                    0 |
| N/A   29C    P0    24W / 225W |      0MiB / 32768MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
# packages in environment at /lustre/S/lihaochen/anaconda3/envs/detr:
#
# Name                    Version                   Build  Channel
pytorch                   1.9.0           py3.7_cuda10.2_cudnn7.6.5_0    http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch
Command Line Args: Namespace(config_file='./configs/PascalVOC-Detection/da_clip_faster_rcnn_R_50_C4.yaml', dist_url='tcp://127.0.0.1:55232', eval_only=False, machine_rank=0, num_gpus=8, num_machines=1, opts=['MODEL.WEIGHTS', './output/model_lora_56.2.pth', 'MODEL.CLIP.OFFLINE_RPN_CONFIG', './configs/COCO-InstanceSegmentation/mask_rcnn_R_50_C4_1x_ovd_FSD.yaml', 'MODEL.CLIP.BB_RPN_WEIGHTS', './pretrained_ckpt/rpn/rpn_coco_48.pth', 'MODEL.CLIP.TEXT_EMB_PATH', './pretrained_ckpt/concept_emb/cityscapes_8_cls_emb.pth', 'LEARNABLE_PROMPT.CTX_SIZE', '8', 'LEARNABLE_PROMPT.LoRA', 'True', 'LEARNABLE_PROMPT.TUNING', 'False'], resume=False)
[09/18 16:27:16 detectron2]: Rank of current process: 0. World size: 8
[09/18 16:27:19 detectron2]: Environment info:
----------------------  ---------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]
numpy                   1.19.2
detectron2              RegionCLIP @/lustre/S/lihaochen/RegionCLIP/detectron2
Compiler                GCC 9.3
CUDA compiler           not available
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/lustre/S/lihaochen/anaconda3/envs/detr/lib/python3.7/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3,4,5,6,7     Tesla V100-PCIE-32GB (arch=7.0)
CUDA_HOME               None - invalid!
Pillow                  9.0.1
torchvision             0.10.0 @/lustre/S/lihaochen/anaconda3/envs/detr/lib/python3.7/site-packages/torchvision
torchvision arch flags  /lustre/S/lihaochen/anaconda3/envs/detr/lib/python3.7/site-packages/torchvision/_C.so
fvcore                  0.1.5.post20221221
iopath                  0.1.8
cv2                     4.7.0
----------------------  ---------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[09/18 16:27:19 detectron2]: Command line arguments: Namespace(config_file='./configs/PascalVOC-Detection/da_clip_faster_rcnn_R_50_C4.yaml', dist_url='tcp://127.0.0.1:55232', eval_only=False, machine_rank=0, num_gpus=8, num_machines=1, opts=['MODEL.WEIGHTS', './output/model_lora_56.2.pth', 'MODEL.CLIP.OFFLINE_RPN_CONFIG', './configs/COCO-InstanceSegmentation/mask_rcnn_R_50_C4_1x_ovd_FSD.yaml', 'MODEL.CLIP.BB_RPN_WEIGHTS', './pretrained_ckpt/rpn/rpn_coco_48.pth', 'MODEL.CLIP.TEXT_EMB_PATH', './pretrained_ckpt/concept_emb/cityscapes_8_cls_emb.pth', 'LEARNABLE_PROMPT.CTX_SIZE', '8', 'LEARNABLE_PROMPT.LoRA', 'True', 'LEARNABLE_PROMPT.TUNING', 'False'], resume=False)
[09/18 16:27:19 detectron2]: Contents of args.config_file=./configs/PascalVOC-Detection/da_clip_faster_rcnn_R_50_C4.yaml:
_BASE_: "../Base-RCNN-C4.yaml"
MODEL:
  META_ARCHITECTURE: "CLIPFastRCNN"
  BACKBONE:
    NAME: "build_clip_resnet_backbone"
    FREEZE_AT: 2
  WEIGHTS: "" 
  MASK_ON: False
  RESNETS:
    DEPTH: 50
    #OUT_FEATURES: ["res4"]
    OUT_FEATURES: ["res2", "res3", "res4"]
    NORM: FrozenBN
    STEM_OUT_CHANNELS: 64
    RES2_OUT_CHANNELS: 256
  RPN:
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ["res4"]
  ROI_HEADS:
    NAME: "CLIPRes5ROIHeads"
    IN_FEATURES: ["res4"]
    NUM_CLASSES: 8 #48 # base categories
    SCORE_THRESH_TEST: 0.001
  ROI_BOX_HEAD:
    NAME: ""
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    CLS_AGNOSTIC_BBOX_REG: True
  ROI_MASK_HEAD:
    NAME: "MaskRCNNConvUpsampleHead"
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
  PIXEL_MEAN: [0.48145466, 0.4578275, 0.40821073]
  PIXEL_STD: [0.26862954, 0.26130258, 0.27577711]
  CLIP:
    CROP_REGION_TYPE: "RPN"
    USE_TEXT_EMB_CLASSIFIER: True
    CLSS_TEMP: 0.01
    NO_BOX_DELTA: False
    BG_CLS_LOSS_WEIGHT: 0.2
    FOCAL_SCALED_LOSS: 0.5
DATASETS:
  TRAIN_S: ("cityscapes_voc_trainval",)
  TRAIN_T: ("foggy_cityscapes_voc_trainval",)
  #TEST: ("cityscapes_voc_test",)
  TEST: ("foggy_cityscapes_voc_test",)
TEST:
  EVAL_PERIOD: 1000 #5000
SOLVER:
  IMS_PER_BATCH: 8 #16
  BASE_LR: 0.002
  STEPS: (60000, 80000)
  MAX_ITER: 25000
  WARMUP_ITERS: 5000 #5000
  CHECKPOINT_PERIOD: 1000
#INPUT:
  #MIN_SIZE_TRAIN_SAMPLING: choice
  #MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  #MAX_SIZE_TRAIN: 1333
  #MIN_SIZE_TEST: 800
  #MAX_SIZE_TEST: 1333
  #FORMAT: "RGB"
INPUT:
  MIN_SIZE_TRAIN: (800, 832, 864, 896, 928, 960, 992, 1024)
  MIN_SIZE_TRAIN_SAMPLING: "choice"
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TRAIN: 2048
  MAX_SIZE_TEST: 2048
  FORMAT: "RGB"
LEARNABLE_PROMPT:
  CTX_SIZE: 10
  CLASS: ('person', 'rider', 'car', 'truck', 'bus', 'train', 'motorcycle', 'bicycle')
  TUNING: True

[09/18 16:27:19 detectron2]: Running with full config:
AUG:
  COLOR_JITTER:
  - 0.4
  - 0.4
  - 0.4
  - 0.1
  - 0.0
  DROPBLOCK_BLOCK_SIZE: 7
  DROPBLOCK_KEEP_PROB: 1.0
  DROPBLOCK_LAYERS:
  - 3
  - 4
  GAUSSIAN_BLUR: 0.0
  GRAY_SCALE: 0.0
  INTERPOLATION: 3
  MIXCUT: 0.0
  MIXCUT_AND_MIXUP: false
  MIXCUT_MINMAX: []
  MIXUP: 0.0
  MIXUP_MODE: batch
  MIXUP_PROB: 0.0
  MIXUP_SWITCH_PROB: 0.5
  RATIO:
  - 0.75
  - 1.3333333333333333
  SCALE:
  - 0.08
  - 1.0
  TEST:
    CENTER_CROP: false
    IMAGE_SIZE:
    - 224
    - 224
    INTERPOLATION: 3
    MAX_SIZE: null
  TIMM_AUG:
    USE_LOADER: false
    USE_TRANSFORM: false
  TRAIN:
    IMAGE_SIZE:
    - 224
    - 224
    MAX_SIZE: null
  USE_TIMM: false
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  ATTR_LABELMAP_FILE: ''
  AUX: []
  BOX_EXTRA_FIELDS: []
  FACTORY_AUX: []
  FACTORY_TEST: []
  FACTORY_TRAIN: []
  FILTERED_CLASSIFICATION_DATASETS: ''
  HIERARCHY_FILE: ''
  LABELMAP_FILE: ''
  MAX_SEQ_LENGTH: 35
  NUM_CLASSES: 0
  PATH_AUX: []
  PATH_TEST: []
  PATH_TRAIN: []
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  ROOT: ''
  TEST:
  - foggy_cityscapes_voc_test
  TEST_SET: val
  TRAIN:
  - coco_2017_train
  TRAIN_S:
  - cityscapes_voc_trainval
  TRAIN_SET: train
  TRAIN_T:
  - foggy_cityscapes_voc_trainval
  VAL_SET: ''
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 2048
  MAX_SIZE_TRAIN: 2048
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  - 832
  - 864
  - 896
  - 928
  - 960
  - 992
  - 1024
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  TEXT_TOKENIZER: openai_bpe
INPUT_DIR: ./datasets/custom_images
LEARNABLE_PROMPT:
  CLASS:
  - person
  - rider
  - car
  - truck
  - bus
  - train
  - motorcycle
  - bicycle
  CTX_SIZE: 8
  LoRA: true
  TUNING: false
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_clip_resnet_backbone
  CLIP:
    BB_RPN_WEIGHTS: ./pretrained_ckpt/rpn/rpn_coco_48.pth
    BG_CLS_LOSS_WEIGHT: 0.2
    CLSS_TEMP: 0.01
    CONCEPT_POOL_EMB: null
    CONCEPT_THRES: null
    CROP_REGION_TYPE: RPN
    FOCAL_SCALED_LOSS: 0.5
    GATHER_GPUS: false
    GET_CONCEPT_EMB: false
    GRID_REGIONS: false
    IMS_PER_BATCH_TEST: 8
    MULTIPLY_RPN_SCORE: false
    NO_BOX_DELTA: false
    OFFLINE_RPN_CONFIG: ./configs/COCO-InstanceSegmentation/mask_rcnn_R_50_C4_1x_ovd_FSD.yaml
    OFFLINE_RPN_LSJ_PRETRAINED: false
    OFFLINE_RPN_NMS_THRESH: null
    OFFLINE_RPN_POST_NMS_TOPK_TEST: null
    ONLY_SAMPLE_FG_PROPOSALS: false
    OPENSET_TEST_NUM_CLASSES: null
    OPENSET_TEST_TEXT_EMB_PATH: null
    PRETRAIN_IMG_TXT_LEVEL: true
    PRETRAIN_ONLY_EOT: false
    PRETRAIN_RPN_REGIONS: null
    PRETRAIN_SAMPLE_REGIONS: null
    RUN_CVPR_OVR: false
    TEACHER_CONCEPT_POOL_EMB: null
    TEACHER_POOLER_RESOLUTION: 14
    TEACHER_RESNETS_DEPTH: 50
    TEXT_EMB_DIM: 1024
    TEXT_EMB_PATH: ./pretrained_ckpt/concept_emb/cityscapes_8_cls_emb.pth
    USE_TEXT_EMB_CLASSIFIER: true
    VIS: false
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: CLIPFastRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 0.48145466
  - 0.4578275
  - 0.40821073
  PIXEL_STD:
  - 0.26862954
  - 0.26130258
  - 0.27577711
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: true
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id001
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: true
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: CLIPRes5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 8
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.001
    SOFT_NMS_ENABLED: false
    SOFT_NMS_METHOD: gaussian
    SOFT_NMS_PRUNE: 0.001
    SOFT_NMS_SIGMA: 0.5
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: ./output/model_lora_56.2.pth
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.002
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 1000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 25000
  MOMENTUM: 0.9
  NESTEROV: false
  REFERENCE_WORLD_SIZE: 0
  STEPS:
  - 60000
  - 80000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 5000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[09/18 16:27:20 detectron2]: Full config saved to ./output/config.yaml
[09/18 16:27:20 d2.utils.env]: Using a generated random seed 20222584
Initial context: "X X X X X X X X X X X X X X X X"
Initializing a domain-invariant context
Number of domain-invariant context words (tokens): 8
Initializing a domain-specific context
Number of domain-specific context words (tokens): 8
Prompts: ['X X X X X X X X X X X X X X X X person in a cityscapes image.', 'X X X X X X X X X X X X X X X X rider in a cityscapes image.', 'X X X X X X X X X X X X X X X X car in a cityscapes image.', 'X X X X X X X X X X X X X X X X truck in a cityscapes image.', 'X X X X X X X X X X X X X X X X bus in a cityscapes image.', 'X X X X X X X X X X X X X X X X train in a cityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X person in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X rider in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X car in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X truck in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bus in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X train in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a foggycityscapes image.']
[09/18 16:27:34 d2.engine.defaults]: Model:
CLIPFastRCNN(
  (offline_backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
    )
  )
  (backbone): ModifiedResNet(
    (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (bn1): FrozenBatchNorm2d(num_features=32, eps=1e-05)
    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): FrozenBatchNorm2d(num_features=32, eps=1e-05)
    (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn3): FrozenBatchNorm2d(num_features=64, eps=1e-05)
    (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    (relu): ReLU(inplace=True)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (avgpool): Identity()
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (avgpool): Identity()
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (avgpool): Identity()
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (avgpool): Identity()
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (avgpool): Identity()
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (avgpool): Identity()
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (avgpool): Identity()
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (avgpool): Identity()
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (avgpool): Identity()
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (avgpool): Identity()
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (avgpool): Identity()
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (avgpool): Identity()
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (avgpool): Identity()
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
    )
    (lora_layer1): Sequential(
      (0): LoRA(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (pool2): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (pool4): AvgPool2d(kernel_size=4, stride=4, padding=0)
        (pool8): AvgPool2d(kernel_size=8, stride=8, padding=0)
        (conv2_1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_5): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_7): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=16, eps=1e-05)
        (bn2_1): FrozenBatchNorm2d(num_features=16, eps=1e-05)
        (bn2_3): FrozenBatchNorm2d(num_features=16, eps=1e-05)
        (bn2_5): FrozenBatchNorm2d(num_features=16, eps=1e-05)
        (bn2_7): FrozenBatchNorm2d(num_features=16, eps=1e-05)
        (conv2_1_r): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_3_r): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_5_r): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_7_r): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv3): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (avgpool): Identity()
        (zero_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn4): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
    )
    (lora_layer2): Sequential(
      (0): LoRA(
        (conv1): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (pool2): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (pool4): AvgPool2d(kernel_size=4, stride=4, padding=0)
        (pool8): AvgPool2d(kernel_size=8, stride=8, padding=0)
        (conv2_1): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_3): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_5): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_7): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (bn2_1): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (bn2_3): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (bn2_5): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (bn2_7): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (conv2_1_r): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_3_r): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_5_r): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_7_r): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv3): Conv2d(64, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (zero_conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn4): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
    )
    (lora_layer3): Sequential(
      (0): LoRA(
        (conv1): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (pool2): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (pool4): AvgPool2d(kernel_size=4, stride=4, padding=0)
        (pool8): AvgPool2d(kernel_size=8, stride=8, padding=0)
        (conv2_1): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_3): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_5): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_7): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (bn2_1): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (bn2_3): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (bn2_5): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (bn2_7): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (conv2_1_r): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_3_r): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_5_r): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_7_r): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv3): Conv2d(128, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (zero_conv): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn4): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
    )
    (lora_layer4): Sequential(
      (0): LoRA(
        (conv1): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        (pool2): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (pool4): AvgPool2d(kernel_size=4, stride=4, padding=0)
        (pool8): AvgPool2d(kernel_size=8, stride=8, padding=0)
        (conv2_1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_5): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_7): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (bn2_1): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (bn2_3): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (bn2_5): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (bn2_7): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (conv2_1_r): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_3_r): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_5_r): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_7_r): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (zero_conv): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn4): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
    )
    (diff_layer1): Sequential(
      (0): LoRA(
        (conv1): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (pool2): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (pool4): AvgPool2d(kernel_size=4, stride=4, padding=0)
        (pool8): AvgPool2d(kernel_size=8, stride=8, padding=0)
        (conv2_1): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_3): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_5): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_7): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=32, eps=1e-05)
        (bn2_1): FrozenBatchNorm2d(num_features=32, eps=1e-05)
        (bn2_3): FrozenBatchNorm2d(num_features=32, eps=1e-05)
        (bn2_5): FrozenBatchNorm2d(num_features=32, eps=1e-05)
        (bn2_7): FrozenBatchNorm2d(num_features=32, eps=1e-05)
        (conv2_1_r): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_3_r): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_5_r): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_7_r): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv3): Conv2d(32, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (avgpool): Identity()
        (zero_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn4): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
    )
    (diff_layer2): Sequential(
      (0): LoRA(
        (conv1): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (pool2): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (pool4): AvgPool2d(kernel_size=4, stride=4, padding=0)
        (pool8): AvgPool2d(kernel_size=8, stride=8, padding=0)
        (conv2_1): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_3): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_5): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_7): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (bn2_1): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (bn2_3): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (bn2_5): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (bn2_7): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (conv2_1_r): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_3_r): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_5_r): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_7_r): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (avgpool): Identity()
        (zero_conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn4): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
    )
    (diff_layer3): Sequential(
      (0): LoRA(
        (conv1): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        (pool2): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (pool4): AvgPool2d(kernel_size=4, stride=4, padding=0)
        (pool8): AvgPool2d(kernel_size=8, stride=8, padding=0)
        (conv2_1): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_3): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_5): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (conv2_7): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (bn2_1): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (bn2_3): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (bn2_5): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (bn2_7): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        (conv2_1_r): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_3_r): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_5_r): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv2_7_r): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        (avgpool): Identity()
        (zero_conv): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn4): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        (relu): ReLU(inplace=True)
      )
    )
    (inv_attn1): Sequential(
      (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): FrozenBatchNorm2d(num_features=256, eps=1e-05)
      (2): ReLU(inplace=True)
    )
    (inv_attn2): Sequential(
      (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): FrozenBatchNorm2d(num_features=512, eps=1e-05)
      (2): ReLU(inplace=True)
    )
    (inv_attn3): Sequential(
      (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
      (2): ReLU(inplace=True)
    )
    (spc_attn1): Sequential(
      (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): FrozenBatchNorm2d(num_features=256, eps=1e-05)
      (2): ReLU(inplace=True)
    )
    (spc_attn2): Sequential(
      (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): FrozenBatchNorm2d(num_features=512, eps=1e-05)
      (2): ReLU(inplace=True)
    )
    (spc_attn3): Sequential(
      (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
      (2): ReLU(inplace=True)
    )
    (softmax): Softmax(dim=1)
    (attnpool): AttentionPool2d(
      (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
      (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
      (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
      (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
    )
  )
  (offline_proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): CLIPRes5ROIHeads(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (box_predictor): FastRCNNOutputLayers(
      (clip_model): CLIP(
        (visual): ModifiedResNet(
          (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu3): ReLU(inplace=True)
          (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (layer1): Sequential(
            (0): Bottleneck(
              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): Identity()
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
              (downsample): Sequential(
                (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Bottleneck(
              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): Identity()
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
            )
            (2): Bottleneck(
              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): Identity()
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
            )
          )
          (layer2): Sequential(
            (0): Bottleneck(
              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
              (downsample): Sequential(
                (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): Identity()
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
            )
            (2): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): Identity()
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
            )
            (3): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): Identity()
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
            )
          )
          (layer3): Sequential(
            (0): Bottleneck(
              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
              (downsample): Sequential(
                (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): Identity()
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
            )
            (2): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): Identity()
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
            )
            (3): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): Identity()
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
            )
            (4): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): Identity()
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
            )
            (5): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): Identity()
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
            )
          )
          (layer4): Sequential(
            (0): Bottleneck(
              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
              (downsample): Sequential(
                (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Bottleneck(
              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): Identity()
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
            )
            (2): Bottleneck(
              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (avgpool): Identity()
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
            )
          )
          (attnpool): AttentionPool2d(
            (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
            (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
            (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
            (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
          )
        )
        (transformer): Transformer(
          (resblocks): Sequential(
            (0): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=2048, out_features=512, bias=True)
              )
              (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
            (1): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=2048, out_features=512, bias=True)
              )
              (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
            (2): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=2048, out_features=512, bias=True)
              )
              (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
            (3): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=2048, out_features=512, bias=True)
              )
              (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
            (4): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=2048, out_features=512, bias=True)
              )
              (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
            (5): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=2048, out_features=512, bias=True)
              )
              (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
            (6): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=2048, out_features=512, bias=True)
              )
              (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
            (7): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=2048, out_features=512, bias=True)
              )
              (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
            (8): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=2048, out_features=512, bias=True)
              )
              (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
            (9): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=2048, out_features=512, bias=True)
              )
              (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
            (10): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=2048, out_features=512, bias=True)
              )
              (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
            (11): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=2048, out_features=512, bias=True)
              )
              (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (token_embedding): Embedding(49408, 512)
        (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
      (DAHead): DAPromptHead(
        (prompt_learner): PromptLearner(
          (clip_model): CLIP(
            (visual): ModifiedResNet(
              (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace=True)
              (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace=True)
              (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu3): ReLU(inplace=True)
              (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (layer1): Sequential(
                (0): Bottleneck(
                  (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): Identity()
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                  (downsample): Sequential(
                    (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
                    (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): Identity()
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): Identity()
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                )
              )
              (layer2): Sequential(
                (0): Bottleneck(
                  (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                  (downsample): Sequential(
                    (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
                    (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): Identity()
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): Identity()
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                )
                (3): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): Identity()
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                )
              )
              (layer3): Sequential(
                (0): Bottleneck(
                  (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                  (downsample): Sequential(
                    (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
                    (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): Identity()
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): Identity()
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                )
                (3): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): Identity()
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                )
                (4): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): Identity()
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                )
                (5): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): Identity()
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                )
              )
              (layer4): Sequential(
                (0): Bottleneck(
                  (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                  (downsample): Sequential(
                    (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
                    (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): Identity()
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu1): ReLU(inplace=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu2): ReLU(inplace=True)
                  (avgpool): Identity()
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu3): ReLU(inplace=True)
                )
              )
              (attnpool): AttentionPool2d(
                (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
                (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
                (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
                (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
              )
            )
            (transformer): Transformer(
              (resblocks): Sequential(
                (0): ResidualAttentionBlock(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                  )
                  (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (mlp): Sequential(
                    (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                    (gelu): QuickGELU()
                    (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                  )
                  (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                )
                (1): ResidualAttentionBlock(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                  )
                  (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (mlp): Sequential(
                    (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                    (gelu): QuickGELU()
                    (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                  )
                  (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                )
                (2): ResidualAttentionBlock(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                  )
                  (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (mlp): Sequential(
                    (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                    (gelu): QuickGELU()
                    (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                  )
                  (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                )
                (3): ResidualAttentionBlock(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                  )
                  (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (mlp): Sequential(
                    (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                    (gelu): QuickGELU()
                    (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                  )
                  (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                )
                (4): ResidualAttentionBlock(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                  )
                  (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (mlp): Sequential(
                    (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                    (gelu): QuickGELU()
                    (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                  )
                  (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                )
                (5): ResidualAttentionBlock(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                  )
                  (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (mlp): Sequential(
                    (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                    (gelu): QuickGELU()
                    (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                  )
                  (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                )
                (6): ResidualAttentionBlock(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                  )
                  (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (mlp): Sequential(
                    (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                    (gelu): QuickGELU()
                    (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                  )
                  (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                )
                (7): ResidualAttentionBlock(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                  )
                  (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (mlp): Sequential(
                    (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                    (gelu): QuickGELU()
                    (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                  )
                  (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                )
                (8): ResidualAttentionBlock(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                  )
                  (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (mlp): Sequential(
                    (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                    (gelu): QuickGELU()
                    (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                  )
                  (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                )
                (9): ResidualAttentionBlock(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                  )
                  (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (mlp): Sequential(
                    (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                    (gelu): QuickGELU()
                    (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                  )
                  (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                )
                (10): ResidualAttentionBlock(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                  )
                  (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (mlp): Sequential(
                    (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                    (gelu): QuickGELU()
                    (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                  )
                  (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                )
                (11): ResidualAttentionBlock(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                  )
                  (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (mlp): Sequential(
                    (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                    (gelu): QuickGELU()
                    (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                  )
                  (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                )
              )
            )
            (token_embedding): Embedding(49408, 512)
            (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
        )
        (text_encoder): TextEncoder(
          (transformer): Transformer(
            (resblocks): Sequential(
              (0): ResidualAttentionBlock(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Sequential(
                  (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                  (gelu): QuickGELU()
                  (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                )
                (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              )
              (1): ResidualAttentionBlock(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Sequential(
                  (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                  (gelu): QuickGELU()
                  (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                )
                (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              )
              (2): ResidualAttentionBlock(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Sequential(
                  (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                  (gelu): QuickGELU()
                  (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                )
                (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              )
              (3): ResidualAttentionBlock(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Sequential(
                  (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                  (gelu): QuickGELU()
                  (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                )
                (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              )
              (4): ResidualAttentionBlock(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Sequential(
                  (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                  (gelu): QuickGELU()
                  (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                )
                (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              )
              (5): ResidualAttentionBlock(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Sequential(
                  (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                  (gelu): QuickGELU()
                  (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                )
                (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              )
              (6): ResidualAttentionBlock(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Sequential(
                  (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                  (gelu): QuickGELU()
                  (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                )
                (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              )
              (7): ResidualAttentionBlock(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Sequential(
                  (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                  (gelu): QuickGELU()
                  (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                )
                (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              )
              (8): ResidualAttentionBlock(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Sequential(
                  (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                  (gelu): QuickGELU()
                  (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                )
                (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              )
              (9): ResidualAttentionBlock(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Sequential(
                  (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                  (gelu): QuickGELU()
                  (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                )
                (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              )
              (10): ResidualAttentionBlock(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Sequential(
                  (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                  (gelu): QuickGELU()
                  (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                )
                (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              )
              (11): ResidualAttentionBlock(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Sequential(
                  (c_fc): Linear(in_features=512, out_features=2048, bias=True)
                  (gelu): QuickGELU()
                  (c_proj): Linear(in_features=2048, out_features=512, bias=True)
                )
                (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              )
            )
          )
          (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
      )
      (mse): MSELoss()
      (cls_score): Linear(in_features=1024, out_features=8, bias=False)
      (cls_bg_score): Linear(in_features=1024, out_features=1, bias=False)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (head_dis): DAFeatDiscriminator(
      (relu2): LeakyReLU(negative_slope=0.1)
      (sigmoid): Sigmoid()
      (cls_domain): ModuleList(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1))
        (2): Conv2d(1024, 1, kernel_size=(1, 1), stride=(1, 1))
      )
      (norm): ModuleList(
        (0): GroupNorm(32, 2048, eps=1e-05, affine=True)
        (1): GroupNorm(32, 1024, eps=1e-05, affine=True)
        (2): SyncBatchNorm(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (mse): MSELoss()
    )
  )
  (Discriminator): DAFeatDiscriminator(
    (relu2): LeakyReLU(negative_slope=0.1)
    (sigmoid): Sigmoid()
    (cls_domain): ModuleList(
      (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (norm): ModuleList(
      (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
      (1): GroupNorm(32, 512, eps=1e-05, affine=True)
      (2): SyncBatchNorm(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (mse): MSELoss()
  )
  (Discriminator1): DAFeatDiscriminator(
    (relu2): LeakyReLU(negative_slope=0.1)
    (sigmoid): Sigmoid()
    (cls_domain): ModuleList(
      (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (norm): ModuleList(
      (0): GroupNorm(32, 256, eps=1e-05, affine=True)
      (1): GroupNorm(32, 128, eps=1e-05, affine=True)
      (2): SyncBatchNorm(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (mse): MSELoss()
  )
  (Discriminator2): DAFeatDiscriminator(
    (relu2): LeakyReLU(negative_slope=0.1)
    (sigmoid): Sigmoid()
    (cls_domain): ModuleList(
      (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (norm): ModuleList(
      (0): GroupNorm(32, 512, eps=1e-05, affine=True)
      (1): GroupNorm(32, 256, eps=1e-05, affine=True)
      (2): SyncBatchNorm(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (mse): MSELoss()
  )
  (Discriminator3): DAFeatDiscriminator(
    (relu2): LeakyReLU(negative_slope=0.1)
    (sigmoid): Sigmoid()
    (cls_domain): ModuleList(
      (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(1024, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (norm): ModuleList(
      (0): GroupNorm(32, 2048, eps=1e-05, affine=True)
      (1): GroupNorm(32, 1024, eps=1e-05, affine=True)
      (2): SyncBatchNorm(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (mse): MSELoss()
  )
)
('cityscapes_voc_trainval',)
datasets/cityscapes_voc/VOC2007/ImageSets/Main/source_trainval.txt
[09/18 16:28:16 d2.data.build]: Removed 10 images with no usable annotations. 2965 images left.
[09/18 16:28:17 d2.data.build]: Distribution of instances among all 8 categories:
|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|   person   | 17994        |   rider    | 1807         |    car     | 27155        |
|   truck    | 489          |    bus     | 385          |   train    | 171          |
| motorcycle | 739          |  bicycle   | 3729         |            |              |
|   total    | 52469        |            |              |            |              |
('foggy_cityscapes_voc_trainval',)
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/target_trainval.txt
[09/18 16:30:02 d2.data.build]: Removed 30 images with no usable annotations. 8895 images left.
[09/18 16:30:02 d2.data.build]: Distribution of instances among all 8 categories:
|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|   person   | 53982        |   rider    | 5421         |    car     | 81465        |
|   truck    | 1467         |    bus     | 1155         |   train    | 513          |
| motorcycle | 2217         |  bicycle   | 11187        |            |              |
|   total    | 157407       |            |              |            |              |
[09/18 16:30:02 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 832, 864, 896, 928, 960, 992, 1024), max_size=2048, sample_style='choice'), RandomFlip()]
[09/18 16:30:02 d2.data.build]: Using training sampler TrainingSampler
[09/18 16:30:02 d2.data.common]: Serializing 2965 elements to byte tensors and concatenating them all ...
[09/18 16:30:02 d2.data.common]: Serialized dataset takes 4.01 MiB
[09/18 16:30:02 d2.data.common]: Serializing 8895 elements to byte tensors and concatenating them all ...
[09/18 16:30:03 d2.data.common]: Serialized dataset takes 12.76 MiB
WARNING [09/18 16:30:03 d2.solver.build]: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[09/18 16:30:06 fvcore.common.checkpoint]: [Checkpointer] Loading from ./output/model_lora_56.2.pth ...
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.conv2_1.weight' to the model due to incompatible shapes: (32, 64, 3, 3) in the checkpoint but (16, 64, 3, 3) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.conv2_3.weight' to the model due to incompatible shapes: (32, 64, 3, 3) in the checkpoint but (16, 64, 3, 3) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.conv2_5.weight' to the model due to incompatible shapes: (32, 64, 3, 3) in the checkpoint but (16, 64, 3, 3) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.conv2_7.weight' to the model due to incompatible shapes: (32, 64, 3, 3) in the checkpoint but (16, 64, 3, 3) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2.weight' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2.bias' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2.running_mean' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2.running_var' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_1.weight' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_1.bias' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_1.running_mean' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_1.running_var' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_3.weight' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_3.bias' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_3.running_mean' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_3.running_var' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_5.weight' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_5.bias' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_5.running_mean' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_5.running_var' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_7.weight' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_7.bias' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_7.running_mean' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.bn2_7.running_var' to the model due to incompatible shapes: (32,) in the checkpoint but (16,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.conv2_1_r.weight' to the model due to incompatible shapes: (32, 32, 1, 1) in the checkpoint but (16, 16, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.conv2_3_r.weight' to the model due to incompatible shapes: (32, 32, 1, 1) in the checkpoint but (16, 16, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.conv2_5_r.weight' to the model due to incompatible shapes: (32, 32, 1, 1) in the checkpoint but (16, 16, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.conv2_7_r.weight' to the model due to incompatible shapes: (32, 32, 1, 1) in the checkpoint but (16, 16, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer1.0.conv3.weight' to the model due to incompatible shapes: (256, 32, 1, 1) in the checkpoint but (256, 16, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.conv2_1.weight' to the model due to incompatible shapes: (128, 256, 3, 3) in the checkpoint but (64, 256, 3, 3) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.conv2_3.weight' to the model due to incompatible shapes: (128, 256, 3, 3) in the checkpoint but (64, 256, 3, 3) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.conv2_5.weight' to the model due to incompatible shapes: (128, 256, 3, 3) in the checkpoint but (64, 256, 3, 3) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.conv2_7.weight' to the model due to incompatible shapes: (128, 256, 3, 3) in the checkpoint but (64, 256, 3, 3) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2.weight' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2.bias' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2.running_mean' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2.running_var' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_1.weight' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_1.bias' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_1.running_mean' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_1.running_var' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_3.weight' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_3.bias' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_3.running_mean' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_3.running_var' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_5.weight' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_5.bias' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_5.running_mean' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_5.running_var' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_7.weight' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_7.bias' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_7.running_mean' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.bn2_7.running_var' to the model due to incompatible shapes: (128,) in the checkpoint but (64,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.conv2_1_r.weight' to the model due to incompatible shapes: (128, 128, 1, 1) in the checkpoint but (64, 64, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.conv2_3_r.weight' to the model due to incompatible shapes: (128, 128, 1, 1) in the checkpoint but (64, 64, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.conv2_5_r.weight' to the model due to incompatible shapes: (128, 128, 1, 1) in the checkpoint but (64, 64, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.conv2_7_r.weight' to the model due to incompatible shapes: (128, 128, 1, 1) in the checkpoint but (64, 64, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer2.0.conv3.weight' to the model due to incompatible shapes: (512, 128, 1, 1) in the checkpoint but (512, 64, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.conv2_1.weight' to the model due to incompatible shapes: (256, 512, 3, 3) in the checkpoint but (128, 512, 3, 3) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.conv2_3.weight' to the model due to incompatible shapes: (256, 512, 3, 3) in the checkpoint but (128, 512, 3, 3) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.conv2_5.weight' to the model due to incompatible shapes: (256, 512, 3, 3) in the checkpoint but (128, 512, 3, 3) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.conv2_7.weight' to the model due to incompatible shapes: (256, 512, 3, 3) in the checkpoint but (128, 512, 3, 3) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2.weight' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2.bias' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2.running_mean' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2.running_var' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_1.weight' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_1.bias' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_1.running_mean' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_1.running_var' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_3.weight' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_3.bias' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_3.running_mean' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_3.running_var' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_5.weight' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_5.bias' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_5.running_mean' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_5.running_var' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_7.weight' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_7.bias' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_7.running_mean' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.bn2_7.running_var' to the model due to incompatible shapes: (256,) in the checkpoint but (128,) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.conv2_1_r.weight' to the model due to incompatible shapes: (256, 256, 1, 1) in the checkpoint but (128, 128, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.conv2_3_r.weight' to the model due to incompatible shapes: (256, 256, 1, 1) in the checkpoint but (128, 128, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.conv2_5_r.weight' to the model due to incompatible shapes: (256, 256, 1, 1) in the checkpoint but (128, 128, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.conv2_7_r.weight' to the model due to incompatible shapes: (256, 256, 1, 1) in the checkpoint but (128, 128, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Skip loading parameter 'backbone.lora_layer3.0.conv3.weight' to the model due to incompatible shapes: (1024, 256, 1, 1) in the checkpoint but (1024, 128, 1, 1) in the model! You might want to double check if this is expected.
WARNING [09/18 16:30:09 fvcore.common.checkpoint]: Some model parameters or buffers are not found in the checkpoint:
backbone.lora_layer1.0.bn2.{bias, running_mean, running_var, weight}
backbone.lora_layer1.0.bn2_1.{bias, running_mean, running_var, weight}
backbone.lora_layer1.0.bn2_3.{bias, running_mean, running_var, weight}
backbone.lora_layer1.0.bn2_5.{bias, running_mean, running_var, weight}
backbone.lora_layer1.0.bn2_7.{bias, running_mean, running_var, weight}
backbone.lora_layer1.0.conv2_1.weight
backbone.lora_layer1.0.conv2_1_r.weight
backbone.lora_layer1.0.conv2_3.weight
backbone.lora_layer1.0.conv2_3_r.weight
backbone.lora_layer1.0.conv2_5.weight
backbone.lora_layer1.0.conv2_5_r.weight
backbone.lora_layer1.0.conv2_7.weight
backbone.lora_layer1.0.conv2_7_r.weight
backbone.lora_layer1.0.conv3.weight
backbone.lora_layer2.0.bn2.{bias, running_mean, running_var, weight}
backbone.lora_layer2.0.bn2_1.{bias, running_mean, running_var, weight}
backbone.lora_layer2.0.bn2_3.{bias, running_mean, running_var, weight}
backbone.lora_layer2.0.bn2_5.{bias, running_mean, running_var, weight}
backbone.lora_layer2.0.bn2_7.{bias, running_mean, running_var, weight}
backbone.lora_layer2.0.conv2_1.weight
backbone.lora_layer2.0.conv2_1_r.weight
backbone.lora_layer2.0.conv2_3.weight
backbone.lora_layer2.0.conv2_3_r.weight
backbone.lora_layer2.0.conv2_5.weight
backbone.lora_layer2.0.conv2_5_r.weight
backbone.lora_layer2.0.conv2_7.weight
backbone.lora_layer2.0.conv2_7_r.weight
backbone.lora_layer2.0.conv3.weight
backbone.lora_layer3.0.bn2.{bias, running_mean, running_var, weight}
backbone.lora_layer3.0.bn2_1.{bias, running_mean, running_var, weight}
backbone.lora_layer3.0.bn2_3.{bias, running_mean, running_var, weight}
backbone.lora_layer3.0.bn2_5.{bias, running_mean, running_var, weight}
backbone.lora_layer3.0.bn2_7.{bias, running_mean, running_var, weight}
backbone.lora_layer3.0.conv2_1.weight
backbone.lora_layer3.0.conv2_1_r.weight
backbone.lora_layer3.0.conv2_3.weight
backbone.lora_layer3.0.conv2_3_r.weight
backbone.lora_layer3.0.conv2_5.weight
backbone.lora_layer3.0.conv2_5_r.weight
backbone.lora_layer3.0.conv2_7.weight
backbone.lora_layer3.0.conv2_7_r.weight
backbone.lora_layer3.0.conv3.weight
[09/18 16:30:09 fvcore.common.checkpoint]: [Checkpointer] Loading from ./pretrained_ckpt/rpn/rpn_coco_48.pth ...
[09/18 16:30:10 d2.checkpoint.clip_model_loading]: Renaming CLIP weights ......
[09/18 16:30:10 d2.checkpoint.clip_model_loading]: Following weights matched with model:
| Names in Model                                          | Names in Checkpoint                                                                                | Shapes                                         |
|:--------------------------------------------------------|:---------------------------------------------------------------------------------------------------|:-----------------------------------------------|
| offline_backbone.res2.0.conv1.*                         | offline_backbone.res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)            |
| offline_backbone.res2.0.conv2.*                         | offline_backbone.res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)            |
| offline_backbone.res2.0.conv3.*                         | offline_backbone.res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)       |
| offline_backbone.res2.0.shortcut.*                      | offline_backbone.res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)       |
| offline_backbone.res2.1.conv1.*                         | offline_backbone.res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)           |
| offline_backbone.res2.1.conv2.*                         | offline_backbone.res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)            |
| offline_backbone.res2.1.conv3.*                         | offline_backbone.res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)       |
| offline_backbone.res2.2.conv1.*                         | offline_backbone.res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)           |
| offline_backbone.res2.2.conv2.*                         | offline_backbone.res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)            |
| offline_backbone.res2.2.conv3.*                         | offline_backbone.res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)       |
| offline_backbone.res3.0.conv1.*                         | offline_backbone.res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)      |
| offline_backbone.res3.0.conv2.*                         | offline_backbone.res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)      |
| offline_backbone.res3.0.conv3.*                         | offline_backbone.res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)      |
| offline_backbone.res3.0.shortcut.*                      | offline_backbone.res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)      |
| offline_backbone.res3.1.conv1.*                         | offline_backbone.res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)      |
| offline_backbone.res3.1.conv2.*                         | offline_backbone.res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)      |
| offline_backbone.res3.1.conv3.*                         | offline_backbone.res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)      |
| offline_backbone.res3.2.conv1.*                         | offline_backbone.res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)      |
| offline_backbone.res3.2.conv2.*                         | offline_backbone.res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)      |
| offline_backbone.res3.2.conv3.*                         | offline_backbone.res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)      |
| offline_backbone.res3.3.conv1.*                         | offline_backbone.res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)      |
| offline_backbone.res3.3.conv2.*                         | offline_backbone.res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)      |
| offline_backbone.res3.3.conv3.*                         | offline_backbone.res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)      |
| offline_backbone.res4.0.conv1.*                         | offline_backbone.res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)      |
| offline_backbone.res4.0.conv2.*                         | offline_backbone.res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| offline_backbone.res4.0.conv3.*                         | offline_backbone.res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| offline_backbone.res4.0.shortcut.*                      | offline_backbone.res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1) |
| offline_backbone.res4.1.conv1.*                         | offline_backbone.res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| offline_backbone.res4.1.conv2.*                         | offline_backbone.res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| offline_backbone.res4.1.conv3.*                         | offline_backbone.res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| offline_backbone.res4.2.conv1.*                         | offline_backbone.res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| offline_backbone.res4.2.conv2.*                         | offline_backbone.res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| offline_backbone.res4.2.conv3.*                         | offline_backbone.res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| offline_backbone.res4.3.conv1.*                         | offline_backbone.res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| offline_backbone.res4.3.conv2.*                         | offline_backbone.res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| offline_backbone.res4.3.conv3.*                         | offline_backbone.res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| offline_backbone.res4.4.conv1.*                         | offline_backbone.res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| offline_backbone.res4.4.conv2.*                         | offline_backbone.res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| offline_backbone.res4.4.conv3.*                         | offline_backbone.res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| offline_backbone.res4.5.conv1.*                         | offline_backbone.res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| offline_backbone.res4.5.conv2.*                         | offline_backbone.res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| offline_backbone.res4.5.conv3.*                         | offline_backbone.res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| offline_backbone.stem.conv1.*                           | offline_backbone.stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)             |
| offline_proposal_generator.rpn_head.anchor_deltas.*     | offline_proposal_generator.rpn_head.anchor_deltas.{bias,weight}                                    | (60,) (60,1024,1,1)                            |
| offline_proposal_generator.rpn_head.conv.*              | offline_proposal_generator.rpn_head.conv.{bias,weight}                                             | (1024,) (1024,1024,3,3)                        |
| offline_proposal_generator.rpn_head.objectness_logits.* | offline_proposal_generator.rpn_head.objectness_logits.{bias,weight}                                | (15,) (15,1024,1,1)                            |
Initial context: "X X X X X X X X X X X X X X X X"
Initializing a domain-invariant context
Number of domain-invariant context words (tokens): 8
Initializing a domain-specific context
Number of domain-specific context words (tokens): 8
Prompts: ['X X X X X X X X X X X X X X X X person in a cityscapes image.', 'X X X X X X X X X X X X X X X X rider in a cityscapes image.', 'X X X X X X X X X X X X X X X X car in a cityscapes image.', 'X X X X X X X X X X X X X X X X truck in a cityscapes image.', 'X X X X X X X X X X X X X X X X bus in a cityscapes image.', 'X X X X X X X X X X X X X X X X train in a cityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X person in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X rider in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X car in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X truck in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bus in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X train in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a foggycityscapes image.']
('cityscapes_voc_trainval',)
datasets/cityscapes_voc/VOC2007/ImageSets/Main/source_trainval.txt
('foggy_cityscapes_voc_trainval',)
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/target_trainval.txt
Initial context: "X X X X X X X X X X X X X X X X"
Initializing a domain-invariant context
Number of domain-invariant context words (tokens): 8
Initializing a domain-specific context
Number of domain-specific context words (tokens): 8
Prompts: ['X X X X X X X X X X X X X X X X person in a cityscapes image.', 'X X X X X X X X X X X X X X X X rider in a cityscapes image.', 'X X X X X X X X X X X X X X X X car in a cityscapes image.', 'X X X X X X X X X X X X X X X X truck in a cityscapes image.', 'X X X X X X X X X X X X X X X X bus in a cityscapes image.', 'X X X X X X X X X X X X X X X X train in a cityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X person in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X rider in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X car in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X truck in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bus in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X train in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a foggycityscapes image.']
('cityscapes_voc_trainval',)
datasets/cityscapes_voc/VOC2007/ImageSets/Main/source_trainval.txt
('foggy_cityscapes_voc_trainval',)
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/target_trainval.txt
WARNING [09/18 16:30:10 fvcore.common.checkpoint]: Some model parameters or buffers are not found in the checkpoint:
Discriminator.cls_domain.0.{bias, weight}
Discriminator.cls_domain.1.{bias, weight}
Discriminator.cls_domain.2.{bias, weight}
Discriminator.norm.0.{bias, weight}
Discriminator.norm.1.{bias, weight}
Discriminator.norm.2.{bias, running_mean, running_var, weight}
Discriminator1.cls_domain.0.{bias, weight}
Discriminator1.cls_domain.1.{bias, weight}
Discriminator1.cls_domain.2.{bias, weight}
Discriminator1.norm.0.{bias, weight}
Discriminator1.norm.1.{bias, weight}
Discriminator1.norm.2.{bias, running_mean, running_var, weight}
Discriminator2.cls_domain.0.{bias, weight}
Discriminator2.cls_domain.1.{bias, weight}
Discriminator2.cls_domain.2.{bias, weight}
Discriminator2.norm.0.{bias, weight}
Discriminator2.norm.1.{bias, weight}
Discriminator2.norm.2.{bias, running_mean, running_var, weight}
Discriminator3.cls_domain.0.{bias, weight}
Discriminator3.cls_domain.1.{bias, weight}
Discriminator3.cls_domain.2.{bias, weight}
Discriminator3.norm.0.{bias, weight}
Discriminator3.norm.1.{bias, weight}
Discriminator3.norm.2.{bias, running_mean, running_var, weight}
backbone.attnpool.c_proj.{bias, weight}
backbone.attnpool.k_proj.{bias, weight}
backbone.attnpool.positional_embedding
backbone.attnpool.q_proj.{bias, weight}
backbone.attnpool.v_proj.{bias, weight}
backbone.bn1.{bias, running_mean, running_var, weight}
backbone.bn2.{bias, running_mean, running_var, weight}
backbone.bn3.{bias, running_mean, running_var, weight}
backbone.conv1.weight
backbone.conv2.weight
backbone.conv3.weight
backbone.diff_layer1.0.bn1.{bias, running_mean, running_var, weight}
backbone.diff_layer1.0.bn2.{bias, running_mean, running_var, weight}
backbone.diff_layer1.0.bn2_1.{bias, running_mean, running_var, weight}
backbone.diff_layer1.0.bn2_3.{bias, running_mean, running_var, weight}
backbone.diff_layer1.0.bn2_5.{bias, running_mean, running_var, weight}
backbone.diff_layer1.0.bn2_7.{bias, running_mean, running_var, weight}
backbone.diff_layer1.0.bn3.{bias, running_mean, running_var, weight}
backbone.diff_layer1.0.bn4.{bias, running_mean, running_var, weight}
backbone.diff_layer1.0.conv1.weight
backbone.diff_layer1.0.conv2_1.weight
backbone.diff_layer1.0.conv2_1_r.weight
backbone.diff_layer1.0.conv2_3.weight
backbone.diff_layer1.0.conv2_3_r.weight
backbone.diff_layer1.0.conv2_5.weight
backbone.diff_layer1.0.conv2_5_r.weight
backbone.diff_layer1.0.conv2_7.weight
backbone.diff_layer1.0.conv2_7_r.weight
backbone.diff_layer1.0.conv3.weight
backbone.diff_layer1.0.zero_conv.weight
backbone.diff_layer2.0.bn1.{bias, running_mean, running_var, weight}
backbone.diff_layer2.0.bn2.{bias, running_mean, running_var, weight}
backbone.diff_layer2.0.bn2_1.{bias, running_mean, running_var, weight}
backbone.diff_layer2.0.bn2_3.{bias, running_mean, running_var, weight}
backbone.diff_layer2.0.bn2_5.{bias, running_mean, running_var, weight}
backbone.diff_layer2.0.bn2_7.{bias, running_mean, running_var, weight}
backbone.diff_layer2.0.bn3.{bias, running_mean, running_var, weight}
backbone.diff_layer2.0.bn4.{bias, running_mean, running_var, weight}
backbone.diff_layer2.0.conv1.weight
backbone.diff_layer2.0.conv2_1.weight
backbone.diff_layer2.0.conv2_1_r.weight
backbone.diff_layer2.0.conv2_3.weight
backbone.diff_layer2.0.conv2_3_r.weight
backbone.diff_layer2.0.conv2_5.weight
backbone.diff_layer2.0.conv2_5_r.weight
backbone.diff_layer2.0.conv2_7.weight
backbone.diff_layer2.0.conv2_7_r.weight
backbone.diff_layer2.0.conv3.weight
backbone.diff_layer2.0.zero_conv.weight
backbone.diff_layer3.0.bn1.{bias, running_mean, running_var, weight}
backbone.diff_layer3.0.bn2.{bias, running_mean, running_var, weight}
backbone.diff_layer3.0.bn2_1.{bias, running_mean, running_var, weight}
backbone.diff_layer3.0.bn2_3.{bias, running_mean, running_var, weight}
backbone.diff_layer3.0.bn2_5.{bias, running_mean, running_var, weight}
backbone.diff_layer3.0.bn2_7.{bias, running_mean, running_var, weight}
backbone.diff_layer3.0.bn3.{bias, running_mean, running_var, weight}
backbone.diff_layer3.0.bn4.{bias, running_mean, running_var, weight}
backbone.diff_layer3.0.conv1.weight
backbone.diff_layer3.0.conv2_1.weight
backbone.diff_layer3.0.conv2_1_r.weight
backbone.diff_layer3.0.conv2_3.weight
backbone.diff_layer3.0.conv2_3_r.weight
backbone.diff_layer3.0.conv2_5.weight
backbone.diff_layer3.0.conv2_5_r.weight
backbone.diff_layer3.0.conv2_7.weight
backbone.diff_layer3.0.conv2_7_r.weight
backbone.diff_layer3.0.conv3.weight
backbone.diff_layer3.0.zero_conv.weight
backbone.inv_attn1.0.weight
backbone.inv_attn1.1.{bias, running_mean, running_var, weight}
backbone.inv_attn2.0.weight
backbone.inv_attn2.1.{bias, running_mean, running_var, weight}
backbone.inv_attn3.0.weight
backbone.inv_attn3.1.{bias, running_mean, running_var, weight}
backbone.layer1.0.bn1.{bias, running_mean, running_var, weight}
backbone.layer1.0.bn2.{bias, running_mean, running_var, weight}
backbone.layer1.0.bn3.{bias, running_mean, running_var, weight}
backbone.layer1.0.conv1.weight
backbone.layer1.0.conv2.weight
backbone.layer1.0.conv3.weight
backbone.layer1.0.downsample.0.weight
backbone.layer1.0.downsample.1.{bias, running_mean, running_var, weight}
backbone.layer1.1.bn1.{bias, running_mean, running_var, weight}
backbone.layer1.1.bn2.{bias, running_mean, running_var, weight}
backbone.layer1.1.bn3.{bias, running_mean, running_var, weight}
backbone.layer1.1.conv1.weight
backbone.layer1.1.conv2.weight
backbone.layer1.1.conv3.weight
backbone.layer1.2.bn1.{bias, running_mean, running_var, weight}
backbone.layer1.2.bn2.{bias, running_mean, running_var, weight}
backbone.layer1.2.bn3.{bias, running_mean, running_var, weight}
backbone.layer1.2.conv1.weight
backbone.layer1.2.conv2.weight
backbone.layer1.2.conv3.weight
backbone.layer2.0.bn1.{bias, running_mean, running_var, weight}
backbone.layer2.0.bn2.{bias, running_mean, running_var, weight}
backbone.layer2.0.bn3.{bias, running_mean, running_var, weight}
backbone.layer2.0.conv1.weight
backbone.layer2.0.conv2.weight
backbone.layer2.0.conv3.weight
backbone.layer2.0.downsample.0.weight
backbone.layer2.0.downsample.1.{bias, running_mean, running_var, weight}
backbone.layer2.1.bn1.{bias, running_mean, running_var, weight}
backbone.layer2.1.bn2.{bias, running_mean, running_var, weight}
backbone.layer2.1.bn3.{bias, running_mean, running_var, weight}
backbone.layer2.1.conv1.weight
backbone.layer2.1.conv2.weight
backbone.layer2.1.conv3.weight
backbone.layer2.2.bn1.{bias, running_mean, running_var, weight}
backbone.layer2.2.bn2.{bias, running_mean, running_var, weight}
backbone.layer2.2.bn3.{bias, running_mean, running_var, weight}
backbone.layer2.2.conv1.weight
backbone.layer2.2.conv2.weight
backbone.layer2.2.conv3.weight
backbone.layer2.3.bn1.{bias, running_mean, running_var, weight}
backbone.layer2.3.bn2.{bias, running_mean, running_var, weight}
backbone.layer2.3.bn3.{bias, running_mean, running_var, weight}
backbone.layer2.3.conv1.weight
backbone.layer2.3.conv2.weight
backbone.layer2.3.conv3.weight
backbone.layer3.0.bn1.{bias, running_mean, running_var, weight}
backbone.layer3.0.bn2.{bias, running_mean, running_var, weight}
backbone.layer3.0.bn3.{bias, running_mean, running_var, weight}
backbone.layer3.0.conv1.weight
backbone.layer3.0.conv2.weight
backbone.layer3.0.conv3.weight
backbone.layer3.0.downsample.0.weight
backbone.layer3.0.downsample.1.{bias, running_mean, running_var, weight}
backbone.layer3.1.bn1.{bias, running_mean, running_var, weight}
backbone.layer3.1.bn2.{bias, running_mean, running_var, weight}
backbone.layer3.1.bn3.{bias, running_mean, running_var, weight}
backbone.layer3.1.conv1.weight
backbone.layer3.1.conv2.weight
backbone.layer3.1.conv3.weight
backbone.layer3.2.bn1.{bias, running_mean, running_var, weight}
backbone.layer3.2.bn2.{bias, running_mean, running_var, weight}
backbone.layer3.2.bn3.{bias, running_mean, running_var, weight}
backbone.layer3.2.conv1.weight
backbone.layer3.2.conv2.weight
backbone.layer3.2.conv3.weight
backbone.layer3.3.bn1.{bias, running_mean, running_var, weight}
backbone.layer3.3.bn2.{bias, running_mean, running_var, weight}
backbone.layer3.3.bn3.{bias, running_mean, running_var, weight}
backbone.layer3.3.conv1.weight
backbone.layer3.3.conv2.weight
backbone.layer3.3.conv3.weight
backbone.layer3.4.bn1.{bias, running_mean, running_var, weight}
backbone.layer3.4.bn2.{bias, running_mean, running_var, weight}
backbone.layer3.4.bn3.{bias, running_mean, running_var, weight}
backbone.layer3.4.conv1.weight
backbone.layer3.4.conv2.weight
backbone.layer3.4.conv3.weight
backbone.layer3.5.bn1.{bias, running_mean, running_var, weight}
backbone.layer3.5.bn2.{bias, running_mean, running_var, weight}
backbone.layer3.5.bn3.{bias, running_mean, running_var, weight}
backbone.layer3.5.conv1.weight
backbone.layer3.5.conv2.weight
backbone.layer3.5.conv3.weight
backbone.layer4.0.bn1.{bias, running_mean, running_var, weight}
backbone.layer4.0.bn2.{bias, running_mean, running_var, weight}
backbone.layer4.0.bn3.{bias, running_mean, running_var, weight}
backbone.layer4.0.conv1.weight
backbone.layer4.0.conv2.weight
backbone.layer4.0.conv3.weight
backbone.layer4.0.downsample.0.weight
backbone.layer4.0.downsample.1.{bias, running_mean, running_var, weight}
backbone.layer4.1.bn1.{bias, running_mean, running_var, weight}
backbone.layer4.1.bn2.{bias, running_mean, running_var, weight}
backbone.layer4.1.bn3.{bias, running_mean, running_var, weight}
backbone.layer4.1.conv1.weight
backbone.layer4.1.conv2.weight
backbone.layer4.1.conv3.weight
backbone.layer4.2.bn1.{bias, running_mean, running_var, weight}
backbone.layer4.2.bn2.{bias, running_mean, running_var, weight}
backbone.layer4.2.bn3.{bias, running_mean, running_var, weight}
backbone.layer4.2.conv1.weight
backbone.layer4.2.conv2.weight
backbone.layer4.2.conv3.weight
backbone.lora_layer1.0.bn1.{bias, running_mean, running_var, weight}
backbone.lora_layer1.0.bn2.{bias, running_mean, running_var, weight}
backbone.lora_layer1.0.bn2_1.{bias, running_mean, running_var, weight}
backbone.lora_layer1.0.bn2_3.{bias, running_mean, running_var, weight}
backbone.lora_layer1.0.bn2_5.{bias, running_mean, running_var, weight}
backbone.lora_layer1.0.bn2_7.{bias, running_mean, running_var, weight}
backbone.lora_layer1.0.bn3.{bias, running_mean, running_var, weight}
backbone.lora_layer1.0.bn4.{bias, running_mean, running_var, weight}
backbone.lora_layer1.0.conv1.weight
backbone.lora_layer1.0.conv2_1.weight
backbone.lora_layer1.0.conv2_1_r.weight
backbone.lora_layer1.0.conv2_3.weight
backbone.lora_layer1.0.conv2_3_r.weight
backbone.lora_layer1.0.conv2_5.weight
backbone.lora_layer1.0.conv2_5_r.weight
backbone.lora_layer1.0.conv2_7.weight
backbone.lora_layer1.0.conv2_7_r.weight
backbone.lora_layer1.0.conv3.weight
backbone.lora_layer1.0.zero_conv.weight
backbone.lora_layer2.0.bn1.{bias, running_mean, running_var, weight}
backbone.lora_layer2.0.bn2.{bias, running_mean, running_var, weight}
backbone.lora_layer2.0.bn2_1.{bias, running_mean, running_var, weight}
backbone.lora_layer2.0.bn2_3.{bias, running_mean, running_var, weight}
backbone.lora_layer2.0.bn2_5.{bias, running_mean, running_var, weight}
backbone.lora_layer2.0.bn2_7.{bias, running_mean, running_var, weight}
backbone.lora_layer2.0.bn3.{bias, running_mean, running_var, weight}
backbone.lora_layer2.0.bn4.{bias, running_mean, running_var, weight}
backbone.lora_layer2.0.conv1.weight
backbone.lora_layer2.0.conv2_1.weight
backbone.lora_layer2.0.conv2_1_r.weight
backbone.lora_layer2.0.conv2_3.weight
backbone.lora_layer2.0.conv2_3_r.weight
backbone.lora_layer2.0.conv2_5.weight
backbone.lora_layer2.0.conv2_5_r.weight
backbone.lora_layer2.0.conv2_7.weight
backbone.lora_layer2.0.conv2_7_r.weight
backbone.lora_layer2.0.conv3.weight
backbone.lora_layer2.0.zero_conv.weight
backbone.lora_layer3.0.bn1.{bias, running_mean, running_var, weight}
backbone.lora_layer3.0.bn2.{bias, running_mean, running_var, weight}
backbone.lora_layer3.0.bn2_1.{bias, running_mean, running_var, weight}
backbone.lora_layer3.0.bn2_3.{bias, running_mean, running_var, weight}
backbone.lora_layer3.0.bn2_5.{bias, running_mean, running_var, weight}
backbone.lora_layer3.0.bn2_7.{bias, running_mean, running_var, weight}
backbone.lora_layer3.0.bn3.{bias, running_mean, running_var, weight}
backbone.lora_layer3.0.bn4.{bias, running_mean, running_var, weight}
backbone.lora_layer3.0.conv1.weight
backbone.lora_layer3.0.conv2_1.weight
backbone.lora_layer3.0.conv2_1_r.weight
backbone.lora_layer3.0.conv2_3.weight
backbone.lora_layer3.0.conv2_3_r.weight
backbone.lora_layer3.0.conv2_5.weight
backbone.lora_layer3.0.conv2_5_r.weight
backbone.lora_layer3.0.conv2_7.weight
backbone.lora_layer3.0.conv2_7_r.weight
backbone.lora_layer3.0.conv3.weight
backbone.lora_layer3.0.zero_conv.weight
backbone.lora_layer4.0.bn1.{bias, running_mean, running_var, weight}
backbone.lora_layer4.0.bn2.{bias, running_mean, running_var, weight}
backbone.lora_layer4.0.bn2_1.{bias, running_mean, running_var, weight}
backbone.lora_layer4.0.bn2_3.{bias, running_mean, running_var, weight}
backbone.lora_layer4.0.bn2_5.{bias, running_mean, running_var, weight}
backbone.lora_layer4.0.bn2_7.{bias, running_mean, running_var, weight}
backbone.lora_layer4.0.bn3.{bias, running_mean, running_var, weight}
backbone.lora_layer4.0.bn4.{bias, running_mean, running_var, weight}
backbone.lora_layer4.0.conv1.weight
backbone.lora_layer4.0.conv2_1.weight
backbone.lora_layer4.0.conv2_1_r.weight
backbone.lora_layer4.0.conv2_3.weight
backbone.lora_layer4.0.conv2_3_r.weight
backbone.lora_layer4.0.conv2_5.weight
backbone.lora_layer4.0.conv2_5_r.weight
backbone.lora_layer4.0.conv2_7.weight
backbone.lora_layer4.0.conv2_7_r.weight
backbone.lora_layer4.0.conv3.weight
backbone.lora_layer4.0.zero_conv.weight
backbone.spc_attn1.0.weight
backbone.spc_attn1.1.{bias, running_mean, running_var, weight}
backbone.spc_attn2.0.weight
backbone.spc_attn2.1.{bias, running_mean, running_var, weight}
backbone.spc_attn3.0.weight
backbone.spc_attn3.1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.ln_final.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.token_embedding.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.0.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.0.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.1.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.1.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.10.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.10.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.11.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.11.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.2.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.2.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.3.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.3.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.4.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.4.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.5.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.5.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.6.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.6.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.7.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.7.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.8.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.8.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.9.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.9.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.attnpool.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.attnpool.k_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.attnpool.positional_embedding
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.attnpool.q_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.attnpool.v_proj.{bias, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.0.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.0.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.0.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.0.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.0.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.0.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.0.downsample.0.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.0.downsample.1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.1.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.1.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.1.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.1.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.1.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.1.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.2.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.2.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.2.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.2.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.2.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer1.2.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.0.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.0.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.0.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.0.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.0.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.0.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.0.downsample.0.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.0.downsample.1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.1.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.1.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.1.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.1.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.1.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.1.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.2.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.2.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.2.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.2.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.2.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.2.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.3.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.3.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.3.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.3.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.3.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer2.3.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.0.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.0.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.0.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.0.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.0.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.0.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.0.downsample.0.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.0.downsample.1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.1.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.1.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.1.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.1.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.1.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.1.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.2.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.2.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.2.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.2.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.2.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.2.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.3.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.3.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.3.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.3.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.3.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.3.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.4.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.4.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.4.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.4.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.4.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.4.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.5.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.5.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.5.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.5.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.5.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer3.5.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.0.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.0.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.0.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.0.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.0.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.0.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.0.downsample.0.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.0.downsample.1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.1.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.1.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.1.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.1.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.1.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.1.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.2.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.2.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.2.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.2.conv1.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.2.conv2.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.visual.layer4.2.conv3.weight
roi_heads.box_predictor.DAHead.prompt_learner.clip_model.{logit_scale, positional_embedding, text_projection}
roi_heads.box_predictor.DAHead.prompt_learner.{ctx_di, ctx_di_ema, ctx_ds, ctx_ds_ema, token_prefix, token_suffix}
roi_heads.box_predictor.DAHead.text_encoder.ln_final.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.0.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.0.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.0.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.0.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.0.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.1.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.1.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.1.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.1.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.1.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.10.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.10.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.10.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.10.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.10.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.11.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.11.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.11.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.11.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.11.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.2.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.2.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.2.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.2.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.2.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.3.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.3.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.3.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.3.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.3.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.4.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.4.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.4.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.4.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.4.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.5.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.5.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.5.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.5.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.5.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.6.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.6.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.6.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.6.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.6.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.7.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.7.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.7.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.7.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.7.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.8.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.8.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.8.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.8.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.8.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.9.attn.out_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.9.ln_1.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.9.ln_2.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.9.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.transformer.resblocks.9.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.DAHead.text_encoder.{positional_embedding, text_projection}
roi_heads.box_predictor.bbox_pred.{bias, weight}
roi_heads.box_predictor.clip_model.ln_final.{bias, weight}
roi_heads.box_predictor.clip_model.token_embedding.weight
roi_heads.box_predictor.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.0.ln_1.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.0.ln_2.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.1.ln_1.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.1.ln_2.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.10.ln_1.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.10.ln_2.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.11.ln_1.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.11.ln_2.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.2.ln_1.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.2.ln_2.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.3.ln_1.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.3.ln_2.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.4.ln_1.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.4.ln_2.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.5.ln_1.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.5.ln_2.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.6.ln_1.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.6.ln_2.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.7.ln_1.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.7.ln_2.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.8.ln_1.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.8.ln_2.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.9.ln_1.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.9.ln_2.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}
roi_heads.box_predictor.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}
roi_heads.box_predictor.clip_model.visual.attnpool.c_proj.{bias, weight}
roi_heads.box_predictor.clip_model.visual.attnpool.k_proj.{bias, weight}
roi_heads.box_predictor.clip_model.visual.attnpool.positional_embedding
roi_heads.box_predictor.clip_model.visual.attnpool.q_proj.{bias, weight}
roi_heads.box_predictor.clip_model.visual.attnpool.v_proj.{bias, weight}
roi_heads.box_predictor.clip_model.visual.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.conv1.weight
roi_heads.box_predictor.clip_model.visual.conv2.weight
roi_heads.box_predictor.clip_model.visual.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer1.0.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer1.0.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer1.0.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer1.0.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer1.0.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer1.0.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer1.0.downsample.0.weight
roi_heads.box_predictor.clip_model.visual.layer1.0.downsample.1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer1.1.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer1.1.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer1.1.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer1.1.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer1.1.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer1.1.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer1.2.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer1.2.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer1.2.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer1.2.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer1.2.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer1.2.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer2.0.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer2.0.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer2.0.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer2.0.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer2.0.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer2.0.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer2.0.downsample.0.weight
roi_heads.box_predictor.clip_model.visual.layer2.0.downsample.1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer2.1.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer2.1.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer2.1.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer2.1.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer2.1.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer2.1.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer2.2.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer2.2.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer2.2.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer2.2.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer2.2.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer2.2.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer2.3.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer2.3.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer2.3.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer2.3.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer2.3.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer2.3.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer3.0.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.0.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.0.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.0.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer3.0.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer3.0.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer3.0.downsample.0.weight
roi_heads.box_predictor.clip_model.visual.layer3.0.downsample.1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.1.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.1.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.1.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.1.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer3.1.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer3.1.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer3.2.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.2.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.2.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.2.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer3.2.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer3.2.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer3.3.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.3.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.3.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.3.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer3.3.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer3.3.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer3.4.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.4.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.4.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.4.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer3.4.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer3.4.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer3.5.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.5.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.5.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer3.5.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer3.5.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer3.5.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer4.0.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer4.0.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer4.0.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer4.0.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer4.0.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer4.0.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer4.0.downsample.0.weight
roi_heads.box_predictor.clip_model.visual.layer4.0.downsample.1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer4.1.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer4.1.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer4.1.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer4.1.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer4.1.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer4.1.conv3.weight
roi_heads.box_predictor.clip_model.visual.layer4.2.bn1.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer4.2.bn2.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer4.2.bn3.{bias, running_mean, running_var, weight}
roi_heads.box_predictor.clip_model.visual.layer4.2.conv1.weight
roi_heads.box_predictor.clip_model.visual.layer4.2.conv2.weight
roi_heads.box_predictor.clip_model.visual.layer4.2.conv3.weight
roi_heads.box_predictor.clip_model.{logit_scale, positional_embedding, text_projection}
roi_heads.box_predictor.cls_bg_score.weight
roi_heads.box_predictor.cls_score.weight
roi_heads.head_dis.cls_domain.0.{bias, weight}
roi_heads.head_dis.cls_domain.1.{bias, weight}
roi_heads.head_dis.cls_domain.2.{bias, weight}
roi_heads.head_dis.norm.0.{bias, weight}
roi_heads.head_dis.norm.1.{bias, weight}
roi_heads.head_dis.norm.2.{bias, running_mean, running_var, weight}
WARNING [09/18 16:30:10 fvcore.common.checkpoint]: The checkpoint state_dict contains keys that are not used by the model:
  ignore_others
[09/18 16:30:10 d2.engine.train_loop]: Starting training from iteration 0
Initial context: "X X X X X X X X X X X X X X X X"
Initializing a domain-invariant context
Number of domain-invariant context words (tokens): 8
Initializing a domain-specific context
Number of domain-specific context words (tokens): 8
Prompts: ['X X X X X X X X X X X X X X X X person in a cityscapes image.', 'X X X X X X X X X X X X X X X X rider in a cityscapes image.', 'X X X X X X X X X X X X X X X X car in a cityscapes image.', 'X X X X X X X X X X X X X X X X truck in a cityscapes image.', 'X X X X X X X X X X X X X X X X bus in a cityscapes image.', 'X X X X X X X X X X X X X X X X train in a cityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X person in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X rider in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X car in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X truck in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bus in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X train in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a foggycityscapes image.']
('cityscapes_voc_trainval',)
datasets/cityscapes_voc/VOC2007/ImageSets/Main/source_trainval.txt
('foggy_cityscapes_voc_trainval',)
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/target_trainval.txt
Initial context: "X X X X X X X X X X X X X X X X"
Initializing a domain-invariant context
Number of domain-invariant context words (tokens): 8
Initializing a domain-specific context
Number of domain-specific context words (tokens): 8
Prompts: ['X X X X X X X X X X X X X X X X person in a cityscapes image.', 'X X X X X X X X X X X X X X X X rider in a cityscapes image.', 'X X X X X X X X X X X X X X X X car in a cityscapes image.', 'X X X X X X X X X X X X X X X X truck in a cityscapes image.', 'X X X X X X X X X X X X X X X X bus in a cityscapes image.', 'X X X X X X X X X X X X X X X X train in a cityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X person in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X rider in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X car in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X truck in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bus in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X train in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a foggycityscapes image.']
('cityscapes_voc_trainval',)
datasets/cityscapes_voc/VOC2007/ImageSets/Main/source_trainval.txt
('foggy_cityscapes_voc_trainval',)
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/target_trainval.txt
Initial context: "X X X X X X X X X X X X X X X X"
Initializing a domain-invariant context
Number of domain-invariant context words (tokens): 8
Initializing a domain-specific context
Number of domain-specific context words (tokens): 8
Prompts: ['X X X X X X X X X X X X X X X X person in a cityscapes image.', 'X X X X X X X X X X X X X X X X rider in a cityscapes image.', 'X X X X X X X X X X X X X X X X car in a cityscapes image.', 'X X X X X X X X X X X X X X X X truck in a cityscapes image.', 'X X X X X X X X X X X X X X X X bus in a cityscapes image.', 'X X X X X X X X X X X X X X X X train in a cityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X person in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X rider in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X car in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X truck in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bus in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X train in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a foggycityscapes image.']
('cityscapes_voc_trainval',)
datasets/cityscapes_voc/VOC2007/ImageSets/Main/source_trainval.txt
('foggy_cityscapes_voc_trainval',)
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/target_trainval.txt
Initial context: "X X X X X X X X X X X X X X X X"
Initializing a domain-invariant context
Number of domain-invariant context words (tokens): 8
Initializing a domain-specific context
Number of domain-specific context words (tokens): 8
Prompts: ['X X X X X X X X X X X X X X X X person in a cityscapes image.', 'X X X X X X X X X X X X X X X X rider in a cityscapes image.', 'X X X X X X X X X X X X X X X X car in a cityscapes image.', 'X X X X X X X X X X X X X X X X truck in a cityscapes image.', 'X X X X X X X X X X X X X X X X bus in a cityscapes image.', 'X X X X X X X X X X X X X X X X train in a cityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X person in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X rider in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X car in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X truck in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bus in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X train in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a foggycityscapes image.']
('cityscapes_voc_trainval',)
datasets/cityscapes_voc/VOC2007/ImageSets/Main/source_trainval.txt
('foggy_cityscapes_voc_trainval',)
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/target_trainval.txt
Initial context: "X X X X X X X X X X X X X X X X"
Initializing a domain-invariant context
Number of domain-invariant context words (tokens): 8
Initializing a domain-specific context
Number of domain-specific context words (tokens): 8
Prompts: ['X X X X X X X X X X X X X X X X person in a cityscapes image.', 'X X X X X X X X X X X X X X X X rider in a cityscapes image.', 'X X X X X X X X X X X X X X X X car in a cityscapes image.', 'X X X X X X X X X X X X X X X X truck in a cityscapes image.', 'X X X X X X X X X X X X X X X X bus in a cityscapes image.', 'X X X X X X X X X X X X X X X X train in a cityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a cityscapes image.', 'X X X X X X X X X X X X X X X X person in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X rider in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X car in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X truck in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bus in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X train in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X motorcycle in a foggycityscapes image.', 'X X X X X X X X X X X X X X X X bicycle in a foggycityscapes image.']
('cityscapes_voc_trainval',)
datasets/cityscapes_voc/VOC2007/ImageSets/Main/source_trainval.txt
('foggy_cityscapes_voc_trainval',)
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/target_trainval.txt
[09/18 16:31:11 d2.utils.events]:  eta: 14:22:04  iter: 19  total_loss: 5.243  loss_cls: 0.04299  loss_box_reg: 0.2171  loss_dis_0: 2.362  loss_dis_1: 2.603  time: 2.0731  data_time: 1.0274  lr: 9.5924e-06  max_mem: 14670M
[09/18 16:31:53 d2.utils.events]:  eta: 14:22:21  iter: 39  total_loss: 5.22  loss_cls: 0.04607  loss_box_reg: 0.2407  loss_dis_0: 2.361  loss_dis_1: 2.595  time: 2.0684  data_time: 0.0600  lr: 1.7584e-05  max_mem: 15137M
[09/18 16:32:34 d2.utils.events]:  eta: 14:21:08  iter: 59  total_loss: 5.227  loss_cls: 0.0456  loss_box_reg: 0.2256  loss_dis_0: 2.357  loss_dis_1: 2.608  time: 2.0681  data_time: 0.0493  lr: 2.5576e-05  max_mem: 15137M
[09/18 16:33:16 d2.utils.events]:  eta: 14:22:07  iter: 79  total_loss: 5.23  loss_cls: 0.04669  loss_box_reg: 0.2299  loss_dis_0: 2.379  loss_dis_1: 2.564  time: 2.0714  data_time: 0.0587  lr: 3.3568e-05  max_mem: 15137M
[09/18 16:33:58 d2.utils.events]:  eta: 14:21:41  iter: 99  total_loss: 5.231  loss_cls: 0.04513  loss_box_reg: 0.2181  loss_dis_0: 2.394  loss_dis_1: 2.572  time: 2.0739  data_time: 0.0557  lr: 4.156e-05  max_mem: 15138M
[09/18 16:34:39 d2.utils.events]:  eta: 14:21:35  iter: 119  total_loss: 5.227  loss_cls: 0.04377  loss_box_reg: 0.2127  loss_dis_0: 2.429  loss_dis_1: 2.532  time: 2.0747  data_time: 0.0554  lr: 4.9552e-05  max_mem: 15138M
[09/18 16:35:21 d2.utils.events]:  eta: 14:21:40  iter: 139  total_loss: 5.232  loss_cls: 0.04756  loss_box_reg: 0.2351  loss_dis_0: 2.431  loss_dis_1: 2.524  time: 2.0770  data_time: 0.0557  lr: 5.7544e-05  max_mem: 15138M
[09/18 16:36:03 d2.utils.events]:  eta: 14:21:21  iter: 159  total_loss: 5.241  loss_cls: 0.0504  loss_box_reg: 0.2445  loss_dis_0: 2.433  loss_dis_1: 2.508  time: 2.0781  data_time: 0.0592  lr: 6.5536e-05  max_mem: 15138M
[09/18 16:36:45 d2.utils.events]:  eta: 14:20:39  iter: 179  total_loss: 5.237  loss_cls: 0.05063  loss_box_reg: 0.2366  loss_dis_0: 2.444  loss_dis_1: 2.503  time: 2.0790  data_time: 0.0506  lr: 7.3528e-05  max_mem: 15138M
[09/18 16:37:26 d2.utils.events]:  eta: 14:20:00  iter: 199  total_loss: 5.241  loss_cls: 0.04783  loss_box_reg: 0.2303  loss_dis_0: 2.48  loss_dis_1: 2.489  time: 2.0794  data_time: 0.0475  lr: 8.152e-05  max_mem: 15138M
[09/18 16:38:08 d2.utils.events]:  eta: 14:19:40  iter: 219  total_loss: 5.214  loss_cls: 0.04628  loss_box_reg: 0.2233  loss_dis_0: 2.471  loss_dis_1: 2.458  time: 2.0799  data_time: 0.0634  lr: 8.9512e-05  max_mem: 15138M
[09/18 16:38:50 d2.utils.events]:  eta: 14:19:22  iter: 239  total_loss: 5.217  loss_cls: 0.04716  loss_box_reg: 0.2137  loss_dis_0: 2.482  loss_dis_1: 2.467  time: 2.0808  data_time: 0.0555  lr: 9.7504e-05  max_mem: 15138M
[09/18 16:39:32 d2.utils.events]:  eta: 14:18:45  iter: 259  total_loss: 5.202  loss_cls: 0.04558  loss_box_reg: 0.2219  loss_dis_0: 2.479  loss_dis_1: 2.455  time: 2.0807  data_time: 0.0522  lr: 0.0001055  max_mem: 15138M
[09/18 16:40:13 d2.utils.events]:  eta: 14:17:43  iter: 279  total_loss: 5.22  loss_cls: 0.04513  loss_box_reg: 0.216  loss_dis_0: 2.471  loss_dis_1: 2.457  time: 2.0810  data_time: 0.0526  lr: 0.00011349  max_mem: 15138M
[09/18 16:40:55 d2.utils.events]:  eta: 14:16:52  iter: 299  total_loss: 5.209  loss_cls: 0.04708  loss_box_reg: 0.2293  loss_dis_0: 2.489  loss_dis_1: 2.428  time: 2.0817  data_time: 0.0477  lr: 0.00012148  max_mem: 15138M
[09/18 16:41:37 d2.utils.events]:  eta: 14:16:03  iter: 319  total_loss: 5.206  loss_cls: 0.04523  loss_box_reg: 0.2194  loss_dis_0: 2.497  loss_dis_1: 2.435  time: 2.0811  data_time: 0.0543  lr: 0.00012947  max_mem: 15138M
[09/18 16:42:19 d2.utils.events]:  eta: 14:15:40  iter: 339  total_loss: 5.218  loss_cls: 0.04781  loss_box_reg: 0.229  loss_dis_0: 2.49  loss_dis_1: 2.437  time: 2.0817  data_time: 0.0584  lr: 0.00013746  max_mem: 15138M
[09/18 16:43:00 d2.utils.events]:  eta: 14:15:16  iter: 359  total_loss: 5.213  loss_cls: 0.04444  loss_box_reg: 0.2241  loss_dis_0: 2.486  loss_dis_1: 2.473  time: 2.0816  data_time: 0.0469  lr: 0.00014546  max_mem: 15138M
[09/18 16:43:42 d2.utils.events]:  eta: 14:14:35  iter: 379  total_loss: 5.196  loss_cls: 0.04557  loss_box_reg: 0.2371  loss_dis_0: 2.469  loss_dis_1: 2.468  time: 2.0817  data_time: 0.0710  lr: 0.00015345  max_mem: 15138M
[09/18 16:44:24 d2.utils.events]:  eta: 14:13:49  iter: 399  total_loss: 5.192  loss_cls: 0.04282  loss_box_reg: 0.2111  loss_dis_0: 2.458  loss_dis_1: 2.468  time: 2.0816  data_time: 0.0643  lr: 0.00016144  max_mem: 15138M
[09/18 16:45:05 d2.utils.events]:  eta: 14:12:38  iter: 419  total_loss: 5.222  loss_cls: 0.046  loss_box_reg: 0.2377  loss_dis_0: 2.458  loss_dis_1: 2.478  time: 2.0810  data_time: 0.0630  lr: 0.00016943  max_mem: 15138M
[09/18 16:45:47 d2.utils.events]:  eta: 14:12:04  iter: 439  total_loss: 5.22  loss_cls: 0.05232  loss_box_reg: 0.2389  loss_dis_0: 2.432  loss_dis_1: 2.492  time: 2.0816  data_time: 0.0638  lr: 0.00017742  max_mem: 15138M
[09/18 16:46:29 d2.utils.events]:  eta: 14:11:55  iter: 459  total_loss: 5.174  loss_cls: 0.04456  loss_box_reg: 0.214  loss_dis_0: 2.439  loss_dis_1: 2.488  time: 2.0822  data_time: 0.0607  lr: 0.00018542  max_mem: 15138M
[09/18 16:47:11 d2.utils.events]:  eta: 14:11:15  iter: 479  total_loss: 5.219  loss_cls: 0.04974  loss_box_reg: 0.2375  loss_dis_0: 2.45  loss_dis_1: 2.473  time: 2.0821  data_time: 0.0566  lr: 0.00019341  max_mem: 15138M
[09/18 16:47:52 d2.utils.events]:  eta: 14:10:37  iter: 499  total_loss: 5.183  loss_cls: 0.04605  loss_box_reg: 0.2086  loss_dis_0: 2.455  loss_dis_1: 2.47  time: 2.0823  data_time: 0.0594  lr: 0.0002014  max_mem: 15138M
[09/18 16:48:34 d2.utils.events]:  eta: 14:10:18  iter: 519  total_loss: 5.179  loss_cls: 0.04006  loss_box_reg: 0.2116  loss_dis_0: 2.454  loss_dis_1: 2.464  time: 2.0828  data_time: 0.0644  lr: 0.00020939  max_mem: 15138M
[09/18 16:49:16 d2.utils.events]:  eta: 14:09:39  iter: 539  total_loss: 5.209  loss_cls: 0.04656  loss_box_reg: 0.2215  loss_dis_0: 2.451  loss_dis_1: 2.488  time: 2.0827  data_time: 0.0697  lr: 0.00021738  max_mem: 15138M
[09/18 16:49:58 d2.utils.events]:  eta: 14:08:58  iter: 559  total_loss: 5.207  loss_cls: 0.04856  loss_box_reg: 0.2203  loss_dis_0: 2.466  loss_dis_1: 2.458  time: 2.0831  data_time: 0.0601  lr: 0.00022538  max_mem: 15138M
[09/18 16:50:40 d2.utils.events]:  eta: 14:08:31  iter: 579  total_loss: 5.18  loss_cls: 0.04872  loss_box_reg: 0.2331  loss_dis_0: 2.473  loss_dis_1: 2.433  time: 2.0835  data_time: 0.0664  lr: 0.00023337  max_mem: 15138M
[09/18 16:51:22 d2.utils.events]:  eta: 14:07:50  iter: 599  total_loss: 5.208  loss_cls: 0.04407  loss_box_reg: 0.2152  loss_dis_0: 2.461  loss_dis_1: 2.478  time: 2.0838  data_time: 0.0616  lr: 0.00024136  max_mem: 15138M
[09/18 16:52:04 d2.utils.events]:  eta: 14:07:29  iter: 619  total_loss: 5.22  loss_cls: 0.04859  loss_box_reg: 0.2383  loss_dis_0: 2.486  loss_dis_1: 2.439  time: 2.0841  data_time: 0.0634  lr: 0.00024935  max_mem: 15138M
[09/18 16:52:45 d2.utils.events]:  eta: 14:06:35  iter: 639  total_loss: 5.194  loss_cls: 0.04573  loss_box_reg: 0.2176  loss_dis_0: 2.474  loss_dis_1: 2.455  time: 2.0840  data_time: 0.0557  lr: 0.00025734  max_mem: 15138M
[09/18 16:53:27 d2.utils.events]:  eta: 14:05:44  iter: 659  total_loss: 5.2  loss_cls: 0.04615  loss_box_reg: 0.222  loss_dis_0: 2.489  loss_dis_1: 2.439  time: 2.0838  data_time: 0.0597  lr: 0.00026534  max_mem: 15138M
[09/18 16:54:08 d2.utils.events]:  eta: 14:05:02  iter: 679  total_loss: 5.198  loss_cls: 0.04579  loss_box_reg: 0.22  loss_dis_0: 2.507  loss_dis_1: 2.427  time: 2.0836  data_time: 0.0633  lr: 0.00027333  max_mem: 15138M
[09/18 16:54:50 d2.utils.events]:  eta: 14:04:30  iter: 699  total_loss: 5.197  loss_cls: 0.04635  loss_box_reg: 0.2331  loss_dis_0: 2.533  loss_dis_1: 2.396  time: 2.0838  data_time: 0.0583  lr: 0.00028132  max_mem: 15138M
[09/18 16:55:32 d2.utils.events]:  eta: 14:03:58  iter: 719  total_loss: 5.167  loss_cls: 0.04539  loss_box_reg: 0.2326  loss_dis_0: 2.488  loss_dis_1: 2.433  time: 2.0838  data_time: 0.0597  lr: 0.00028931  max_mem: 15138M
[09/18 16:56:14 d2.utils.events]:  eta: 14:03:22  iter: 739  total_loss: 5.15  loss_cls: 0.04453  loss_box_reg: 0.2206  loss_dis_0: 2.531  loss_dis_1: 2.363  time: 2.0841  data_time: 0.0573  lr: 0.0002973  max_mem: 15138M
[09/18 16:56:56 d2.utils.events]:  eta: 14:02:47  iter: 759  total_loss: 5.199  loss_cls: 0.05186  loss_box_reg: 0.2237  loss_dis_0: 2.449  loss_dis_1: 2.429  time: 2.0842  data_time: 0.0722  lr: 0.0003053  max_mem: 15138M
[09/18 16:57:37 d2.utils.events]:  eta: 14:01:59  iter: 779  total_loss: 5.163  loss_cls: 0.0488  loss_box_reg: 0.2198  loss_dis_0: 2.499  loss_dis_1: 2.414  time: 2.0840  data_time: 0.0630  lr: 0.00031329  max_mem: 15138M
[09/18 16:58:19 d2.utils.events]:  eta: 14:01:23  iter: 799  total_loss: 5.18  loss_cls: 0.0463  loss_box_reg: 0.2204  loss_dis_0: 2.472  loss_dis_1: 2.439  time: 2.0840  data_time: 0.0642  lr: 0.00032128  max_mem: 15138M
[09/18 16:59:01 d2.utils.events]:  eta: 14:00:47  iter: 819  total_loss: 5.177  loss_cls: 0.0457  loss_box_reg: 0.22  loss_dis_0: 2.425  loss_dis_1: 2.505  time: 2.0842  data_time: 0.0618  lr: 0.00032927  max_mem: 15138M
[09/18 16:59:43 d2.utils.events]:  eta: 14:00:05  iter: 839  total_loss: 5.22  loss_cls: 0.04933  loss_box_reg: 0.2378  loss_dis_0: 2.377  loss_dis_1: 2.546  time: 2.0843  data_time: 0.0598  lr: 0.00033726  max_mem: 15138M
[09/18 17:00:25 d2.utils.events]:  eta: 13:59:24  iter: 859  total_loss: 5.224  loss_cls: 0.04984  loss_box_reg: 0.2433  loss_dis_0: 2.399  loss_dis_1: 2.53  time: 2.0845  data_time: 0.0624  lr: 0.00034526  max_mem: 15138M
[09/18 17:01:06 d2.utils.events]:  eta: 13:58:30  iter: 879  total_loss: 5.225  loss_cls: 0.05236  loss_box_reg: 0.2319  loss_dis_0: 2.412  loss_dis_1: 2.545  time: 2.0843  data_time: 0.0708  lr: 0.00035325  max_mem: 15138M
[09/18 17:01:48 d2.utils.events]:  eta: 13:57:59  iter: 899  total_loss: 5.172  loss_cls: 0.04552  loss_box_reg: 0.2036  loss_dis_0: 2.414  loss_dis_1: 2.496  time: 2.0846  data_time: 0.0660  lr: 0.00036124  max_mem: 15138M
[09/18 17:02:30 d2.utils.events]:  eta: 13:57:09  iter: 919  total_loss: 5.195  loss_cls: 0.05168  loss_box_reg: 0.2336  loss_dis_0: 2.42  loss_dis_1: 2.499  time: 2.0844  data_time: 0.0619  lr: 0.00036923  max_mem: 15138M
[09/18 17:03:11 d2.utils.events]:  eta: 13:56:24  iter: 939  total_loss: 5.236  loss_cls: 0.05591  loss_box_reg: 0.2543  loss_dis_0: 2.364  loss_dis_1: 2.561  time: 2.0844  data_time: 0.0662  lr: 0.00037722  max_mem: 15138M
[09/18 17:03:53 d2.utils.events]:  eta: 13:55:39  iter: 959  total_loss: 5.21  loss_cls: 0.05231  loss_box_reg: 0.239  loss_dis_0: 2.405  loss_dis_1: 2.536  time: 2.0842  data_time: 0.0630  lr: 0.00038522  max_mem: 15138M
[09/18 17:04:35 d2.utils.events]:  eta: 13:54:55  iter: 979  total_loss: 5.23  loss_cls: 0.05611  loss_box_reg: 0.2347  loss_dis_0: 2.397  loss_dis_1: 2.503  time: 2.0842  data_time: 0.0673  lr: 0.00039321  max_mem: 15138M
[09/18 17:05:17 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0000999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/18 17:05:42 d2.data.build]: Distribution of instances among all 8 categories:
|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|   person   | 10257        |   rider    | 1668         |    car     | 14001        |
|   truck    | 279          |    bus     | 294          |   train    | 69           |
| motorcycle | 447          |  bicycle   | 3525         |            |              |
|   total    | 30540        |            |              |            |              |
[09/18 17:05:42 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/18 17:05:42 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/18 17:05:42 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/18 17:05:42 d2.evaluation.evaluator]: Start inference on 188 batches
[09/18 17:05:57 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0010 s / iter. Inference: 0.4684 s / iter. Eval: 0.0013 s / iter. Total: 0.4708 s / iter. ETA=0:01:23
[09/18 17:06:02 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0012 s / iter. Inference: 0.4728 s / iter. Eval: 0.0012 s / iter. Total: 0.4752 s / iter. ETA=0:01:18
[09/18 17:06:07 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0013 s / iter. Inference: 0.4701 s / iter. Eval: 0.0012 s / iter. Total: 0.4726 s / iter. ETA=0:01:13
[09/18 17:06:12 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0015 s / iter. Inference: 0.4692 s / iter. Eval: 0.0012 s / iter. Total: 0.4719 s / iter. ETA=0:01:07
[09/18 17:06:17 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0016 s / iter. Inference: 0.4672 s / iter. Eval: 0.0012 s / iter. Total: 0.4700 s / iter. ETA=0:01:02
[09/18 17:06:23 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0016 s / iter. Inference: 0.4673 s / iter. Eval: 0.0012 s / iter. Total: 0.4702 s / iter. ETA=0:00:57
[09/18 17:06:28 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0015 s / iter. Inference: 0.4674 s / iter. Eval: 0.0012 s / iter. Total: 0.4702 s / iter. ETA=0:00:52
[09/18 17:06:33 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0015 s / iter. Inference: 0.4661 s / iter. Eval: 0.0012 s / iter. Total: 0.4688 s / iter. ETA=0:00:46
[09/18 17:06:38 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0015 s / iter. Inference: 0.4621 s / iter. Eval: 0.0012 s / iter. Total: 0.4649 s / iter. ETA=0:00:40
[09/18 17:06:43 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0015 s / iter. Inference: 0.4638 s / iter. Eval: 0.0012 s / iter. Total: 0.4666 s / iter. ETA=0:00:35
[09/18 17:06:49 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0015 s / iter. Inference: 0.4647 s / iter. Eval: 0.0012 s / iter. Total: 0.4674 s / iter. ETA=0:00:30
[09/18 17:06:54 d2.evaluation.evaluator]: Inference done 134/188. Dataloading: 0.0015 s / iter. Inference: 0.4629 s / iter. Eval: 0.0012 s / iter. Total: 0.4656 s / iter. ETA=0:00:25
[09/18 17:06:59 d2.evaluation.evaluator]: Inference done 146/188. Dataloading: 0.0014 s / iter. Inference: 0.4604 s / iter. Eval: 0.0012 s / iter. Total: 0.4631 s / iter. ETA=0:00:19
[09/18 17:07:04 d2.evaluation.evaluator]: Inference done 157/188. Dataloading: 0.0014 s / iter. Inference: 0.4615 s / iter. Eval: 0.0012 s / iter. Total: 0.4641 s / iter. ETA=0:00:14
[09/18 17:07:10 d2.evaluation.evaluator]: Inference done 169/188. Dataloading: 0.0014 s / iter. Inference: 0.4603 s / iter. Eval: 0.0012 s / iter. Total: 0.4629 s / iter. ETA=0:00:08
[09/18 17:07:15 d2.evaluation.evaluator]: Inference done 180/188. Dataloading: 0.0014 s / iter. Inference: 0.4602 s / iter. Eval: 0.0012 s / iter. Total: 0.4629 s / iter. ETA=0:00:03
[09/18 17:07:38 d2.evaluation.evaluator]: Total inference time: 0:01:44.585382 (0.571505 s / iter per device, on 8 devices)
[09/18 17:07:38 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.459408 s / iter per device, on 8 devices)
[09/18 17:07:41 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[55.207354386095616, 57.7110045481338, 69.30508651056586, 40.89997353726817, 57.27123904950916, 48.89696156647634, 41.81823473619081, 53.26278476151111]
[09/18 17:08:48 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/18 17:08:48 d2.evaluation.testing]: copypaste: Task: bbox
[09/18 17:08:48 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/18 17:08:48 d2.evaluation.testing]: copypaste: 29.7014,53.0466,28.4531
[09/18 17:08:48 d2.utils.events]:  eta: 13:54:18  iter: 999  total_loss: 5.256  loss_cls: 0.0633  loss_box_reg: 0.2575  loss_dis_0: 2.399  loss_dis_1: 2.537  time: 2.0843  data_time: 0.0550  lr: 0.0004012  max_mem: 15138M
[09/18 17:09:30 d2.utils.events]:  eta: 13:53:38  iter: 1019  total_loss: 5.205  loss_cls: 0.05387  loss_box_reg: 0.2405  loss_dis_0: 2.41  loss_dis_1: 2.494  time: 2.0842  data_time: 0.0672  lr: 0.00040919  max_mem: 15138M
[09/18 17:10:11 d2.utils.events]:  eta: 13:53:03  iter: 1039  total_loss: 5.197  loss_cls: 0.05011  loss_box_reg: 0.2253  loss_dis_0: 2.366  loss_dis_1: 2.544  time: 2.0840  data_time: 0.0650  lr: 0.00041718  max_mem: 15138M
[09/18 17:10:53 d2.utils.events]:  eta: 13:52:29  iter: 1059  total_loss: 5.248  loss_cls: 0.05557  loss_box_reg: 0.2387  loss_dis_0: 2.44  loss_dis_1: 2.511  time: 2.0839  data_time: 0.0622  lr: 0.00042518  max_mem: 15138M
[09/18 17:11:34 d2.utils.events]:  eta: 13:51:43  iter: 1079  total_loss: 5.254  loss_cls: 0.05465  loss_box_reg: 0.2371  loss_dis_0: 2.504  loss_dis_1: 2.454  time: 2.0837  data_time: 0.0651  lr: 0.00043317  max_mem: 15138M
[09/18 17:12:16 d2.utils.events]:  eta: 13:50:58  iter: 1099  total_loss: 5.23  loss_cls: 0.05599  loss_box_reg: 0.2277  loss_dis_0: 2.532  loss_dis_1: 2.39  time: 2.0837  data_time: 0.0658  lr: 0.00044116  max_mem: 15138M
[09/18 17:12:58 d2.utils.events]:  eta: 13:50:20  iter: 1119  total_loss: 5.22  loss_cls: 0.04534  loss_box_reg: 0.2175  loss_dis_0: 2.505  loss_dis_1: 2.447  time: 2.0837  data_time: 0.0644  lr: 0.00044915  max_mem: 15138M
[09/18 17:13:40 d2.utils.events]:  eta: 13:49:34  iter: 1139  total_loss: 5.208  loss_cls: 0.04857  loss_box_reg: 0.2356  loss_dis_0: 2.383  loss_dis_1: 2.532  time: 2.0836  data_time: 0.0677  lr: 0.00045714  max_mem: 15138M
[09/18 17:14:21 d2.utils.events]:  eta: 13:48:37  iter: 1159  total_loss: 5.198  loss_cls: 0.0432  loss_box_reg: 0.2111  loss_dis_0: 2.439  loss_dis_1: 2.508  time: 2.0834  data_time: 0.0515  lr: 0.00046514  max_mem: 15138M
[09/18 17:15:03 d2.utils.events]:  eta: 13:48:03  iter: 1179  total_loss: 5.211  loss_cls: 0.04969  loss_box_reg: 0.2294  loss_dis_0: 2.505  loss_dis_1: 2.457  time: 2.0834  data_time: 0.0598  lr: 0.00047313  max_mem: 15138M
[09/18 17:15:44 d2.utils.events]:  eta: 13:47:17  iter: 1199  total_loss: 5.233  loss_cls: 0.05228  loss_box_reg: 0.2491  loss_dis_0: 2.456  loss_dis_1: 2.467  time: 2.0834  data_time: 0.0597  lr: 0.00048112  max_mem: 15138M
[09/18 17:16:26 d2.utils.events]:  eta: 13:46:30  iter: 1219  total_loss: 5.207  loss_cls: 0.04637  loss_box_reg: 0.2254  loss_dis_0: 2.422  loss_dis_1: 2.518  time: 2.0834  data_time: 0.0743  lr: 0.00048911  max_mem: 15138M
[09/18 17:17:08 d2.utils.events]:  eta: 13:45:40  iter: 1239  total_loss: 5.202  loss_cls: 0.05085  loss_box_reg: 0.2223  loss_dis_0: 2.45  loss_dis_1: 2.546  time: 2.0832  data_time: 0.0584  lr: 0.0004971  max_mem: 15138M
[09/18 17:17:49 d2.utils.events]:  eta: 13:44:56  iter: 1259  total_loss: 5.201  loss_cls: 0.04717  loss_box_reg: 0.2157  loss_dis_0: 2.563  loss_dis_1: 2.393  time: 2.0831  data_time: 0.0639  lr: 0.0005051  max_mem: 15138M
[09/18 17:18:31 d2.utils.events]:  eta: 13:44:18  iter: 1279  total_loss: 5.261  loss_cls: 0.04912  loss_box_reg: 0.2574  loss_dis_0: 2.305  loss_dis_1: 2.643  time: 2.0832  data_time: 0.0627  lr: 0.00051309  max_mem: 15138M
[09/18 17:19:13 d2.utils.events]:  eta: 13:43:32  iter: 1299  total_loss: 5.202  loss_cls: 0.04773  loss_box_reg: 0.2276  loss_dis_0: 2.393  loss_dis_1: 2.542  time: 2.0830  data_time: 0.0591  lr: 0.00052108  max_mem: 15138M
[09/18 17:19:54 d2.utils.events]:  eta: 13:42:58  iter: 1319  total_loss: 5.22  loss_cls: 0.04948  loss_box_reg: 0.2383  loss_dis_0: 2.467  loss_dis_1: 2.478  time: 2.0830  data_time: 0.0650  lr: 0.00052907  max_mem: 15138M
[09/18 17:20:36 d2.utils.events]:  eta: 13:42:01  iter: 1339  total_loss: 5.289  loss_cls: 0.05557  loss_box_reg: 0.2519  loss_dis_0: 2.395  loss_dis_1: 2.571  time: 2.0828  data_time: 0.0614  lr: 0.00053706  max_mem: 15138M
[09/18 17:21:17 d2.utils.events]:  eta: 13:41:12  iter: 1359  total_loss: 5.235  loss_cls: 0.05162  loss_box_reg: 0.2157  loss_dis_0: 2.491  loss_dis_1: 2.486  time: 2.0827  data_time: 0.0654  lr: 0.00054506  max_mem: 15138M
[09/18 17:21:59 d2.utils.events]:  eta: 13:40:31  iter: 1379  total_loss: 5.21  loss_cls: 0.0452  loss_box_reg: 0.2204  loss_dis_0: 2.47  loss_dis_1: 2.483  time: 2.0828  data_time: 0.0748  lr: 0.00055305  max_mem: 15138M
[09/18 17:22:41 d2.utils.events]:  eta: 13:39:49  iter: 1399  total_loss: 5.169  loss_cls: 0.0462  loss_box_reg: 0.2379  loss_dis_0: 2.41  loss_dis_1: 2.51  time: 2.0827  data_time: 0.0657  lr: 0.00056104  max_mem: 15138M
[09/18 17:23:22 d2.utils.events]:  eta: 13:39:08  iter: 1419  total_loss: 5.217  loss_cls: 0.04977  loss_box_reg: 0.2364  loss_dis_0: 2.375  loss_dis_1: 2.537  time: 2.0825  data_time: 0.0567  lr: 0.00056903  max_mem: 15138M
[09/18 17:24:04 d2.utils.events]:  eta: 13:38:25  iter: 1439  total_loss: 5.191  loss_cls: 0.04712  loss_box_reg: 0.2312  loss_dis_0: 2.423  loss_dis_1: 2.492  time: 2.0825  data_time: 0.0609  lr: 0.00057702  max_mem: 15138M
[09/18 17:24:45 d2.utils.events]:  eta: 13:37:36  iter: 1459  total_loss: 5.206  loss_cls: 0.04641  loss_box_reg: 0.226  loss_dis_0: 2.388  loss_dis_1: 2.549  time: 2.0824  data_time: 0.0644  lr: 0.00058502  max_mem: 15138M
[09/18 17:25:27 d2.utils.events]:  eta: 13:36:51  iter: 1479  total_loss: 5.198  loss_cls: 0.04696  loss_box_reg: 0.2328  loss_dis_0: 2.336  loss_dis_1: 2.567  time: 2.0823  data_time: 0.0600  lr: 0.00059301  max_mem: 15138M
[09/18 17:26:09 d2.utils.events]:  eta: 13:36:10  iter: 1499  total_loss: 5.23  loss_cls: 0.0485  loss_box_reg: 0.2361  loss_dis_0: 2.449  loss_dis_1: 2.52  time: 2.0823  data_time: 0.0664  lr: 0.000601  max_mem: 15138M
[09/18 17:26:50 d2.utils.events]:  eta: 13:35:27  iter: 1519  total_loss: 5.182  loss_cls: 0.04544  loss_box_reg: 0.2196  loss_dis_0: 2.373  loss_dis_1: 2.543  time: 2.0824  data_time: 0.0561  lr: 0.00060899  max_mem: 15138M
[09/18 17:27:32 d2.utils.events]:  eta: 13:34:39  iter: 1539  total_loss: 5.196  loss_cls: 0.04792  loss_box_reg: 0.2351  loss_dis_0: 2.413  loss_dis_1: 2.488  time: 2.0824  data_time: 0.0646  lr: 0.00061698  max_mem: 15138M
[09/18 17:28:14 d2.utils.events]:  eta: 13:33:50  iter: 1559  total_loss: 5.214  loss_cls: 0.04812  loss_box_reg: 0.2394  loss_dis_0: 2.399  loss_dis_1: 2.527  time: 2.0823  data_time: 0.0648  lr: 0.00062498  max_mem: 15138M
[09/18 17:28:55 d2.utils.events]:  eta: 13:33:03  iter: 1579  total_loss: 5.188  loss_cls: 0.04603  loss_box_reg: 0.2155  loss_dis_0: 2.476  loss_dis_1: 2.45  time: 2.0822  data_time: 0.0619  lr: 0.00063297  max_mem: 15138M
[09/18 17:29:37 d2.utils.events]:  eta: 13:32:16  iter: 1599  total_loss: 5.226  loss_cls: 0.04974  loss_box_reg: 0.222  loss_dis_0: 2.385  loss_dis_1: 2.568  time: 2.0821  data_time: 0.0609  lr: 0.00064096  max_mem: 15138M
[09/18 17:30:18 d2.utils.events]:  eta: 13:31:24  iter: 1619  total_loss: 5.252  loss_cls: 0.05066  loss_box_reg: 0.2304  loss_dis_0: 2.47  loss_dis_1: 2.498  time: 2.0820  data_time: 0.0563  lr: 0.00064895  max_mem: 15138M
[09/18 17:31:00 d2.utils.events]:  eta: 13:30:53  iter: 1639  total_loss: 5.209  loss_cls: 0.0488  loss_box_reg: 0.2307  loss_dis_0: 2.592  loss_dis_1: 2.395  time: 2.0821  data_time: 0.0597  lr: 0.00065694  max_mem: 15138M
[09/18 17:31:42 d2.utils.events]:  eta: 13:30:17  iter: 1659  total_loss: 5.233  loss_cls: 0.04985  loss_box_reg: 0.2376  loss_dis_0: 2.366  loss_dis_1: 2.599  time: 2.0825  data_time: 0.0622  lr: 0.00066494  max_mem: 15138M
[09/18 17:32:24 d2.utils.events]:  eta: 13:29:40  iter: 1679  total_loss: 5.246  loss_cls: 0.05303  loss_box_reg: 0.2397  loss_dis_0: 2.36  loss_dis_1: 2.569  time: 2.0826  data_time: 0.0503  lr: 0.00067293  max_mem: 15138M
[09/18 17:33:06 d2.utils.events]:  eta: 13:28:50  iter: 1699  total_loss: 5.242  loss_cls: 0.0517  loss_box_reg: 0.2334  loss_dis_0: 2.377  loss_dis_1: 2.598  time: 2.0826  data_time: 0.0600  lr: 0.00068092  max_mem: 15138M
[09/18 17:33:48 d2.utils.events]:  eta: 13:28:03  iter: 1719  total_loss: 5.244  loss_cls: 0.05244  loss_box_reg: 0.2537  loss_dis_0: 2.524  loss_dis_1: 2.42  time: 2.0825  data_time: 0.0599  lr: 0.00068891  max_mem: 15138M
[09/18 17:34:29 d2.utils.events]:  eta: 13:27:00  iter: 1739  total_loss: 5.208  loss_cls: 0.04929  loss_box_reg: 0.2284  loss_dis_0: 2.504  loss_dis_1: 2.447  time: 2.0824  data_time: 0.0612  lr: 0.0006969  max_mem: 15138M
[09/18 17:35:11 d2.utils.events]:  eta: 13:26:05  iter: 1759  total_loss: 5.205  loss_cls: 0.04887  loss_box_reg: 0.2488  loss_dis_0: 2.441  loss_dis_1: 2.5  time: 2.0823  data_time: 0.0536  lr: 0.0007049  max_mem: 15138M
[09/18 17:35:52 d2.utils.events]:  eta: 13:25:21  iter: 1779  total_loss: 5.225  loss_cls: 0.04529  loss_box_reg: 0.2191  loss_dis_0: 2.446  loss_dis_1: 2.575  time: 2.0823  data_time: 0.0627  lr: 0.00071289  max_mem: 15138M
[09/18 17:36:34 d2.utils.events]:  eta: 13:24:37  iter: 1799  total_loss: 5.224  loss_cls: 0.05213  loss_box_reg: 0.2541  loss_dis_0: 2.384  loss_dis_1: 2.526  time: 2.0822  data_time: 0.0551  lr: 0.00072088  max_mem: 15138M
[09/18 17:37:15 d2.utils.events]:  eta: 13:23:48  iter: 1819  total_loss: 5.221  loss_cls: 0.05107  loss_box_reg: 0.2239  loss_dis_0: 2.388  loss_dis_1: 2.519  time: 2.0822  data_time: 0.0634  lr: 0.00072887  max_mem: 15138M
[09/18 17:37:57 d2.utils.events]:  eta: 13:23:09  iter: 1839  total_loss: 5.196  loss_cls: 0.0448  loss_box_reg: 0.2325  loss_dis_0: 2.395  loss_dis_1: 2.553  time: 2.0822  data_time: 0.0684  lr: 0.00073686  max_mem: 15138M
[09/18 17:38:39 d2.utils.events]:  eta: 13:22:25  iter: 1859  total_loss: 5.188  loss_cls: 0.04958  loss_box_reg: 0.2309  loss_dis_0: 2.41  loss_dis_1: 2.477  time: 2.0823  data_time: 0.0586  lr: 0.00074486  max_mem: 15138M
[09/18 17:39:21 d2.utils.events]:  eta: 13:21:41  iter: 1879  total_loss: 5.205  loss_cls: 0.04821  loss_box_reg: 0.2275  loss_dis_0: 2.377  loss_dis_1: 2.526  time: 2.0822  data_time: 0.0597  lr: 0.00075285  max_mem: 15138M
[09/18 17:40:02 d2.utils.events]:  eta: 13:20:49  iter: 1899  total_loss: 5.202  loss_cls: 0.05027  loss_box_reg: 0.2269  loss_dis_0: 2.428  loss_dis_1: 2.448  time: 2.0821  data_time: 0.0612  lr: 0.00076084  max_mem: 15138M
[09/18 17:40:43 d2.utils.events]:  eta: 13:20:07  iter: 1919  total_loss: 5.174  loss_cls: 0.04966  loss_box_reg: 0.2423  loss_dis_0: 2.353  loss_dis_1: 2.553  time: 2.0820  data_time: 0.0676  lr: 0.00076883  max_mem: 15138M
[09/18 17:41:25 d2.utils.events]:  eta: 13:19:28  iter: 1939  total_loss: 5.268  loss_cls: 0.05099  loss_box_reg: 0.2551  loss_dis_0: 2.594  loss_dis_1: 2.339  time: 2.0821  data_time: 0.0702  lr: 0.00077682  max_mem: 15138M
[09/18 17:42:07 d2.utils.events]:  eta: 13:18:47  iter: 1959  total_loss: 5.202  loss_cls: 0.04661  loss_box_reg: 0.2201  loss_dis_0: 2.458  loss_dis_1: 2.478  time: 2.0820  data_time: 0.0597  lr: 0.00078482  max_mem: 15138M
[09/18 17:42:49 d2.utils.events]:  eta: 13:18:04  iter: 1979  total_loss: 5.213  loss_cls: 0.04556  loss_box_reg: 0.2163  loss_dis_0: 2.515  loss_dis_1: 2.393  time: 2.0820  data_time: 0.0586  lr: 0.00079281  max_mem: 15138M
[09/18 17:43:30 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0001999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/18 17:43:33 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/18 17:43:33 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/18 17:43:33 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/18 17:43:33 d2.evaluation.evaluator]: Start inference on 188 batches
[09/18 17:43:49 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0013 s / iter. Inference: 0.4796 s / iter. Eval: 0.0014 s / iter. Total: 0.4823 s / iter. ETA=0:01:25
[09/18 17:43:55 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0014 s / iter. Inference: 0.4799 s / iter. Eval: 0.0012 s / iter. Total: 0.4826 s / iter. ETA=0:01:20
[09/18 17:44:00 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0018 s / iter. Inference: 0.4798 s / iter. Eval: 0.0012 s / iter. Total: 0.4829 s / iter. ETA=0:01:14
[09/18 17:44:05 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0017 s / iter. Inference: 0.4740 s / iter. Eval: 0.0012 s / iter. Total: 0.4769 s / iter. ETA=0:01:08
[09/18 17:44:10 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0016 s / iter. Inference: 0.4711 s / iter. Eval: 0.0012 s / iter. Total: 0.4740 s / iter. ETA=0:01:03
[09/18 17:44:16 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0016 s / iter. Inference: 0.4715 s / iter. Eval: 0.0012 s / iter. Total: 0.4744 s / iter. ETA=0:00:57
[09/18 17:44:21 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0016 s / iter. Inference: 0.4723 s / iter. Eval: 0.0012 s / iter. Total: 0.4752 s / iter. ETA=0:00:52
[09/18 17:44:26 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0016 s / iter. Inference: 0.4709 s / iter. Eval: 0.0012 s / iter. Total: 0.4737 s / iter. ETA=0:00:47
[09/18 17:44:31 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0016 s / iter. Inference: 0.4670 s / iter. Eval: 0.0012 s / iter. Total: 0.4698 s / iter. ETA=0:00:41
[09/18 17:44:36 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0017 s / iter. Inference: 0.4678 s / iter. Eval: 0.0012 s / iter. Total: 0.4707 s / iter. ETA=0:00:36
[09/18 17:44:42 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0016 s / iter. Inference: 0.4679 s / iter. Eval: 0.0012 s / iter. Total: 0.4707 s / iter. ETA=0:00:31
[09/18 17:44:47 d2.evaluation.evaluator]: Inference done 134/188. Dataloading: 0.0016 s / iter. Inference: 0.4657 s / iter. Eval: 0.0012 s / iter. Total: 0.4685 s / iter. ETA=0:00:25
[09/18 17:44:52 d2.evaluation.evaluator]: Inference done 146/188. Dataloading: 0.0016 s / iter. Inference: 0.4630 s / iter. Eval: 0.0012 s / iter. Total: 0.4659 s / iter. ETA=0:00:19
[09/18 17:44:58 d2.evaluation.evaluator]: Inference done 157/188. Dataloading: 0.0016 s / iter. Inference: 0.4638 s / iter. Eval: 0.0011 s / iter. Total: 0.4667 s / iter. ETA=0:00:14
[09/18 17:45:03 d2.evaluation.evaluator]: Inference done 169/188. Dataloading: 0.0016 s / iter. Inference: 0.4629 s / iter. Eval: 0.0012 s / iter. Total: 0.4657 s / iter. ETA=0:00:08
[09/18 17:45:08 d2.evaluation.evaluator]: Inference done 180/188. Dataloading: 0.0016 s / iter. Inference: 0.4625 s / iter. Eval: 0.0012 s / iter. Total: 0.4653 s / iter. ETA=0:00:03
[09/18 17:45:32 d2.evaluation.evaluator]: Total inference time: 0:01:45.036354 (0.573969 s / iter per device, on 8 devices)
[09/18 17:45:32 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.461619 s / iter per device, on 8 devices)
[09/18 17:45:34 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[57.04027295271021, 62.25238089929233, 70.76642738245253, 39.18475568655213, 58.07022222809661, 45.934763187702075, 44.08740258293745, 57.522169842043034]
[09/18 17:46:30 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/18 17:46:30 d2.evaluation.testing]: copypaste: Task: bbox
[09/18 17:46:30 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/18 17:46:30 d2.evaluation.testing]: copypaste: 31.2295,54.3573,31.3369
[09/18 17:46:30 d2.utils.events]:  eta: 13:17:13  iter: 1999  total_loss: 5.216  loss_cls: 0.04564  loss_box_reg: 0.2257  loss_dis_0: 2.468  loss_dis_1: 2.469  time: 2.0819  data_time: 0.0577  lr: 0.0008008  max_mem: 15138M
[09/18 17:47:11 d2.utils.events]:  eta: 13:16:28  iter: 2019  total_loss: 5.182  loss_cls: 0.04503  loss_box_reg: 0.2259  loss_dis_0: 2.479  loss_dis_1: 2.458  time: 2.0818  data_time: 0.0637  lr: 0.00080879  max_mem: 15138M
[09/18 17:47:53 d2.utils.events]:  eta: 13:15:46  iter: 2039  total_loss: 5.265  loss_cls: 0.04864  loss_box_reg: 0.2344  loss_dis_0: 2.572  loss_dis_1: 2.403  time: 2.0818  data_time: 0.0599  lr: 0.00081678  max_mem: 15138M
[09/18 17:48:35 d2.utils.events]:  eta: 13:15:04  iter: 2059  total_loss: 5.204  loss_cls: 0.04768  loss_box_reg: 0.2394  loss_dis_0: 2.471  loss_dis_1: 2.435  time: 2.0817  data_time: 0.0651  lr: 0.00082478  max_mem: 15138M
[09/18 17:49:16 d2.utils.events]:  eta: 13:14:34  iter: 2079  total_loss: 5.238  loss_cls: 0.04868  loss_box_reg: 0.2497  loss_dis_0: 2.416  loss_dis_1: 2.533  time: 2.0818  data_time: 0.0589  lr: 0.00083277  max_mem: 15138M
[09/18 17:49:58 d2.utils.events]:  eta: 13:13:43  iter: 2099  total_loss: 5.19  loss_cls: 0.05217  loss_box_reg: 0.2389  loss_dis_0: 2.473  loss_dis_1: 2.422  time: 2.0817  data_time: 0.0556  lr: 0.00084076  max_mem: 15138M
[09/18 17:50:40 d2.utils.events]:  eta: 13:13:00  iter: 2119  total_loss: 5.202  loss_cls: 0.05483  loss_box_reg: 0.2366  loss_dis_0: 2.443  loss_dis_1: 2.518  time: 2.0817  data_time: 0.0626  lr: 0.00084875  max_mem: 15138M
[09/18 17:51:21 d2.utils.events]:  eta: 13:12:18  iter: 2139  total_loss: 5.281  loss_cls: 0.0645  loss_box_reg: 0.2416  loss_dis_0: 2.389  loss_dis_1: 2.61  time: 2.0816  data_time: 0.0627  lr: 0.00085674  max_mem: 15138M
[09/18 17:52:03 d2.utils.events]:  eta: 13:11:50  iter: 2159  total_loss: 5.311  loss_cls: 0.05634  loss_box_reg: 0.2574  loss_dis_0: 2.369  loss_dis_1: 2.565  time: 2.0817  data_time: 0.0744  lr: 0.00086474  max_mem: 15138M
[09/18 17:52:45 d2.utils.events]:  eta: 13:11:09  iter: 2179  total_loss: 5.283  loss_cls: 0.04848  loss_box_reg: 0.2306  loss_dis_0: 2.313  loss_dis_1: 2.692  time: 2.0817  data_time: 0.0583  lr: 0.00087273  max_mem: 15138M
[09/18 17:53:26 d2.utils.events]:  eta: 13:10:27  iter: 2199  total_loss: 5.291  loss_cls: 0.04953  loss_box_reg: 0.254  loss_dis_0: 2.43  loss_dis_1: 2.558  time: 2.0817  data_time: 0.0639  lr: 0.00088072  max_mem: 15138M
[09/18 17:54:08 d2.utils.events]:  eta: 13:09:48  iter: 2219  total_loss: 5.234  loss_cls: 0.04643  loss_box_reg: 0.2321  loss_dis_0: 2.377  loss_dis_1: 2.584  time: 2.0817  data_time: 0.0652  lr: 0.00088871  max_mem: 15138M
[09/18 17:54:50 d2.utils.events]:  eta: 13:09:08  iter: 2239  total_loss: 5.23  loss_cls: 0.04864  loss_box_reg: 0.2191  loss_dis_0: 2.534  loss_dis_1: 2.417  time: 2.0817  data_time: 0.0618  lr: 0.0008967  max_mem: 15138M
[09/18 17:55:31 d2.utils.events]:  eta: 13:08:26  iter: 2259  total_loss: 5.192  loss_cls: 0.05262  loss_box_reg: 0.2541  loss_dis_0: 2.397  loss_dis_1: 2.495  time: 2.0816  data_time: 0.0566  lr: 0.0009047  max_mem: 15138M
[09/18 17:56:13 d2.utils.events]:  eta: 13:07:43  iter: 2279  total_loss: 5.335  loss_cls: 0.04731  loss_box_reg: 0.2192  loss_dis_0: 2.271  loss_dis_1: 2.775  time: 2.0817  data_time: 0.0692  lr: 0.00091269  max_mem: 15138M
[09/18 17:56:55 d2.utils.events]:  eta: 13:07:08  iter: 2299  total_loss: 5.239  loss_cls: 0.04918  loss_box_reg: 0.2369  loss_dis_0: 2.267  loss_dis_1: 2.662  time: 2.0818  data_time: 0.0624  lr: 0.00092068  max_mem: 15138M
[09/18 17:57:37 d2.utils.events]:  eta: 13:06:28  iter: 2319  total_loss: 5.235  loss_cls: 0.04957  loss_box_reg: 0.2331  loss_dis_0: 2.38  loss_dis_1: 2.578  time: 2.0818  data_time: 0.0648  lr: 0.00092867  max_mem: 15138M
[09/18 17:58:19 d2.utils.events]:  eta: 13:05:59  iter: 2339  total_loss: 5.251  loss_cls: 0.05052  loss_box_reg: 0.2379  loss_dis_0: 2.408  loss_dis_1: 2.584  time: 2.0819  data_time: 0.0600  lr: 0.00093666  max_mem: 15138M
[09/18 17:59:01 d2.utils.events]:  eta: 13:05:22  iter: 2359  total_loss: 5.216  loss_cls: 0.04467  loss_box_reg: 0.2202  loss_dis_0: 2.371  loss_dis_1: 2.562  time: 2.0820  data_time: 0.0742  lr: 0.00094466  max_mem: 15138M
[09/18 17:59:42 d2.utils.events]:  eta: 13:04:41  iter: 2379  total_loss: 5.148  loss_cls: 0.04827  loss_box_reg: 0.2331  loss_dis_0: 2.313  loss_dis_1: 2.539  time: 2.0821  data_time: 0.0730  lr: 0.00095265  max_mem: 15138M
[09/18 18:00:24 d2.utils.events]:  eta: 13:04:07  iter: 2399  total_loss: 5.257  loss_cls: 0.04511  loss_box_reg: 0.2261  loss_dis_0: 2.344  loss_dis_1: 2.655  time: 2.0822  data_time: 0.0641  lr: 0.00096064  max_mem: 15138M
[09/18 18:01:06 d2.utils.events]:  eta: 13:03:29  iter: 2419  total_loss: 5.364  loss_cls: 0.0519  loss_box_reg: 0.237  loss_dis_0: 2.403  loss_dis_1: 2.677  time: 2.0822  data_time: 0.0695  lr: 0.00096863  max_mem: 15138M
[09/18 18:01:48 d2.utils.events]:  eta: 13:02:49  iter: 2439  total_loss: 5.208  loss_cls: 0.04906  loss_box_reg: 0.243  loss_dis_0: 2.793  loss_dis_1: 2.174  time: 2.0822  data_time: 0.0594  lr: 0.00097662  max_mem: 15138M
[09/18 18:02:30 d2.utils.events]:  eta: 13:02:19  iter: 2459  total_loss: 5.249  loss_cls: 0.0432  loss_box_reg: 0.2236  loss_dis_0: 2.597  loss_dis_1: 2.423  time: 2.0822  data_time: 0.0566  lr: 0.00098462  max_mem: 15138M
[09/18 18:03:11 d2.utils.events]:  eta: 13:01:39  iter: 2479  total_loss: 5.292  loss_cls: 0.05199  loss_box_reg: 0.2402  loss_dis_0: 2.457  loss_dis_1: 2.516  time: 2.0822  data_time: 0.0571  lr: 0.00099261  max_mem: 15138M
[09/18 18:03:53 d2.utils.events]:  eta: 13:00:55  iter: 2499  total_loss: 5.212  loss_cls: 0.04595  loss_box_reg: 0.2228  loss_dis_0: 2.429  loss_dis_1: 2.496  time: 2.0822  data_time: 0.0599  lr: 0.0010006  max_mem: 15138M
[09/18 18:04:35 d2.utils.events]:  eta: 13:00:14  iter: 2519  total_loss: 5.299  loss_cls: 0.04579  loss_box_reg: 0.2035  loss_dis_0: 2.426  loss_dis_1: 2.675  time: 2.0823  data_time: 0.0503  lr: 0.0010086  max_mem: 15138M
[09/18 18:05:17 d2.utils.events]:  eta: 12:59:50  iter: 2539  total_loss: 5.335  loss_cls: 0.04579  loss_box_reg: 0.228  loss_dis_0: 2.284  loss_dis_1: 2.774  time: 2.0824  data_time: 0.0617  lr: 0.0010166  max_mem: 15138M
[09/18 18:05:59 d2.utils.events]:  eta: 12:59:14  iter: 2559  total_loss: 5.396  loss_cls: 0.04824  loss_box_reg: 0.2296  loss_dis_0: 2.249  loss_dis_1: 2.851  time: 2.0825  data_time: 0.0563  lr: 0.0010246  max_mem: 15138M
[09/18 18:06:40 d2.utils.events]:  eta: 12:58:39  iter: 2579  total_loss: 5.309  loss_cls: 0.04799  loss_box_reg: 0.2426  loss_dis_0: 2.505  loss_dis_1: 2.53  time: 2.0826  data_time: 0.0652  lr: 0.0010326  max_mem: 15138M
[09/18 18:07:22 d2.utils.events]:  eta: 12:57:57  iter: 2599  total_loss: 5.227  loss_cls: 0.04996  loss_box_reg: 0.2258  loss_dis_0: 2.659  loss_dis_1: 2.327  time: 2.0826  data_time: 0.0683  lr: 0.0010406  max_mem: 15138M
[09/18 18:08:04 d2.utils.events]:  eta: 12:57:24  iter: 2619  total_loss: 5.239  loss_cls: 0.05449  loss_box_reg: 0.242  loss_dis_0: 2.765  loss_dis_1: 2.226  time: 2.0827  data_time: 0.0613  lr: 0.0010486  max_mem: 15138M
[09/18 18:08:46 d2.utils.events]:  eta: 12:56:36  iter: 2639  total_loss: 5.349  loss_cls: 0.04963  loss_box_reg: 0.2284  loss_dis_0: 2.648  loss_dis_1: 2.404  time: 2.0827  data_time: 0.0698  lr: 0.0010565  max_mem: 15138M
[09/18 18:09:28 d2.utils.events]:  eta: 12:55:57  iter: 2659  total_loss: 5.321  loss_cls: 0.04558  loss_box_reg: 0.2172  loss_dis_0: 2.626  loss_dis_1: 2.46  time: 2.0827  data_time: 0.0626  lr: 0.0010645  max_mem: 15138M
[09/18 18:10:10 d2.utils.events]:  eta: 12:55:15  iter: 2679  total_loss: 5.195  loss_cls: 0.0493  loss_box_reg: 0.2321  loss_dis_0: 2.582  loss_dis_1: 2.413  time: 2.0828  data_time: 0.0681  lr: 0.0010725  max_mem: 15138M
[09/18 18:10:51 d2.utils.events]:  eta: 12:54:43  iter: 2699  total_loss: 5.112  loss_cls: 0.04835  loss_box_reg: 0.2351  loss_dis_0: 2.354  loss_dis_1: 2.474  time: 2.0829  data_time: 0.0662  lr: 0.0010805  max_mem: 15138M
[09/18 18:11:33 d2.utils.events]:  eta: 12:54:02  iter: 2719  total_loss: 5.219  loss_cls: 0.04163  loss_box_reg: 0.2253  loss_dis_0: 2.578  loss_dis_1: 2.424  time: 2.0829  data_time: 0.0628  lr: 0.0010885  max_mem: 15138M
[09/18 18:12:15 d2.utils.events]:  eta: 12:53:25  iter: 2739  total_loss: 5.249  loss_cls: 0.04867  loss_box_reg: 0.2204  loss_dis_0: 2.397  loss_dis_1: 2.533  time: 2.0829  data_time: 0.0529  lr: 0.0010965  max_mem: 15138M
[09/18 18:12:57 d2.utils.events]:  eta: 12:52:43  iter: 2759  total_loss: 5.248  loss_cls: 0.0483  loss_box_reg: 0.2251  loss_dis_0: 2.542  loss_dis_1: 2.449  time: 2.0829  data_time: 0.0635  lr: 0.0011045  max_mem: 15138M
[09/18 18:13:38 d2.utils.events]:  eta: 12:52:06  iter: 2779  total_loss: 5.27  loss_cls: 0.04784  loss_box_reg: 0.23  loss_dis_0: 2.428  loss_dis_1: 2.563  time: 2.0829  data_time: 0.0608  lr: 0.0011125  max_mem: 15138M
[09/18 18:14:20 d2.utils.events]:  eta: 12:51:27  iter: 2799  total_loss: 5.292  loss_cls: 0.05364  loss_box_reg: 0.2381  loss_dis_0: 2.457  loss_dis_1: 2.579  time: 2.0829  data_time: 0.0621  lr: 0.0011205  max_mem: 15138M
[09/18 18:15:02 d2.utils.events]:  eta: 12:50:52  iter: 2819  total_loss: 5.231  loss_cls: 0.05058  loss_box_reg: 0.2323  loss_dis_0: 2.41  loss_dis_1: 2.491  time: 2.0830  data_time: 0.0582  lr: 0.0011285  max_mem: 15138M
[09/18 18:15:44 d2.utils.events]:  eta: 12:50:15  iter: 2839  total_loss: 5.25  loss_cls: 0.04705  loss_box_reg: 0.2337  loss_dis_0: 2.544  loss_dis_1: 2.391  time: 2.0831  data_time: 0.0531  lr: 0.0011365  max_mem: 15138M
[09/18 18:16:26 d2.utils.events]:  eta: 12:49:30  iter: 2859  total_loss: 5.247  loss_cls: 0.05198  loss_box_reg: 0.243  loss_dis_0: 2.407  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0606  lr: 0.0011445  max_mem: 15138M
[09/18 18:17:07 d2.utils.events]:  eta: 12:49:01  iter: 2879  total_loss: 5.437  loss_cls: 0.05142  loss_box_reg: 0.2251  loss_dis_0: 2.077  loss_dis_1: 3.099  time: 2.0831  data_time: 0.0706  lr: 0.0011524  max_mem: 15138M
[09/18 18:17:49 d2.utils.events]:  eta: 12:48:28  iter: 2899  total_loss: 5.338  loss_cls: 0.0465  loss_box_reg: 0.2334  loss_dis_0: 2.266  loss_dis_1: 2.832  time: 2.0831  data_time: 0.0596  lr: 0.0011604  max_mem: 15138M
[09/18 18:18:31 d2.utils.events]:  eta: 12:47:48  iter: 2919  total_loss: 5.168  loss_cls: 0.04879  loss_box_reg: 0.2444  loss_dis_0: 2.407  loss_dis_1: 2.419  time: 2.0831  data_time: 0.0645  lr: 0.0011684  max_mem: 15138M
[09/18 18:19:12 d2.utils.events]:  eta: 12:47:02  iter: 2939  total_loss: 5.138  loss_cls: 0.05147  loss_box_reg: 0.2427  loss_dis_0: 2.467  loss_dis_1: 2.377  time: 2.0830  data_time: 0.0658  lr: 0.0011764  max_mem: 15138M
[09/18 18:19:54 d2.utils.events]:  eta: 12:46:22  iter: 2959  total_loss: 5.197  loss_cls: 0.04415  loss_box_reg: 0.2192  loss_dis_0: 2.483  loss_dis_1: 2.406  time: 2.0831  data_time: 0.0707  lr: 0.0011844  max_mem: 15138M
[09/18 18:20:36 d2.utils.events]:  eta: 12:45:46  iter: 2979  total_loss: 5.151  loss_cls: 0.0467  loss_box_reg: 0.2266  loss_dis_0: 2.477  loss_dis_1: 2.399  time: 2.0832  data_time: 0.0637  lr: 0.0011924  max_mem: 15138M
[09/18 18:21:18 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0002999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/18 18:21:21 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/18 18:21:21 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/18 18:21:21 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/18 18:21:21 d2.evaluation.evaluator]: Start inference on 188 batches
[09/18 18:21:36 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0010 s / iter. Inference: 0.4640 s / iter. Eval: 0.0010 s / iter. Total: 0.4660 s / iter. ETA=0:01:22
[09/18 18:21:41 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0013 s / iter. Inference: 0.4710 s / iter. Eval: 0.0011 s / iter. Total: 0.4734 s / iter. ETA=0:01:18
[09/18 18:21:46 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0013 s / iter. Inference: 0.4706 s / iter. Eval: 0.0011 s / iter. Total: 0.4730 s / iter. ETA=0:01:13
[09/18 18:21:51 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0021 s / iter. Inference: 0.4688 s / iter. Eval: 0.0011 s / iter. Total: 0.4721 s / iter. ETA=0:01:07
[09/18 18:21:56 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0022 s / iter. Inference: 0.4687 s / iter. Eval: 0.0011 s / iter. Total: 0.4721 s / iter. ETA=0:01:02
[09/18 18:22:02 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0021 s / iter. Inference: 0.4698 s / iter. Eval: 0.0011 s / iter. Total: 0.4731 s / iter. ETA=0:00:57
[09/18 18:22:07 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0020 s / iter. Inference: 0.4711 s / iter. Eval: 0.0011 s / iter. Total: 0.4743 s / iter. ETA=0:00:52
[09/18 18:22:12 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0019 s / iter. Inference: 0.4698 s / iter. Eval: 0.0011 s / iter. Total: 0.4730 s / iter. ETA=0:00:47
[09/18 18:22:17 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0019 s / iter. Inference: 0.4652 s / iter. Eval: 0.0011 s / iter. Total: 0.4682 s / iter. ETA=0:00:41
[09/18 18:22:22 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0019 s / iter. Inference: 0.4658 s / iter. Eval: 0.0011 s / iter. Total: 0.4689 s / iter. ETA=0:00:36
[09/18 18:22:28 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0020 s / iter. Inference: 0.4667 s / iter. Eval: 0.0011 s / iter. Total: 0.4698 s / iter. ETA=0:00:31
[09/18 18:22:33 d2.evaluation.evaluator]: Inference done 134/188. Dataloading: 0.0019 s / iter. Inference: 0.4643 s / iter. Eval: 0.0011 s / iter. Total: 0.4675 s / iter. ETA=0:00:25
[09/18 18:22:38 d2.evaluation.evaluator]: Inference done 146/188. Dataloading: 0.0019 s / iter. Inference: 0.4618 s / iter. Eval: 0.0011 s / iter. Total: 0.4649 s / iter. ETA=0:00:19
[09/18 18:22:44 d2.evaluation.evaluator]: Inference done 157/188. Dataloading: 0.0019 s / iter. Inference: 0.4625 s / iter. Eval: 0.0011 s / iter. Total: 0.4656 s / iter. ETA=0:00:14
[09/18 18:22:49 d2.evaluation.evaluator]: Inference done 169/188. Dataloading: 0.0019 s / iter. Inference: 0.4611 s / iter. Eval: 0.0011 s / iter. Total: 0.4642 s / iter. ETA=0:00:08
[09/18 18:22:54 d2.evaluation.evaluator]: Inference done 180/188. Dataloading: 0.0019 s / iter. Inference: 0.4607 s / iter. Eval: 0.0011 s / iter. Total: 0.4637 s / iter. ETA=0:00:03
[09/18 18:23:18 d2.evaluation.evaluator]: Total inference time: 0:01:44.728270 (0.572286 s / iter per device, on 8 devices)
[09/18 18:23:18 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.459735 s / iter per device, on 8 devices)
[09/18 18:23:18 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[56.34347628055072, 61.11394890261889, 70.65757663524694, 40.108861602850844, 57.13427397926789, 49.737943345995575, 44.12309117318151, 57.65667166858819]
[09/18 18:24:14 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/18 18:24:14 d2.evaluation.testing]: copypaste: Task: bbox
[09/18 18:24:14 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/18 18:24:14 d2.evaluation.testing]: copypaste: 31.0769,54.6095,30.8559
[09/18 18:24:14 d2.utils.events]:  eta: 12:45:19  iter: 2999  total_loss: 5.181  loss_cls: 0.04045  loss_box_reg: 0.209  loss_dis_0: 2.385  loss_dis_1: 2.547  time: 2.0832  data_time: 0.0527  lr: 0.0012004  max_mem: 15138M
[09/18 18:24:55 d2.utils.events]:  eta: 12:44:27  iter: 3019  total_loss: 5.25  loss_cls: 0.04054  loss_box_reg: 0.2184  loss_dis_0: 2.446  loss_dis_1: 2.524  time: 2.0830  data_time: 0.0657  lr: 0.0012084  max_mem: 15138M
[09/18 18:25:36 d2.utils.events]:  eta: 12:43:45  iter: 3039  total_loss: 5.221  loss_cls: 0.04576  loss_box_reg: 0.2135  loss_dis_0: 2.483  loss_dis_1: 2.488  time: 2.0829  data_time: 0.0628  lr: 0.0012164  max_mem: 15138M
[09/18 18:26:18 d2.utils.events]:  eta: 12:42:56  iter: 3059  total_loss: 5.196  loss_cls: 0.05114  loss_box_reg: 0.2507  loss_dis_0: 2.537  loss_dis_1: 2.381  time: 2.0828  data_time: 0.0609  lr: 0.0012244  max_mem: 15138M
[09/18 18:26:59 d2.utils.events]:  eta: 12:42:10  iter: 3079  total_loss: 5.274  loss_cls: 0.05231  loss_box_reg: 0.2435  loss_dis_0: 2.429  loss_dis_1: 2.584  time: 2.0827  data_time: 0.0659  lr: 0.0012324  max_mem: 15138M
[09/18 18:27:41 d2.utils.events]:  eta: 12:41:25  iter: 3099  total_loss: 5.27  loss_cls: 0.05562  loss_box_reg: 0.2556  loss_dis_0: 2.308  loss_dis_1: 2.62  time: 2.0826  data_time: 0.0629  lr: 0.0012404  max_mem: 15138M
[09/18 18:28:22 d2.utils.events]:  eta: 12:40:41  iter: 3119  total_loss: 5.173  loss_cls: 0.05708  loss_box_reg: 0.2504  loss_dis_0: 2.424  loss_dis_1: 2.448  time: 2.0826  data_time: 0.0655  lr: 0.0012484  max_mem: 15138M
[09/18 18:29:03 d2.utils.events]:  eta: 12:39:55  iter: 3139  total_loss: 5.275  loss_cls: 0.0482  loss_box_reg: 0.2358  loss_dis_0: 2.434  loss_dis_1: 2.577  time: 2.0824  data_time: 0.0673  lr: 0.0012563  max_mem: 15138M
[09/18 18:29:45 d2.utils.events]:  eta: 12:39:16  iter: 3159  total_loss: 5.204  loss_cls: 0.04614  loss_box_reg: 0.2284  loss_dis_0: 2.387  loss_dis_1: 2.54  time: 2.0825  data_time: 0.0719  lr: 0.0012643  max_mem: 15138M
[09/18 18:30:27 d2.utils.events]:  eta: 12:38:21  iter: 3179  total_loss: 5.312  loss_cls: 0.05065  loss_box_reg: 0.2469  loss_dis_0: 2.329  loss_dis_1: 2.545  time: 2.0825  data_time: 0.0553  lr: 0.0012723  max_mem: 15138M
[09/18 18:31:08 d2.utils.events]:  eta: 12:37:35  iter: 3199  total_loss: 5.34  loss_cls: 0.04475  loss_box_reg: 0.2349  loss_dis_0: 2.006  loss_dis_1: 3.047  time: 2.0825  data_time: 0.0566  lr: 0.0012803  max_mem: 15138M
[09/18 18:31:50 d2.utils.events]:  eta: 12:36:53  iter: 3219  total_loss: 5.328  loss_cls: 0.04825  loss_box_reg: 0.2232  loss_dis_0: 2.336  loss_dis_1: 2.734  time: 2.0824  data_time: 0.0683  lr: 0.0012883  max_mem: 15138M
[09/18 18:32:32 d2.utils.events]:  eta: 12:36:16  iter: 3239  total_loss: 5.29  loss_cls: 0.04698  loss_box_reg: 0.237  loss_dis_0: 2.429  loss_dis_1: 2.593  time: 2.0825  data_time: 0.0626  lr: 0.0012963  max_mem: 15138M
[09/18 18:33:14 d2.utils.events]:  eta: 12:35:36  iter: 3259  total_loss: 5.481  loss_cls: 0.07106  loss_box_reg: 0.2806  loss_dis_0: 2.398  loss_dis_1: 2.742  time: 2.0825  data_time: 0.0636  lr: 0.0013043  max_mem: 15138M
[09/18 18:33:55 d2.utils.events]:  eta: 12:34:53  iter: 3279  total_loss: 5.371  loss_cls: 0.06317  loss_box_reg: 0.2643  loss_dis_0: 2.41  loss_dis_1: 2.649  time: 2.0825  data_time: 0.0741  lr: 0.0013123  max_mem: 15138M
[09/18 18:34:37 d2.utils.events]:  eta: 12:34:10  iter: 3299  total_loss: 5.324  loss_cls: 0.05456  loss_box_reg: 0.2447  loss_dis_0: 2.433  loss_dis_1: 2.581  time: 2.0825  data_time: 0.0565  lr: 0.0013203  max_mem: 15138M
[09/18 18:35:19 d2.utils.events]:  eta: 12:33:28  iter: 3319  total_loss: 5.286  loss_cls: 0.05287  loss_box_reg: 0.2474  loss_dis_0: 2.475  loss_dis_1: 2.539  time: 2.0825  data_time: 0.0621  lr: 0.0013283  max_mem: 15138M
[09/18 18:36:00 d2.utils.events]:  eta: 12:32:39  iter: 3339  total_loss: 5.302  loss_cls: 0.05154  loss_box_reg: 0.2397  loss_dis_0: 2.477  loss_dis_1: 2.54  time: 2.0824  data_time: 0.0552  lr: 0.0013363  max_mem: 15138M
[09/18 18:36:42 d2.utils.events]:  eta: 12:31:53  iter: 3359  total_loss: 5.272  loss_cls: 0.04472  loss_box_reg: 0.2092  loss_dis_0: 2.423  loss_dis_1: 2.591  time: 2.0823  data_time: 0.0651  lr: 0.0013443  max_mem: 15138M
[09/18 18:37:23 d2.utils.events]:  eta: 12:31:11  iter: 3379  total_loss: 5.324  loss_cls: 0.0512  loss_box_reg: 0.2424  loss_dis_0: 2.42  loss_dis_1: 2.598  time: 2.0824  data_time: 0.0602  lr: 0.0013522  max_mem: 15138M
[09/18 18:38:05 d2.utils.events]:  eta: 12:30:21  iter: 3399  total_loss: 5.279  loss_cls: 0.04537  loss_box_reg: 0.232  loss_dis_0: 2.517  loss_dis_1: 2.484  time: 2.0823  data_time: 0.0601  lr: 0.0013602  max_mem: 15138M
[09/18 18:38:47 d2.utils.events]:  eta: 12:29:31  iter: 3419  total_loss: 5.203  loss_cls: 0.04139  loss_box_reg: 0.2275  loss_dis_0: 2.716  loss_dis_1: 2.223  time: 2.0824  data_time: 0.0668  lr: 0.0013682  max_mem: 15138M
[09/18 18:39:28 d2.utils.events]:  eta: 12:28:49  iter: 3439  total_loss: 5.201  loss_cls: 0.04644  loss_box_reg: 0.2257  loss_dis_0: 2.628  loss_dis_1: 2.295  time: 2.0823  data_time: 0.0722  lr: 0.0013762  max_mem: 15138M
[09/18 18:40:10 d2.utils.events]:  eta: 12:28:12  iter: 3459  total_loss: 5.239  loss_cls: 0.05316  loss_box_reg: 0.2387  loss_dis_0: 2.465  loss_dis_1: 2.455  time: 2.0823  data_time: 0.0642  lr: 0.0013842  max_mem: 15138M
[09/18 18:40:52 d2.utils.events]:  eta: 12:27:30  iter: 3479  total_loss: 5.251  loss_cls: 0.04391  loss_box_reg: 0.224  loss_dis_0: 2.619  loss_dis_1: 2.353  time: 2.0823  data_time: 0.0607  lr: 0.0013922  max_mem: 15138M
[09/18 18:41:33 d2.utils.events]:  eta: 12:26:48  iter: 3499  total_loss: 5.266  loss_cls: 0.04532  loss_box_reg: 0.2298  loss_dis_0: 2.498  loss_dis_1: 2.498  time: 2.0823  data_time: 0.0663  lr: 0.0014002  max_mem: 15138M
[09/18 18:42:15 d2.utils.events]:  eta: 12:25:57  iter: 3519  total_loss: 5.224  loss_cls: 0.04558  loss_box_reg: 0.2324  loss_dis_0: 2.492  loss_dis_1: 2.448  time: 2.0823  data_time: 0.0577  lr: 0.0014082  max_mem: 15138M
[09/18 18:42:57 d2.utils.events]:  eta: 12:25:08  iter: 3539  total_loss: 5.212  loss_cls: 0.04461  loss_box_reg: 0.2261  loss_dis_0: 2.25  loss_dis_1: 2.709  time: 2.0822  data_time: 0.0684  lr: 0.0014162  max_mem: 15138M
[09/18 18:43:38 d2.utils.events]:  eta: 12:24:21  iter: 3559  total_loss: 5.21  loss_cls: 0.04701  loss_box_reg: 0.2339  loss_dis_0: 2.349  loss_dis_1: 2.612  time: 2.0822  data_time: 0.0645  lr: 0.0014242  max_mem: 15138M
[09/18 18:44:20 d2.utils.events]:  eta: 12:23:32  iter: 3579  total_loss: 5.265  loss_cls: 0.04925  loss_box_reg: 0.2327  loss_dis_0: 2.482  loss_dis_1: 2.471  time: 2.0822  data_time: 0.0688  lr: 0.0014322  max_mem: 15138M
[09/18 18:45:02 d2.utils.events]:  eta: 12:22:59  iter: 3599  total_loss: 5.246  loss_cls: 0.03951  loss_box_reg: 0.2099  loss_dis_0: 2.443  loss_dis_1: 2.536  time: 2.0822  data_time: 0.0661  lr: 0.0014402  max_mem: 15138M
[09/18 18:45:43 d2.utils.events]:  eta: 12:22:12  iter: 3619  total_loss: 5.279  loss_cls: 0.05142  loss_box_reg: 0.2455  loss_dis_0: 2.614  loss_dis_1: 2.351  time: 2.0822  data_time: 0.0659  lr: 0.0014482  max_mem: 15138M
[09/18 18:46:25 d2.utils.events]:  eta: 12:21:30  iter: 3639  total_loss: 5.333  loss_cls: 0.0531  loss_box_reg: 0.2367  loss_dis_0: 2.451  loss_dis_1: 2.594  time: 2.0822  data_time: 0.0678  lr: 0.0014561  max_mem: 15138M
[09/18 18:47:07 d2.utils.events]:  eta: 12:20:44  iter: 3659  total_loss: 5.25  loss_cls: 0.0507  loss_box_reg: 0.2437  loss_dis_0: 2.501  loss_dis_1: 2.45  time: 2.0822  data_time: 0.0680  lr: 0.0014641  max_mem: 15138M
[09/18 18:47:48 d2.utils.events]:  eta: 12:19:56  iter: 3679  total_loss: 5.244  loss_cls: 0.05052  loss_box_reg: 0.2373  loss_dis_0: 2.654  loss_dis_1: 2.334  time: 2.0822  data_time: 0.0619  lr: 0.0014721  max_mem: 15138M
[09/18 18:48:30 d2.utils.events]:  eta: 12:19:14  iter: 3699  total_loss: 5.312  loss_cls: 0.05039  loss_box_reg: 0.226  loss_dis_0: 2.375  loss_dis_1: 2.633  time: 2.0823  data_time: 0.0577  lr: 0.0014801  max_mem: 15138M
[09/18 18:49:12 d2.utils.events]:  eta: 12:18:31  iter: 3719  total_loss: 5.286  loss_cls: 0.04676  loss_box_reg: 0.2345  loss_dis_0: 2.488  loss_dis_1: 2.522  time: 2.0823  data_time: 0.0593  lr: 0.0014881  max_mem: 15138M
[09/18 18:49:53 d2.utils.events]:  eta: 12:17:46  iter: 3739  total_loss: 5.323  loss_cls: 0.05535  loss_box_reg: 0.2616  loss_dis_0: 2.384  loss_dis_1: 2.603  time: 2.0822  data_time: 0.0630  lr: 0.0014961  max_mem: 15138M
[09/18 18:50:35 d2.utils.events]:  eta: 12:17:06  iter: 3759  total_loss: 5.236  loss_cls: 0.04696  loss_box_reg: 0.2348  loss_dis_0: 2.52  loss_dis_1: 2.464  time: 2.0822  data_time: 0.0686  lr: 0.0015041  max_mem: 15138M
[09/18 18:51:17 d2.utils.events]:  eta: 12:16:25  iter: 3779  total_loss: 5.283  loss_cls: 0.04912  loss_box_reg: 0.2265  loss_dis_0: 2.588  loss_dis_1: 2.39  time: 2.0823  data_time: 0.0708  lr: 0.0015121  max_mem: 15138M
[09/18 18:51:59 d2.utils.events]:  eta: 12:15:43  iter: 3799  total_loss: 5.298  loss_cls: 0.05101  loss_box_reg: 0.2489  loss_dis_0: 2.542  loss_dis_1: 2.42  time: 2.0823  data_time: 0.0628  lr: 0.0015201  max_mem: 15138M
[09/18 18:52:40 d2.utils.events]:  eta: 12:14:52  iter: 3819  total_loss: 5.245  loss_cls: 0.04524  loss_box_reg: 0.2163  loss_dis_0: 2.452  loss_dis_1: 2.542  time: 2.0823  data_time: 0.0704  lr: 0.0015281  max_mem: 15138M
[09/18 18:53:22 d2.utils.events]:  eta: 12:14:02  iter: 3839  total_loss: 5.287  loss_cls: 0.04641  loss_box_reg: 0.2318  loss_dis_0: 2.35  loss_dis_1: 2.657  time: 2.0822  data_time: 0.0538  lr: 0.0015361  max_mem: 15138M
[09/18 18:54:04 d2.utils.events]:  eta: 12:13:24  iter: 3859  total_loss: 5.251  loss_cls: 0.0476  loss_box_reg: 0.2489  loss_dis_0: 2.5  loss_dis_1: 2.448  time: 2.0822  data_time: 0.0645  lr: 0.0015441  max_mem: 15138M
[09/18 18:54:45 d2.utils.events]:  eta: 12:12:38  iter: 3879  total_loss: 5.213  loss_cls: 0.04825  loss_box_reg: 0.2306  loss_dis_0: 2.354  loss_dis_1: 2.586  time: 2.0822  data_time: 0.0653  lr: 0.001552  max_mem: 15138M
[09/18 18:55:27 d2.utils.events]:  eta: 12:11:52  iter: 3899  total_loss: 5.238  loss_cls: 0.04264  loss_box_reg: 0.2064  loss_dis_0: 2.359  loss_dis_1: 2.64  time: 2.0822  data_time: 0.0694  lr: 0.00156  max_mem: 15138M
[09/18 18:56:09 d2.utils.events]:  eta: 12:11:14  iter: 3919  total_loss: 5.305  loss_cls: 0.05048  loss_box_reg: 0.2424  loss_dis_0: 2.746  loss_dis_1: 2.246  time: 2.0822  data_time: 0.0617  lr: 0.001568  max_mem: 15138M
[09/18 18:56:50 d2.utils.events]:  eta: 12:10:33  iter: 3939  total_loss: 5.279  loss_cls: 0.04809  loss_box_reg: 0.2535  loss_dis_0: 2.412  loss_dis_1: 2.59  time: 2.0822  data_time: 0.0563  lr: 0.001576  max_mem: 15138M
[09/18 18:57:32 d2.utils.events]:  eta: 12:09:52  iter: 3959  total_loss: 5.234  loss_cls: 0.04538  loss_box_reg: 0.2249  loss_dis_0: 2.497  loss_dis_1: 2.469  time: 2.0822  data_time: 0.0573  lr: 0.001584  max_mem: 15138M
[09/18 18:58:14 d2.utils.events]:  eta: 12:09:02  iter: 3979  total_loss: 5.256  loss_cls: 0.04457  loss_box_reg: 0.2226  loss_dis_0: 2.515  loss_dis_1: 2.418  time: 2.0822  data_time: 0.0723  lr: 0.001592  max_mem: 15138M
[09/18 18:58:55 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0003999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/18 18:58:58 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/18 18:58:58 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/18 18:58:58 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/18 18:58:58 d2.evaluation.evaluator]: Start inference on 188 batches
[09/18 18:59:13 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0009 s / iter. Inference: 0.4708 s / iter. Eval: 0.0010 s / iter. Total: 0.4727 s / iter. ETA=0:01:23
[09/18 18:59:18 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0015 s / iter. Inference: 0.4732 s / iter. Eval: 0.0011 s / iter. Total: 0.4758 s / iter. ETA=0:01:18
[09/18 18:59:23 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0017 s / iter. Inference: 0.4718 s / iter. Eval: 0.0011 s / iter. Total: 0.4747 s / iter. ETA=0:01:13
[09/18 18:59:28 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0017 s / iter. Inference: 0.4706 s / iter. Eval: 0.0011 s / iter. Total: 0.4734 s / iter. ETA=0:01:08
[09/18 18:59:33 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0017 s / iter. Inference: 0.4698 s / iter. Eval: 0.0012 s / iter. Total: 0.4728 s / iter. ETA=0:01:02
[09/18 18:59:39 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0018 s / iter. Inference: 0.4711 s / iter. Eval: 0.0012 s / iter. Total: 0.4741 s / iter. ETA=0:00:57
[09/18 18:59:44 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0019 s / iter. Inference: 0.4725 s / iter. Eval: 0.0012 s / iter. Total: 0.4756 s / iter. ETA=0:00:52
[09/18 18:59:49 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0018 s / iter. Inference: 0.4710 s / iter. Eval: 0.0012 s / iter. Total: 0.4741 s / iter. ETA=0:00:47
[09/18 18:59:54 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0018 s / iter. Inference: 0.4668 s / iter. Eval: 0.0012 s / iter. Total: 0.4698 s / iter. ETA=0:00:41
[09/18 19:00:00 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0018 s / iter. Inference: 0.4686 s / iter. Eval: 0.0011 s / iter. Total: 0.4716 s / iter. ETA=0:00:36
[09/18 19:00:05 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0019 s / iter. Inference: 0.4689 s / iter. Eval: 0.0011 s / iter. Total: 0.4720 s / iter. ETA=0:00:31
[09/18 19:00:10 d2.evaluation.evaluator]: Inference done 134/188. Dataloading: 0.0018 s / iter. Inference: 0.4660 s / iter. Eval: 0.0011 s / iter. Total: 0.4690 s / iter. ETA=0:00:25
[09/18 19:00:16 d2.evaluation.evaluator]: Inference done 146/188. Dataloading: 0.0018 s / iter. Inference: 0.4636 s / iter. Eval: 0.0011 s / iter. Total: 0.4666 s / iter. ETA=0:00:19
[09/18 19:00:21 d2.evaluation.evaluator]: Inference done 157/188. Dataloading: 0.0018 s / iter. Inference: 0.4641 s / iter. Eval: 0.0011 s / iter. Total: 0.4671 s / iter. ETA=0:00:14
[09/18 19:00:26 d2.evaluation.evaluator]: Inference done 169/188. Dataloading: 0.0018 s / iter. Inference: 0.4628 s / iter. Eval: 0.0011 s / iter. Total: 0.4658 s / iter. ETA=0:00:08
[09/18 19:00:31 d2.evaluation.evaluator]: Inference done 180/188. Dataloading: 0.0018 s / iter. Inference: 0.4632 s / iter. Eval: 0.0011 s / iter. Total: 0.4662 s / iter. ETA=0:00:03
[09/18 19:00:55 d2.evaluation.evaluator]: Total inference time: 0:01:45.147517 (0.574577 s / iter per device, on 8 devices)
[09/18 19:00:55 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.462114 s / iter per device, on 8 devices)
[09/18 19:00:56 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[56.96128669356762, 61.842116486612994, 70.83707892870179, 40.39396061893803, 57.80012468628968, 44.622929574943605, 43.09417595527651, 57.83970260301323]
[09/18 19:01:52 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/18 19:01:52 d2.evaluation.testing]: copypaste: Task: bbox
[09/18 19:01:52 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/18 19:01:52 d2.evaluation.testing]: copypaste: 30.7511,54.1739,30.4664
[09/18 19:01:52 d2.utils.events]:  eta: 12:08:13  iter: 3999  total_loss: 5.26  loss_cls: 0.04655  loss_box_reg: 0.2168  loss_dis_0: 2.846  loss_dis_1: 2.178  time: 2.0821  data_time: 0.0686  lr: 0.0016  max_mem: 15138M
[09/18 19:02:33 d2.utils.events]:  eta: 12:07:40  iter: 4019  total_loss: 5.268  loss_cls: 0.04373  loss_box_reg: 0.2112  loss_dis_0: 2.544  loss_dis_1: 2.412  time: 2.0821  data_time: 0.0667  lr: 0.001608  max_mem: 15138M
[09/18 19:03:15 d2.utils.events]:  eta: 12:06:54  iter: 4039  total_loss: 5.225  loss_cls: 0.04421  loss_box_reg: 0.2108  loss_dis_0: 2.535  loss_dis_1: 2.398  time: 2.0821  data_time: 0.0603  lr: 0.001616  max_mem: 15138M
[09/18 19:03:56 d2.utils.events]:  eta: 12:06:19  iter: 4059  total_loss: 5.234  loss_cls: 0.0455  loss_box_reg: 0.2191  loss_dis_0: 2.475  loss_dis_1: 2.483  time: 2.0821  data_time: 0.0742  lr: 0.001624  max_mem: 15138M
[09/18 19:04:38 d2.utils.events]:  eta: 12:05:37  iter: 4079  total_loss: 5.275  loss_cls: 0.04612  loss_box_reg: 0.2283  loss_dis_0: 2.556  loss_dis_1: 2.444  time: 2.0820  data_time: 0.0596  lr: 0.001632  max_mem: 15138M
[09/18 19:05:19 d2.utils.events]:  eta: 12:04:47  iter: 4099  total_loss: 5.351  loss_cls: 0.04917  loss_box_reg: 0.2376  loss_dis_0: 2.644  loss_dis_1: 2.467  time: 2.0820  data_time: 0.0688  lr: 0.00164  max_mem: 15138M
[09/18 19:06:01 d2.utils.events]:  eta: 12:04:03  iter: 4119  total_loss: 5.261  loss_cls: 0.0466  loss_box_reg: 0.2415  loss_dis_0: 2.461  loss_dis_1: 2.465  time: 2.0819  data_time: 0.0576  lr: 0.001648  max_mem: 15138M
[09/18 19:06:43 d2.utils.events]:  eta: 12:03:25  iter: 4139  total_loss: 5.278  loss_cls: 0.04245  loss_box_reg: 0.2116  loss_dis_0: 2.299  loss_dis_1: 2.725  time: 2.0820  data_time: 0.0553  lr: 0.0016559  max_mem: 15138M
[09/18 19:07:25 d2.utils.events]:  eta: 12:02:41  iter: 4159  total_loss: 5.33  loss_cls: 0.04632  loss_box_reg: 0.224  loss_dis_0: 2.271  loss_dis_1: 2.801  time: 2.0820  data_time: 0.0667  lr: 0.0016639  max_mem: 15138M
[09/18 19:08:06 d2.utils.events]:  eta: 12:02:00  iter: 4179  total_loss: 5.402  loss_cls: 0.04434  loss_box_reg: 0.2236  loss_dis_0: 2.229  loss_dis_1: 2.898  time: 2.0820  data_time: 0.0696  lr: 0.0016719  max_mem: 15138M
[09/18 19:08:48 d2.utils.events]:  eta: 12:01:17  iter: 4199  total_loss: 5.377  loss_cls: 0.04991  loss_box_reg: 0.2429  loss_dis_0: 2.373  loss_dis_1: 2.711  time: 2.0820  data_time: 0.0652  lr: 0.0016799  max_mem: 15138M
[09/18 19:09:30 d2.utils.events]:  eta: 12:00:36  iter: 4219  total_loss: 5.25  loss_cls: 0.05149  loss_box_reg: 0.2528  loss_dis_0: 2.774  loss_dis_1: 2.208  time: 2.0820  data_time: 0.0550  lr: 0.0016879  max_mem: 15138M
[09/18 19:10:12 d2.utils.events]:  eta: 11:59:57  iter: 4239  total_loss: 5.408  loss_cls: 0.05746  loss_box_reg: 0.2393  loss_dis_0: 2.827  loss_dis_1: 2.276  time: 2.0820  data_time: 0.0674  lr: 0.0016959  max_mem: 15138M
[09/18 19:10:53 d2.utils.events]:  eta: 11:59:18  iter: 4259  total_loss: 5.422  loss_cls: 0.05084  loss_box_reg: 0.2481  loss_dis_0: 3.036  loss_dis_1: 2.098  time: 2.0821  data_time: 0.0711  lr: 0.0017039  max_mem: 15138M
[09/18 19:11:35 d2.utils.events]:  eta: 11:58:46  iter: 4279  total_loss: 5.522  loss_cls: 0.04679  loss_box_reg: 0.2317  loss_dis_0: 3.033  loss_dis_1: 2.229  time: 2.0821  data_time: 0.0630  lr: 0.0017119  max_mem: 15138M
[09/18 19:12:17 d2.utils.events]:  eta: 11:58:10  iter: 4299  total_loss: 5.499  loss_cls: 0.04966  loss_box_reg: 0.2405  loss_dis_0: 2.865  loss_dis_1: 2.334  time: 2.0821  data_time: 0.0642  lr: 0.0017199  max_mem: 15138M
[09/18 19:12:59 d2.utils.events]:  eta: 11:57:32  iter: 4319  total_loss: 5.529  loss_cls: 0.04761  loss_box_reg: 0.2238  loss_dis_0: 2.841  loss_dis_1: 2.387  time: 2.0822  data_time: 0.0626  lr: 0.0017279  max_mem: 15138M
[09/18 19:13:41 d2.utils.events]:  eta: 11:57:00  iter: 4339  total_loss: 5.488  loss_cls: 0.0433  loss_box_reg: 0.2168  loss_dis_0: 2.86  loss_dis_1: 2.369  time: 2.0823  data_time: 0.0653  lr: 0.0017359  max_mem: 15138M
[09/18 19:14:23 d2.utils.events]:  eta: 11:56:18  iter: 4359  total_loss: 5.596  loss_cls: 0.05268  loss_box_reg: 0.2342  loss_dis_0: 2.926  loss_dis_1: 2.376  time: 2.0823  data_time: 0.0672  lr: 0.0017439  max_mem: 15138M
[09/18 19:15:05 d2.utils.events]:  eta: 11:55:40  iter: 4379  total_loss: 5.454  loss_cls: 0.05279  loss_box_reg: 0.2427  loss_dis_0: 2.89  loss_dis_1: 2.26  time: 2.0824  data_time: 0.0502  lr: 0.0017518  max_mem: 15138M
[09/18 19:15:46 d2.utils.events]:  eta: 11:54:59  iter: 4399  total_loss: 5.34  loss_cls: 0.05174  loss_box_reg: 0.2401  loss_dis_0: 2.743  loss_dis_1: 2.346  time: 2.0823  data_time: 0.0612  lr: 0.0017598  max_mem: 15138M
[09/18 19:16:28 d2.utils.events]:  eta: 11:54:24  iter: 4419  total_loss: 5.382  loss_cls: 0.04919  loss_box_reg: 0.2458  loss_dis_0: 2.685  loss_dis_1: 2.422  time: 2.0824  data_time: 0.0658  lr: 0.0017678  max_mem: 15138M
[09/18 19:17:10 d2.utils.events]:  eta: 11:53:36  iter: 4439  total_loss: 5.274  loss_cls: 0.04741  loss_box_reg: 0.2298  loss_dis_0: 2.654  loss_dis_1: 2.328  time: 2.0823  data_time: 0.0678  lr: 0.0017758  max_mem: 15138M
[09/18 19:17:51 d2.utils.events]:  eta: 11:52:54  iter: 4459  total_loss: 5.098  loss_cls: 0.05144  loss_box_reg: 0.2282  loss_dis_0: 2.235  loss_dis_1: 2.604  time: 2.0823  data_time: 0.0653  lr: 0.0017838  max_mem: 15138M
[09/18 19:18:33 d2.utils.events]:  eta: 11:52:19  iter: 4479  total_loss: 5.301  loss_cls: 0.05835  loss_box_reg: 0.2427  loss_dis_0: 2.587  loss_dis_1: 2.382  time: 2.0824  data_time: 0.0629  lr: 0.0017918  max_mem: 15138M
[09/18 19:19:15 d2.utils.events]:  eta: 11:51:31  iter: 4499  total_loss: 5.241  loss_cls: 0.04386  loss_box_reg: 0.2247  loss_dis_0: 2.23  loss_dis_1: 2.692  time: 2.0824  data_time: 0.0635  lr: 0.0017998  max_mem: 15138M
[09/18 19:19:57 d2.utils.events]:  eta: 11:51:01  iter: 4519  total_loss: 5.337  loss_cls: 0.05342  loss_box_reg: 0.2399  loss_dis_0: 2.198  loss_dis_1: 2.816  time: 2.0824  data_time: 0.0578  lr: 0.0018078  max_mem: 15138M
[09/18 19:20:39 d2.utils.events]:  eta: 11:50:24  iter: 4539  total_loss: 5.341  loss_cls: 0.05592  loss_box_reg: 0.2498  loss_dis_0: 2.089  loss_dis_1: 2.935  time: 2.0824  data_time: 0.0644  lr: 0.0018158  max_mem: 15138M
[09/18 19:21:20 d2.utils.events]:  eta: 11:49:46  iter: 4559  total_loss: 5.288  loss_cls: 0.04694  loss_box_reg: 0.2092  loss_dis_0: 2.239  loss_dis_1: 2.78  time: 2.0824  data_time: 0.0633  lr: 0.0018238  max_mem: 15138M
[09/18 19:22:02 d2.utils.events]:  eta: 11:49:11  iter: 4579  total_loss: 5.311  loss_cls: 0.05576  loss_box_reg: 0.2429  loss_dis_0: 2.358  loss_dis_1: 2.661  time: 2.0824  data_time: 0.0570  lr: 0.0018318  max_mem: 15138M
[09/18 19:22:44 d2.utils.events]:  eta: 11:48:29  iter: 4599  total_loss: 5.308  loss_cls: 0.04747  loss_box_reg: 0.234  loss_dis_0: 2.442  loss_dis_1: 2.57  time: 2.0825  data_time: 0.0626  lr: 0.0018398  max_mem: 15138M
[09/18 19:23:26 d2.utils.events]:  eta: 11:47:47  iter: 4619  total_loss: 5.305  loss_cls: 0.05177  loss_box_reg: 0.2361  loss_dis_0: 2.472  loss_dis_1: 2.536  time: 2.0825  data_time: 0.0685  lr: 0.0018478  max_mem: 15138M
[09/18 19:24:07 d2.utils.events]:  eta: 11:47:05  iter: 4639  total_loss: 5.308  loss_cls: 0.04964  loss_box_reg: 0.2404  loss_dis_0: 2.502  loss_dis_1: 2.517  time: 2.0825  data_time: 0.0616  lr: 0.0018557  max_mem: 15138M
[09/18 19:24:49 d2.utils.events]:  eta: 11:46:25  iter: 4659  total_loss: 5.34  loss_cls: 0.05243  loss_box_reg: 0.2575  loss_dis_0: 2.494  loss_dis_1: 2.527  time: 2.0825  data_time: 0.0709  lr: 0.0018637  max_mem: 15138M
[09/18 19:25:31 d2.utils.events]:  eta: 11:45:44  iter: 4679  total_loss: 5.343  loss_cls: 0.05762  loss_box_reg: 0.2668  loss_dis_0: 2.495  loss_dis_1: 2.529  time: 2.0825  data_time: 0.0663  lr: 0.0018717  max_mem: 15138M
[09/18 19:26:13 d2.utils.events]:  eta: 11:45:01  iter: 4699  total_loss: 5.297  loss_cls: 0.05028  loss_box_reg: 0.2249  loss_dis_0: 2.504  loss_dis_1: 2.511  time: 2.0826  data_time: 0.0666  lr: 0.0018797  max_mem: 15138M
[09/18 19:26:55 d2.utils.events]:  eta: 11:44:21  iter: 4719  total_loss: 5.31  loss_cls: 0.04852  loss_box_reg: 0.2389  loss_dis_0: 2.51  loss_dis_1: 2.508  time: 2.0826  data_time: 0.0748  lr: 0.0018877  max_mem: 15138M
[09/18 19:27:37 d2.utils.events]:  eta: 11:44:00  iter: 4739  total_loss: 5.256  loss_cls: 0.04872  loss_box_reg: 0.2383  loss_dis_0: 2.5  loss_dis_1: 2.47  time: 2.0826  data_time: 0.0635  lr: 0.0018957  max_mem: 15138M
[09/18 19:28:19 d2.utils.events]:  eta: 11:43:17  iter: 4759  total_loss: 5.189  loss_cls: 0.04254  loss_box_reg: 0.2218  loss_dis_0: 2.535  loss_dis_1: 2.418  time: 2.0827  data_time: 0.0688  lr: 0.0019037  max_mem: 15138M
[09/18 19:29:00 d2.utils.events]:  eta: 11:42:37  iter: 4779  total_loss: 5.2  loss_cls: 0.04513  loss_box_reg: 0.2228  loss_dis_0: 2.493  loss_dis_1: 2.44  time: 2.0827  data_time: 0.0655  lr: 0.0019117  max_mem: 15138M
[09/18 19:29:43 d2.utils.events]:  eta: 11:42:02  iter: 4799  total_loss: 5.258  loss_cls: 0.04946  loss_box_reg: 0.2267  loss_dis_0: 2.432  loss_dis_1: 2.525  time: 2.0828  data_time: 0.0611  lr: 0.0019197  max_mem: 15138M
[09/18 19:30:24 d2.utils.events]:  eta: 11:41:22  iter: 4819  total_loss: 5.26  loss_cls: 0.04507  loss_box_reg: 0.233  loss_dis_0: 2.361  loss_dis_1: 2.623  time: 2.0829  data_time: 0.0640  lr: 0.0019277  max_mem: 15138M
[09/18 19:31:06 d2.utils.events]:  eta: 11:40:46  iter: 4839  total_loss: 5.228  loss_cls: 0.04222  loss_box_reg: 0.2169  loss_dis_0: 2.463  loss_dis_1: 2.494  time: 2.0829  data_time: 0.0666  lr: 0.0019357  max_mem: 15138M
[09/18 19:31:48 d2.utils.events]:  eta: 11:40:06  iter: 4859  total_loss: 5.156  loss_cls: 0.0451  loss_box_reg: 0.2205  loss_dis_0: 2.542  loss_dis_1: 2.371  time: 2.0829  data_time: 0.0689  lr: 0.0019437  max_mem: 15138M
[09/18 19:32:30 d2.utils.events]:  eta: 11:39:30  iter: 4879  total_loss: 5.175  loss_cls: 0.0467  loss_box_reg: 0.2329  loss_dis_0: 2.573  loss_dis_1: 2.361  time: 2.0830  data_time: 0.0628  lr: 0.0019516  max_mem: 15138M
[09/18 19:33:12 d2.utils.events]:  eta: 11:38:51  iter: 4899  total_loss: 5.249  loss_cls: 0.04895  loss_box_reg: 0.2434  loss_dis_0: 2.459  loss_dis_1: 2.494  time: 2.0830  data_time: 0.0634  lr: 0.0019596  max_mem: 15138M
[09/18 19:33:54 d2.utils.events]:  eta: 11:38:12  iter: 4919  total_loss: 5.269  loss_cls: 0.04405  loss_box_reg: 0.2304  loss_dis_0: 2.601  loss_dis_1: 2.317  time: 2.0830  data_time: 0.0644  lr: 0.0019676  max_mem: 15138M
[09/18 19:34:36 d2.utils.events]:  eta: 11:37:33  iter: 4939  total_loss: 5.186  loss_cls: 0.04559  loss_box_reg: 0.2222  loss_dis_0: 2.56  loss_dis_1: 2.383  time: 2.0831  data_time: 0.0636  lr: 0.0019756  max_mem: 15138M
[09/18 19:35:17 d2.utils.events]:  eta: 11:36:43  iter: 4959  total_loss: 5.251  loss_cls: 0.0518  loss_box_reg: 0.2203  loss_dis_0: 2.23  loss_dis_1: 2.762  time: 2.0831  data_time: 0.0622  lr: 0.0019836  max_mem: 15138M
[09/18 19:35:59 d2.utils.events]:  eta: 11:36:00  iter: 4979  total_loss: 5.245  loss_cls: 0.04759  loss_box_reg: 0.2191  loss_dis_0: 2.192  loss_dis_1: 2.783  time: 2.0830  data_time: 0.0636  lr: 0.0019916  max_mem: 15138M
[09/18 19:36:41 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0004999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/18 19:36:43 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/18 19:36:43 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/18 19:36:43 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/18 19:36:43 d2.evaluation.evaluator]: Start inference on 188 batches
[09/18 19:36:58 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0009 s / iter. Inference: 0.4683 s / iter. Eval: 0.0010 s / iter. Total: 0.4703 s / iter. ETA=0:01:23
[09/18 19:37:04 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0012 s / iter. Inference: 0.4693 s / iter. Eval: 0.0010 s / iter. Total: 0.4716 s / iter. ETA=0:01:18
[09/18 19:37:09 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0013 s / iter. Inference: 0.4712 s / iter. Eval: 0.0011 s / iter. Total: 0.4737 s / iter. ETA=0:01:13
[09/18 19:37:14 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0019 s / iter. Inference: 0.4716 s / iter. Eval: 0.0011 s / iter. Total: 0.4747 s / iter. ETA=0:01:08
[09/18 19:37:19 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0019 s / iter. Inference: 0.4704 s / iter. Eval: 0.0011 s / iter. Total: 0.4735 s / iter. ETA=0:01:02
[09/18 19:37:25 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0018 s / iter. Inference: 0.4713 s / iter. Eval: 0.0011 s / iter. Total: 0.4743 s / iter. ETA=0:00:57
[09/18 19:37:30 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0019 s / iter. Inference: 0.4712 s / iter. Eval: 0.0011 s / iter. Total: 0.4744 s / iter. ETA=0:00:52
[09/18 19:37:35 d2.evaluation.evaluator]: Inference done 89/188. Dataloading: 0.0020 s / iter. Inference: 0.4681 s / iter. Eval: 0.0011 s / iter. Total: 0.4713 s / iter. ETA=0:00:46
[09/18 19:37:41 d2.evaluation.evaluator]: Inference done 101/188. Dataloading: 0.0021 s / iter. Inference: 0.4647 s / iter. Eval: 0.0011 s / iter. Total: 0.4680 s / iter. ETA=0:00:40
[09/18 19:37:46 d2.evaluation.evaluator]: Inference done 112/188. Dataloading: 0.0020 s / iter. Inference: 0.4667 s / iter. Eval: 0.0011 s / iter. Total: 0.4699 s / iter. ETA=0:00:35
[09/18 19:37:51 d2.evaluation.evaluator]: Inference done 123/188. Dataloading: 0.0020 s / iter. Inference: 0.4680 s / iter. Eval: 0.0012 s / iter. Total: 0.4712 s / iter. ETA=0:00:30
[09/18 19:37:57 d2.evaluation.evaluator]: Inference done 135/188. Dataloading: 0.0020 s / iter. Inference: 0.4661 s / iter. Eval: 0.0012 s / iter. Total: 0.4694 s / iter. ETA=0:00:24
[09/18 19:38:02 d2.evaluation.evaluator]: Inference done 147/188. Dataloading: 0.0020 s / iter. Inference: 0.4636 s / iter. Eval: 0.0012 s / iter. Total: 0.4669 s / iter. ETA=0:00:19
[09/18 19:38:07 d2.evaluation.evaluator]: Inference done 158/188. Dataloading: 0.0021 s / iter. Inference: 0.4651 s / iter. Eval: 0.0012 s / iter. Total: 0.4684 s / iter. ETA=0:00:14
[09/18 19:38:13 d2.evaluation.evaluator]: Inference done 170/188. Dataloading: 0.0021 s / iter. Inference: 0.4641 s / iter. Eval: 0.0012 s / iter. Total: 0.4674 s / iter. ETA=0:00:08
[09/18 19:38:18 d2.evaluation.evaluator]: Inference done 181/188. Dataloading: 0.0020 s / iter. Inference: 0.4637 s / iter. Eval: 0.0012 s / iter. Total: 0.4670 s / iter. ETA=0:00:03
[09/18 19:38:41 d2.evaluation.evaluator]: Total inference time: 0:01:45.303374 (0.575428 s / iter per device, on 8 devices)
[09/18 19:38:41 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.462687 s / iter per device, on 8 devices)
[09/18 19:38:41 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[56.45653850627562, 61.67397060050725, 70.83563001689733, 39.51124879737331, 61.96746762721974, 54.34113345791523, 43.10627810546288, 57.40151909337297]
[09/18 19:39:37 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/18 19:39:37 d2.evaluation.testing]: copypaste: Task: bbox
[09/18 19:39:37 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/18 19:39:37 d2.evaluation.testing]: copypaste: 31.7257,55.6617,31.4284
[09/18 19:39:37 d2.utils.events]:  eta: 11:35:17  iter: 4999  total_loss: 5.298  loss_cls: 0.0473  loss_box_reg: 0.2294  loss_dis_0: 2.294  loss_dis_1: 2.731  time: 2.0830  data_time: 0.0705  lr: 0.0019996  max_mem: 15138M
[09/18 19:40:18 d2.utils.events]:  eta: 11:34:34  iter: 5019  total_loss: 5.257  loss_cls: 0.04364  loss_box_reg: 0.2187  loss_dis_0: 2.507  loss_dis_1: 2.484  time: 2.0830  data_time: 0.0633  lr: 0.002  max_mem: 15138M
[09/18 19:41:00 d2.utils.events]:  eta: 11:33:53  iter: 5039  total_loss: 5.266  loss_cls: 0.04405  loss_box_reg: 0.2273  loss_dis_0: 2.444  loss_dis_1: 2.55  time: 2.0829  data_time: 0.0673  lr: 0.002  max_mem: 15138M
[09/18 19:41:41 d2.utils.events]:  eta: 11:33:10  iter: 5059  total_loss: 5.285  loss_cls: 0.04511  loss_box_reg: 0.2322  loss_dis_0: 2.459  loss_dis_1: 2.569  time: 2.0829  data_time: 0.0640  lr: 0.002  max_mem: 15138M
[09/18 19:42:22 d2.utils.events]:  eta: 11:32:28  iter: 5079  total_loss: 5.272  loss_cls: 0.04939  loss_box_reg: 0.2451  loss_dis_0: 2.481  loss_dis_1: 2.491  time: 2.0828  data_time: 0.0624  lr: 0.002  max_mem: 15138M
[09/18 19:43:04 d2.utils.events]:  eta: 11:31:57  iter: 5099  total_loss: 5.291  loss_cls: 0.04568  loss_box_reg: 0.2369  loss_dis_0: 2.499  loss_dis_1: 2.51  time: 2.0828  data_time: 0.0580  lr: 0.002  max_mem: 15138M
[09/18 19:43:46 d2.utils.events]:  eta: 11:31:17  iter: 5119  total_loss: 5.269  loss_cls: 0.04415  loss_box_reg: 0.2333  loss_dis_0: 2.506  loss_dis_1: 2.504  time: 2.0828  data_time: 0.0656  lr: 0.002  max_mem: 15138M
[09/18 19:44:28 d2.utils.events]:  eta: 11:30:37  iter: 5139  total_loss: 5.261  loss_cls: 0.04561  loss_box_reg: 0.2246  loss_dis_0: 2.5  loss_dis_1: 2.488  time: 2.0828  data_time: 0.0736  lr: 0.002  max_mem: 15138M
[09/18 19:45:09 d2.utils.events]:  eta: 11:29:56  iter: 5159  total_loss: 5.305  loss_cls: 0.04756  loss_box_reg: 0.2343  loss_dis_0: 2.397  loss_dis_1: 2.625  time: 2.0828  data_time: 0.0705  lr: 0.002  max_mem: 15138M
[09/18 19:45:51 d2.utils.events]:  eta: 11:29:12  iter: 5179  total_loss: 5.277  loss_cls: 0.04302  loss_box_reg: 0.2288  loss_dis_0: 2.425  loss_dis_1: 2.596  time: 2.0828  data_time: 0.0642  lr: 0.002  max_mem: 15138M
[09/18 19:46:32 d2.utils.events]:  eta: 11:28:29  iter: 5199  total_loss: 5.29  loss_cls: 0.04571  loss_box_reg: 0.2331  loss_dis_0: 2.478  loss_dis_1: 2.525  time: 2.0827  data_time: 0.0666  lr: 0.002  max_mem: 15138M
[09/18 19:47:14 d2.utils.events]:  eta: 11:27:48  iter: 5219  total_loss: 5.284  loss_cls: 0.04401  loss_box_reg: 0.2329  loss_dis_0: 2.529  loss_dis_1: 2.47  time: 2.0827  data_time: 0.0581  lr: 0.002  max_mem: 15138M
[09/18 19:47:56 d2.utils.events]:  eta: 11:27:06  iter: 5239  total_loss: 5.273  loss_cls: 0.04358  loss_box_reg: 0.2264  loss_dis_0: 2.534  loss_dis_1: 2.463  time: 2.0827  data_time: 0.0752  lr: 0.002  max_mem: 15138M
[09/18 19:48:37 d2.utils.events]:  eta: 11:26:24  iter: 5259  total_loss: 5.269  loss_cls: 0.04299  loss_box_reg: 0.2304  loss_dis_0: 2.511  loss_dis_1: 2.482  time: 2.0828  data_time: 0.0683  lr: 0.002  max_mem: 15138M
[09/18 19:49:19 d2.utils.events]:  eta: 11:25:36  iter: 5279  total_loss: 5.286  loss_cls: 0.04536  loss_box_reg: 0.224  loss_dis_0: 2.496  loss_dis_1: 2.523  time: 2.0827  data_time: 0.0616  lr: 0.002  max_mem: 15138M
[09/18 19:50:01 d2.utils.events]:  eta: 11:24:44  iter: 5299  total_loss: 5.284  loss_cls: 0.047  loss_box_reg: 0.2205  loss_dis_0: 2.528  loss_dis_1: 2.478  time: 2.0827  data_time: 0.0659  lr: 0.002  max_mem: 15138M
[09/18 19:50:42 d2.utils.events]:  eta: 11:24:01  iter: 5319  total_loss: 5.278  loss_cls: 0.04232  loss_box_reg: 0.2237  loss_dis_0: 2.453  loss_dis_1: 2.555  time: 2.0827  data_time: 0.0641  lr: 0.002  max_mem: 15138M
[09/18 19:51:24 d2.utils.events]:  eta: 11:23:15  iter: 5339  total_loss: 5.279  loss_cls: 0.04666  loss_box_reg: 0.2289  loss_dis_0: 2.488  loss_dis_1: 2.502  time: 2.0827  data_time: 0.0602  lr: 0.002  max_mem: 15138M
[09/18 19:52:05 d2.utils.events]:  eta: 11:22:34  iter: 5359  total_loss: 5.255  loss_cls: 0.04269  loss_box_reg: 0.2161  loss_dis_0: 2.513  loss_dis_1: 2.48  time: 2.0827  data_time: 0.0639  lr: 0.002  max_mem: 15138M
[09/18 19:52:47 d2.utils.events]:  eta: 11:21:42  iter: 5379  total_loss: 5.282  loss_cls: 0.04684  loss_box_reg: 0.2374  loss_dis_0: 2.497  loss_dis_1: 2.5  time: 2.0826  data_time: 0.0692  lr: 0.002  max_mem: 15138M
[09/18 19:53:29 d2.utils.events]:  eta: 11:21:03  iter: 5399  total_loss: 5.288  loss_cls: 0.048  loss_box_reg: 0.2307  loss_dis_0: 2.52  loss_dis_1: 2.466  time: 2.0826  data_time: 0.0591  lr: 0.002  max_mem: 15138M
[09/18 19:54:10 d2.utils.events]:  eta: 11:20:10  iter: 5419  total_loss: 5.285  loss_cls: 0.04701  loss_box_reg: 0.2281  loss_dis_0: 2.451  loss_dis_1: 2.567  time: 2.0826  data_time: 0.0700  lr: 0.002  max_mem: 15138M
[09/18 19:54:52 d2.utils.events]:  eta: 11:19:28  iter: 5439  total_loss: 5.251  loss_cls: 0.04051  loss_box_reg: 0.2046  loss_dis_0: 2.497  loss_dis_1: 2.49  time: 2.0826  data_time: 0.0765  lr: 0.002  max_mem: 15138M
[09/18 19:55:33 d2.utils.events]:  eta: 11:18:45  iter: 5459  total_loss: 5.314  loss_cls: 0.04584  loss_box_reg: 0.2278  loss_dis_0: 2.441  loss_dis_1: 2.587  time: 2.0826  data_time: 0.0601  lr: 0.002  max_mem: 15138M
[09/18 19:56:15 d2.utils.events]:  eta: 11:17:55  iter: 5479  total_loss: 5.261  loss_cls: 0.04195  loss_box_reg: 0.2169  loss_dis_0: 2.457  loss_dis_1: 2.54  time: 2.0826  data_time: 0.0629  lr: 0.002  max_mem: 15138M
[09/18 19:56:57 d2.utils.events]:  eta: 11:17:13  iter: 5499  total_loss: 5.273  loss_cls: 0.04464  loss_box_reg: 0.218  loss_dis_0: 2.607  loss_dis_1: 2.402  time: 2.0826  data_time: 0.0663  lr: 0.002  max_mem: 15138M
[09/18 19:57:39 d2.utils.events]:  eta: 11:16:29  iter: 5519  total_loss: 5.277  loss_cls: 0.04656  loss_box_reg: 0.2425  loss_dis_0: 2.504  loss_dis_1: 2.476  time: 2.0826  data_time: 0.0596  lr: 0.002  max_mem: 15138M
[09/18 19:58:20 d2.utils.events]:  eta: 11:15:50  iter: 5539  total_loss: 5.301  loss_cls: 0.05184  loss_box_reg: 0.2343  loss_dis_0: 2.445  loss_dis_1: 2.57  time: 2.0826  data_time: 0.0518  lr: 0.002  max_mem: 15138M
[09/18 19:59:02 d2.utils.events]:  eta: 11:15:09  iter: 5559  total_loss: 5.3  loss_cls: 0.04832  loss_box_reg: 0.2388  loss_dis_0: 2.498  loss_dis_1: 2.53  time: 2.0826  data_time: 0.0589  lr: 0.002  max_mem: 15138M
[09/18 19:59:44 d2.utils.events]:  eta: 11:14:24  iter: 5579  total_loss: 5.25  loss_cls: 0.04277  loss_box_reg: 0.2277  loss_dis_0: 2.556  loss_dis_1: 2.421  time: 2.0826  data_time: 0.0560  lr: 0.002  max_mem: 15138M
[09/18 20:00:25 d2.utils.events]:  eta: 11:13:37  iter: 5599  total_loss: 5.284  loss_cls: 0.04608  loss_box_reg: 0.2309  loss_dis_0: 2.469  loss_dis_1: 2.551  time: 2.0826  data_time: 0.0701  lr: 0.002  max_mem: 15138M
[09/18 20:01:07 d2.utils.events]:  eta: 11:12:57  iter: 5619  total_loss: 5.278  loss_cls: 0.0467  loss_box_reg: 0.2374  loss_dis_0: 2.487  loss_dis_1: 2.505  time: 2.0826  data_time: 0.0632  lr: 0.002  max_mem: 15138M
[09/18 20:01:49 d2.utils.events]:  eta: 11:12:09  iter: 5639  total_loss: 5.253  loss_cls: 0.04713  loss_box_reg: 0.2132  loss_dis_0: 2.556  loss_dis_1: 2.421  time: 2.0826  data_time: 0.0566  lr: 0.002  max_mem: 15138M
[09/18 20:02:30 d2.utils.events]:  eta: 11:11:19  iter: 5659  total_loss: 5.265  loss_cls: 0.04694  loss_box_reg: 0.2405  loss_dis_0: 2.548  loss_dis_1: 2.446  time: 2.0826  data_time: 0.0654  lr: 0.002  max_mem: 15138M
[09/18 20:03:12 d2.utils.events]:  eta: 11:10:36  iter: 5679  total_loss: 5.261  loss_cls: 0.04862  loss_box_reg: 0.226  loss_dis_0: 2.458  loss_dis_1: 2.531  time: 2.0825  data_time: 0.0680  lr: 0.002  max_mem: 15138M
[09/18 20:03:53 d2.utils.events]:  eta: 11:09:47  iter: 5699  total_loss: 5.279  loss_cls: 0.04094  loss_box_reg: 0.2215  loss_dis_0: 2.441  loss_dis_1: 2.58  time: 2.0825  data_time: 0.0559  lr: 0.002  max_mem: 15138M
[09/18 20:04:35 d2.utils.events]:  eta: 11:09:02  iter: 5719  total_loss: 5.263  loss_cls: 0.04784  loss_box_reg: 0.2382  loss_dis_0: 2.505  loss_dis_1: 2.492  time: 2.0825  data_time: 0.0677  lr: 0.002  max_mem: 15138M
[09/18 20:05:17 d2.utils.events]:  eta: 11:08:07  iter: 5739  total_loss: 5.237  loss_cls: 0.04337  loss_box_reg: 0.2105  loss_dis_0: 2.525  loss_dis_1: 2.446  time: 2.0825  data_time: 0.0562  lr: 0.002  max_mem: 15138M
[09/18 20:05:58 d2.utils.events]:  eta: 11:07:16  iter: 5759  total_loss: 5.275  loss_cls: 0.04612  loss_box_reg: 0.2288  loss_dis_0: 2.578  loss_dis_1: 2.389  time: 2.0825  data_time: 0.0657  lr: 0.002  max_mem: 15138M
[09/18 20:06:40 d2.utils.events]:  eta: 11:06:30  iter: 5779  total_loss: 5.24  loss_cls: 0.03823  loss_box_reg: 0.205  loss_dis_0: 2.858  loss_dis_1: 2.157  time: 2.0825  data_time: 0.0581  lr: 0.002  max_mem: 15138M
[09/18 20:07:22 d2.utils.events]:  eta: 11:05:46  iter: 5799  total_loss: 5.364  loss_cls: 0.04626  loss_box_reg: 0.2398  loss_dis_0: 2.708  loss_dis_1: 2.35  time: 2.0826  data_time: 0.0672  lr: 0.002  max_mem: 15138M
[09/18 20:08:04 d2.utils.events]:  eta: 11:05:04  iter: 5819  total_loss: 5.323  loss_cls: 0.04529  loss_box_reg: 0.237  loss_dis_0: 2.666  loss_dis_1: 2.394  time: 2.0826  data_time: 0.0649  lr: 0.002  max_mem: 15138M
[09/18 20:08:46 d2.utils.events]:  eta: 11:04:25  iter: 5839  total_loss: 5.29  loss_cls: 0.0501  loss_box_reg: 0.2572  loss_dis_0: 2.527  loss_dis_1: 2.502  time: 2.0826  data_time: 0.0674  lr: 0.002  max_mem: 15138M
[09/18 20:09:27 d2.utils.events]:  eta: 11:03:43  iter: 5859  total_loss: 5.177  loss_cls: 0.04368  loss_box_reg: 0.2249  loss_dis_0: 2.225  loss_dis_1: 2.675  time: 2.0826  data_time: 0.0610  lr: 0.002  max_mem: 15138M
[09/18 20:10:09 d2.utils.events]:  eta: 11:02:56  iter: 5879  total_loss: 5.204  loss_cls: 0.04273  loss_box_reg: 0.212  loss_dis_0: 2.202  loss_dis_1: 2.732  time: 2.0825  data_time: 0.0644  lr: 0.002  max_mem: 15138M
[09/18 20:10:50 d2.utils.events]:  eta: 11:02:13  iter: 5899  total_loss: 5.256  loss_cls: 0.04013  loss_box_reg: 0.2141  loss_dis_0: 2.262  loss_dis_1: 2.757  time: 2.0825  data_time: 0.0529  lr: 0.002  max_mem: 15138M
[09/18 20:11:32 d2.utils.events]:  eta: 11:01:19  iter: 5919  total_loss: 5.289  loss_cls: 0.0435  loss_box_reg: 0.2327  loss_dis_0: 2.329  loss_dis_1: 2.692  time: 2.0825  data_time: 0.0608  lr: 0.002  max_mem: 15138M
[09/18 20:12:13 d2.utils.events]:  eta: 11:00:31  iter: 5939  total_loss: 5.341  loss_cls: 0.0423  loss_box_reg: 0.2318  loss_dis_0: 2.414  loss_dis_1: 2.658  time: 2.0824  data_time: 0.0590  lr: 0.002  max_mem: 15138M
[09/18 20:12:55 d2.utils.events]:  eta: 10:59:50  iter: 5959  total_loss: 5.35  loss_cls: 0.04799  loss_box_reg: 0.236  loss_dis_0: 2.532  loss_dis_1: 2.536  time: 2.0824  data_time: 0.0662  lr: 0.002  max_mem: 15138M
[09/18 20:13:37 d2.utils.events]:  eta: 10:59:16  iter: 5979  total_loss: 5.335  loss_cls: 0.04651  loss_box_reg: 0.2263  loss_dis_0: 2.605  loss_dis_1: 2.452  time: 2.0824  data_time: 0.0521  lr: 0.002  max_mem: 15138M
[09/18 20:14:18 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0005999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/18 20:14:21 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/18 20:14:21 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/18 20:14:21 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/18 20:14:21 d2.evaluation.evaluator]: Start inference on 188 batches
[09/18 20:14:35 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0033 s / iter. Inference: 0.4714 s / iter. Eval: 0.0019 s / iter. Total: 0.4766 s / iter. ETA=0:01:24
[09/18 20:14:40 d2.evaluation.evaluator]: Inference done 21/188. Dataloading: 0.0030 s / iter. Inference: 0.4878 s / iter. Eval: 0.0015 s / iter. Total: 0.4924 s / iter. ETA=0:01:22
[09/18 20:14:46 d2.evaluation.evaluator]: Inference done 32/188. Dataloading: 0.0026 s / iter. Inference: 0.4824 s / iter. Eval: 0.0014 s / iter. Total: 0.4865 s / iter. ETA=0:01:15
[09/18 20:14:51 d2.evaluation.evaluator]: Inference done 43/188. Dataloading: 0.0023 s / iter. Inference: 0.4761 s / iter. Eval: 0.0013 s / iter. Total: 0.4798 s / iter. ETA=0:01:09
[09/18 20:14:56 d2.evaluation.evaluator]: Inference done 54/188. Dataloading: 0.0021 s / iter. Inference: 0.4728 s / iter. Eval: 0.0013 s / iter. Total: 0.4763 s / iter. ETA=0:01:03
[09/18 20:15:01 d2.evaluation.evaluator]: Inference done 65/188. Dataloading: 0.0020 s / iter. Inference: 0.4734 s / iter. Eval: 0.0013 s / iter. Total: 0.4768 s / iter. ETA=0:00:58
[09/18 20:15:06 d2.evaluation.evaluator]: Inference done 76/188. Dataloading: 0.0020 s / iter. Inference: 0.4733 s / iter. Eval: 0.0013 s / iter. Total: 0.4767 s / iter. ETA=0:00:53
[09/18 20:15:12 d2.evaluation.evaluator]: Inference done 87/188. Dataloading: 0.0023 s / iter. Inference: 0.4707 s / iter. Eval: 0.0013 s / iter. Total: 0.4743 s / iter. ETA=0:00:47
[09/18 20:15:17 d2.evaluation.evaluator]: Inference done 99/188. Dataloading: 0.0022 s / iter. Inference: 0.4658 s / iter. Eval: 0.0013 s / iter. Total: 0.4693 s / iter. ETA=0:00:41
[09/18 20:15:22 d2.evaluation.evaluator]: Inference done 110/188. Dataloading: 0.0023 s / iter. Inference: 0.4680 s / iter. Eval: 0.0012 s / iter. Total: 0.4716 s / iter. ETA=0:00:36
[09/18 20:15:27 d2.evaluation.evaluator]: Inference done 121/188. Dataloading: 0.0022 s / iter. Inference: 0.4681 s / iter. Eval: 0.0012 s / iter. Total: 0.4717 s / iter. ETA=0:00:31
[09/18 20:15:33 d2.evaluation.evaluator]: Inference done 133/188. Dataloading: 0.0022 s / iter. Inference: 0.4662 s / iter. Eval: 0.0013 s / iter. Total: 0.4698 s / iter. ETA=0:00:25
[09/18 20:15:38 d2.evaluation.evaluator]: Inference done 145/188. Dataloading: 0.0021 s / iter. Inference: 0.4635 s / iter. Eval: 0.0013 s / iter. Total: 0.4669 s / iter. ETA=0:00:20
[09/18 20:15:43 d2.evaluation.evaluator]: Inference done 156/188. Dataloading: 0.0021 s / iter. Inference: 0.4640 s / iter. Eval: 0.0013 s / iter. Total: 0.4674 s / iter. ETA=0:00:14
[09/18 20:15:49 d2.evaluation.evaluator]: Inference done 168/188. Dataloading: 0.0021 s / iter. Inference: 0.4625 s / iter. Eval: 0.0012 s / iter. Total: 0.4658 s / iter. ETA=0:00:09
[09/18 20:15:54 d2.evaluation.evaluator]: Inference done 179/188. Dataloading: 0.0020 s / iter. Inference: 0.4622 s / iter. Eval: 0.0012 s / iter. Total: 0.4655 s / iter. ETA=0:00:04
[09/18 20:16:18 d2.evaluation.evaluator]: Total inference time: 0:01:45.026757 (0.573917 s / iter per device, on 8 devices)
[09/18 20:16:18 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.461120 s / iter per device, on 8 devices)
[09/18 20:16:18 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[56.584480875717325, 60.99510950123987, 69.84097946930414, 40.26611818997342, 57.2844690538965, 33.11663144339164, 41.481448576601025, 55.63810388695594]
[09/18 20:17:14 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/18 20:17:14 d2.evaluation.testing]: copypaste: Task: bbox
[09/18 20:17:14 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/18 20:17:14 d2.evaluation.testing]: copypaste: 29.5150,51.9009,29.0689
[09/18 20:17:14 d2.utils.events]:  eta: 10:58:27  iter: 5999  total_loss: 5.291  loss_cls: 0.04425  loss_box_reg: 0.2305  loss_dis_0: 2.611  loss_dis_1: 2.405  time: 2.0824  data_time: 0.0656  lr: 0.002  max_mem: 15138M
[09/18 20:17:56 d2.utils.events]:  eta: 10:57:49  iter: 6019  total_loss: 5.249  loss_cls: 0.04285  loss_box_reg: 0.2299  loss_dis_0: 2.627  loss_dis_1: 2.364  time: 2.0824  data_time: 0.0555  lr: 0.002  max_mem: 15138M
[09/18 20:18:38 d2.utils.events]:  eta: 10:57:04  iter: 6039  total_loss: 5.24  loss_cls: 0.04479  loss_box_reg: 0.2287  loss_dis_0: 2.633  loss_dis_1: 2.341  time: 2.0823  data_time: 0.0604  lr: 0.002  max_mem: 15138M
[09/18 20:19:19 d2.utils.events]:  eta: 10:56:26  iter: 6059  total_loss: 5.238  loss_cls: 0.04712  loss_box_reg: 0.2314  loss_dis_0: 2.482  loss_dis_1: 2.453  time: 2.0823  data_time: 0.0645  lr: 0.002  max_mem: 15138M
[09/18 20:20:01 d2.utils.events]:  eta: 10:55:40  iter: 6079  total_loss: 5.218  loss_cls: 0.04293  loss_box_reg: 0.2362  loss_dis_0: 2.506  loss_dis_1: 2.431  time: 2.0823  data_time: 0.0646  lr: 0.002  max_mem: 15138M
[09/18 20:20:42 d2.utils.events]:  eta: 10:54:59  iter: 6099  total_loss: 5.261  loss_cls: 0.04477  loss_box_reg: 0.2186  loss_dis_0: 2.512  loss_dis_1: 2.501  time: 2.0823  data_time: 0.0676  lr: 0.002  max_mem: 15138M
[09/18 20:21:24 d2.utils.events]:  eta: 10:54:15  iter: 6119  total_loss: 5.288  loss_cls: 0.04149  loss_box_reg: 0.2022  loss_dis_0: 2.421  loss_dis_1: 2.62  time: 2.0823  data_time: 0.0582  lr: 0.002  max_mem: 15138M
[09/18 20:22:06 d2.utils.events]:  eta: 10:53:22  iter: 6139  total_loss: 5.285  loss_cls: 0.04957  loss_box_reg: 0.2343  loss_dis_0: 2.455  loss_dis_1: 2.528  time: 2.0822  data_time: 0.0628  lr: 0.002  max_mem: 15138M
[09/18 20:22:47 d2.utils.events]:  eta: 10:52:42  iter: 6159  total_loss: 5.299  loss_cls: 0.0447  loss_box_reg: 0.2228  loss_dis_0: 2.48  loss_dis_1: 2.53  time: 2.0822  data_time: 0.0631  lr: 0.002  max_mem: 15138M
[09/18 20:23:29 d2.utils.events]:  eta: 10:52:03  iter: 6179  total_loss: 5.287  loss_cls: 0.04232  loss_box_reg: 0.222  loss_dis_0: 2.445  loss_dis_1: 2.585  time: 2.0822  data_time: 0.0625  lr: 0.002  max_mem: 15138M
[09/18 20:24:11 d2.utils.events]:  eta: 10:51:27  iter: 6199  total_loss: 5.289  loss_cls: 0.04327  loss_box_reg: 0.2227  loss_dis_0: 2.446  loss_dis_1: 2.588  time: 2.0822  data_time: 0.0660  lr: 0.002  max_mem: 15138M
[09/18 20:24:52 d2.utils.events]:  eta: 10:50:46  iter: 6219  total_loss: 5.254  loss_cls: 0.04165  loss_box_reg: 0.218  loss_dis_0: 2.571  loss_dis_1: 2.405  time: 2.0823  data_time: 0.0578  lr: 0.002  max_mem: 15138M
[09/18 20:25:34 d2.utils.events]:  eta: 10:50:08  iter: 6239  total_loss: 5.276  loss_cls: 0.04304  loss_box_reg: 0.2303  loss_dis_0: 2.728  loss_dis_1: 2.281  time: 2.0823  data_time: 0.0703  lr: 0.002  max_mem: 15138M
[09/18 20:26:16 d2.utils.events]:  eta: 10:49:24  iter: 6259  total_loss: 5.362  loss_cls: 0.04855  loss_box_reg: 0.2255  loss_dis_0: 2.743  loss_dis_1: 2.366  time: 2.0822  data_time: 0.0662  lr: 0.002  max_mem: 15138M
[09/18 20:26:57 d2.utils.events]:  eta: 10:48:46  iter: 6279  total_loss: 5.396  loss_cls: 0.04688  loss_box_reg: 0.2212  loss_dis_0: 2.79  loss_dis_1: 2.353  time: 2.0822  data_time: 0.0663  lr: 0.002  max_mem: 15138M
[09/18 20:27:39 d2.utils.events]:  eta: 10:48:05  iter: 6299  total_loss: 5.334  loss_cls: 0.04906  loss_box_reg: 0.2353  loss_dis_0: 2.831  loss_dis_1: 2.229  time: 2.0822  data_time: 0.0596  lr: 0.002  max_mem: 15138M
[09/18 20:28:21 d2.utils.events]:  eta: 10:47:23  iter: 6319  total_loss: 5.19  loss_cls: 0.04417  loss_box_reg: 0.2235  loss_dis_0: 2.554  loss_dis_1: 2.388  time: 2.0822  data_time: 0.0697  lr: 0.002  max_mem: 15138M
[09/18 20:29:02 d2.utils.events]:  eta: 10:46:41  iter: 6339  total_loss: 5.198  loss_cls: 0.043  loss_box_reg: 0.2227  loss_dis_0: 2.346  loss_dis_1: 2.563  time: 2.0822  data_time: 0.0592  lr: 0.002  max_mem: 15138M
[09/18 20:29:44 d2.utils.events]:  eta: 10:46:00  iter: 6359  total_loss: 5.221  loss_cls: 0.03944  loss_box_reg: 0.2003  loss_dis_0: 2.235  loss_dis_1: 2.744  time: 2.0822  data_time: 0.0704  lr: 0.002  max_mem: 15138M
[09/18 20:30:26 d2.utils.events]:  eta: 10:45:19  iter: 6379  total_loss: 5.281  loss_cls: 0.04622  loss_box_reg: 0.2249  loss_dis_0: 2.303  loss_dis_1: 2.699  time: 2.0823  data_time: 0.0591  lr: 0.002  max_mem: 15138M
[09/18 20:31:08 d2.utils.events]:  eta: 10:44:46  iter: 6399  total_loss: 5.348  loss_cls: 0.04649  loss_box_reg: 0.2214  loss_dis_0: 2.413  loss_dis_1: 2.646  time: 2.0823  data_time: 0.0568  lr: 0.002  max_mem: 15138M
[09/18 20:31:50 d2.utils.events]:  eta: 10:44:18  iter: 6419  total_loss: 5.361  loss_cls: 0.04437  loss_box_reg: 0.2382  loss_dis_0: 2.462  loss_dis_1: 2.628  time: 2.0823  data_time: 0.0646  lr: 0.002  max_mem: 15138M
[09/18 20:32:31 d2.utils.events]:  eta: 10:43:41  iter: 6439  total_loss: 5.344  loss_cls: 0.04636  loss_box_reg: 0.2397  loss_dis_0: 2.529  loss_dis_1: 2.537  time: 2.0823  data_time: 0.0615  lr: 0.002  max_mem: 15138M
[09/18 20:33:13 d2.utils.events]:  eta: 10:42:58  iter: 6459  total_loss: 5.267  loss_cls: 0.04159  loss_box_reg: 0.2282  loss_dis_0: 2.588  loss_dis_1: 2.394  time: 2.0824  data_time: 0.0703  lr: 0.002  max_mem: 15138M
[09/18 20:33:55 d2.utils.events]:  eta: 10:42:19  iter: 6479  total_loss: 5.268  loss_cls: 0.04765  loss_box_reg: 0.2367  loss_dis_0: 2.71  loss_dis_1: 2.281  time: 2.0823  data_time: 0.0631  lr: 0.002  max_mem: 15138M
[09/18 20:34:37 d2.utils.events]:  eta: 10:41:45  iter: 6499  total_loss: 5.31  loss_cls: 0.04576  loss_box_reg: 0.2293  loss_dis_0: 2.684  loss_dis_1: 2.332  time: 2.0823  data_time: 0.0611  lr: 0.002  max_mem: 15138M
[09/18 20:35:19 d2.utils.events]:  eta: 10:41:08  iter: 6519  total_loss: 5.262  loss_cls: 0.05033  loss_box_reg: 0.2444  loss_dis_0: 2.614  loss_dis_1: 2.363  time: 2.0824  data_time: 0.0649  lr: 0.002  max_mem: 15138M
[09/18 20:36:00 d2.utils.events]:  eta: 10:40:23  iter: 6539  total_loss: 5.217  loss_cls: 0.04382  loss_box_reg: 0.2089  loss_dis_0: 2.569  loss_dis_1: 2.371  time: 2.0824  data_time: 0.0562  lr: 0.002  max_mem: 15138M
[09/18 20:36:42 d2.utils.events]:  eta: 10:39:46  iter: 6559  total_loss: 5.293  loss_cls: 0.04056  loss_box_reg: 0.2082  loss_dis_0: 2.527  loss_dis_1: 2.534  time: 2.0824  data_time: 0.0685  lr: 0.002  max_mem: 15138M
[09/18 20:37:24 d2.utils.events]:  eta: 10:39:08  iter: 6579  total_loss: 5.282  loss_cls: 0.0424  loss_box_reg: 0.2177  loss_dis_0: 2.345  loss_dis_1: 2.69  time: 2.0825  data_time: 0.0583  lr: 0.002  max_mem: 15138M
[09/18 20:38:06 d2.utils.events]:  eta: 10:38:32  iter: 6599  total_loss: 5.251  loss_cls: 0.04022  loss_box_reg: 0.2265  loss_dis_0: 2.595  loss_dis_1: 2.384  time: 2.0825  data_time: 0.0577  lr: 0.002  max_mem: 15138M
[09/18 20:38:48 d2.utils.events]:  eta: 10:38:05  iter: 6619  total_loss: 5.287  loss_cls: 0.04565  loss_box_reg: 0.2295  loss_dis_0: 2.441  loss_dis_1: 2.552  time: 2.0825  data_time: 0.0658  lr: 0.002  max_mem: 15138M
[09/18 20:39:30 d2.utils.events]:  eta: 10:37:25  iter: 6639  total_loss: 5.275  loss_cls: 0.04458  loss_box_reg: 0.2193  loss_dis_0: 2.552  loss_dis_1: 2.439  time: 2.0825  data_time: 0.0568  lr: 0.002  max_mem: 15138M
[09/18 20:40:11 d2.utils.events]:  eta: 10:36:47  iter: 6659  total_loss: 5.256  loss_cls: 0.04813  loss_box_reg: 0.2372  loss_dis_0: 2.53  loss_dis_1: 2.488  time: 2.0825  data_time: 0.0631  lr: 0.002  max_mem: 15138M
[09/18 20:40:53 d2.utils.events]:  eta: 10:36:06  iter: 6679  total_loss: 5.27  loss_cls: 0.04485  loss_box_reg: 0.2299  loss_dis_0: 2.51  loss_dis_1: 2.476  time: 2.0825  data_time: 0.0597  lr: 0.002  max_mem: 15138M
[09/18 20:41:35 d2.utils.events]:  eta: 10:35:26  iter: 6699  total_loss: 5.252  loss_cls: 0.04323  loss_box_reg: 0.2142  loss_dis_0: 2.488  loss_dis_1: 2.494  time: 2.0825  data_time: 0.0597  lr: 0.002  max_mem: 15138M
[09/18 20:42:16 d2.utils.events]:  eta: 10:34:44  iter: 6719  total_loss: 5.255  loss_cls: 0.04345  loss_box_reg: 0.2367  loss_dis_0: 2.566  loss_dis_1: 2.407  time: 2.0825  data_time: 0.0620  lr: 0.002  max_mem: 15138M
[09/18 20:42:58 d2.utils.events]:  eta: 10:34:01  iter: 6739  total_loss: 5.234  loss_cls: 0.04323  loss_box_reg: 0.2202  loss_dis_0: 2.468  loss_dis_1: 2.495  time: 2.0825  data_time: 0.0598  lr: 0.002  max_mem: 15138M
[09/18 20:43:40 d2.utils.events]:  eta: 10:33:20  iter: 6759  total_loss: 5.211  loss_cls: 0.04267  loss_box_reg: 0.2176  loss_dis_0: 2.505  loss_dis_1: 2.434  time: 2.0825  data_time: 0.0553  lr: 0.002  max_mem: 15138M
[09/18 20:44:22 d2.utils.events]:  eta: 10:32:39  iter: 6779  total_loss: 5.225  loss_cls: 0.04559  loss_box_reg: 0.2367  loss_dis_0: 2.52  loss_dis_1: 2.442  time: 2.0825  data_time: 0.0635  lr: 0.002  max_mem: 15138M
[09/18 20:45:03 d2.utils.events]:  eta: 10:31:55  iter: 6799  total_loss: 5.234  loss_cls: 0.04062  loss_box_reg: 0.2199  loss_dis_0: 2.371  loss_dis_1: 2.612  time: 2.0825  data_time: 0.0614  lr: 0.002  max_mem: 15138M
[09/18 20:45:45 d2.utils.events]:  eta: 10:31:15  iter: 6819  total_loss: 5.242  loss_cls: 0.04238  loss_box_reg: 0.2283  loss_dis_0: 2.382  loss_dis_1: 2.587  time: 2.0826  data_time: 0.0696  lr: 0.002  max_mem: 15138M
[09/18 20:46:27 d2.utils.events]:  eta: 10:30:34  iter: 6839  total_loss: 5.23  loss_cls: 0.04625  loss_box_reg: 0.2266  loss_dis_0: 2.554  loss_dis_1: 2.373  time: 2.0826  data_time: 0.0617  lr: 0.002  max_mem: 15138M
[09/18 20:47:09 d2.utils.events]:  eta: 10:29:55  iter: 6859  total_loss: 5.262  loss_cls: 0.0471  loss_box_reg: 0.2363  loss_dis_0: 2.433  loss_dis_1: 2.568  time: 2.0826  data_time: 0.0693  lr: 0.002  max_mem: 15138M
[09/18 20:47:51 d2.utils.events]:  eta: 10:29:20  iter: 6879  total_loss: 5.31  loss_cls: 0.04881  loss_box_reg: 0.2421  loss_dis_0: 2.584  loss_dis_1: 2.42  time: 2.0827  data_time: 0.0611  lr: 0.002  max_mem: 15138M
[09/18 20:48:33 d2.utils.events]:  eta: 10:28:42  iter: 6899  total_loss: 5.298  loss_cls: 0.05284  loss_box_reg: 0.2592  loss_dis_0: 2.632  loss_dis_1: 2.364  time: 2.0827  data_time: 0.0626  lr: 0.002  max_mem: 15138M
[09/18 20:49:15 d2.utils.events]:  eta: 10:28:12  iter: 6919  total_loss: 5.225  loss_cls: 0.04664  loss_box_reg: 0.2242  loss_dis_0: 2.431  loss_dis_1: 2.54  time: 2.0827  data_time: 0.0758  lr: 0.002  max_mem: 15138M
[09/18 20:49:56 d2.utils.events]:  eta: 10:27:32  iter: 6939  total_loss: 5.252  loss_cls: 0.04941  loss_box_reg: 0.2285  loss_dis_0: 2.27  loss_dis_1: 2.707  time: 2.0827  data_time: 0.0528  lr: 0.002  max_mem: 15138M
[09/18 20:50:38 d2.utils.events]:  eta: 10:26:56  iter: 6959  total_loss: 5.319  loss_cls: 0.05135  loss_box_reg: 0.249  loss_dis_0: 2.381  loss_dis_1: 2.654  time: 2.0827  data_time: 0.0648  lr: 0.002  max_mem: 15138M
[09/18 20:51:20 d2.utils.events]:  eta: 10:26:09  iter: 6979  total_loss: 5.324  loss_cls: 0.05187  loss_box_reg: 0.242  loss_dis_0: 2.479  loss_dis_1: 2.538  time: 2.0828  data_time: 0.0605  lr: 0.002  max_mem: 15138M
[09/18 20:52:02 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0006999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/18 20:52:05 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/18 20:52:05 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/18 20:52:05 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/18 20:52:05 d2.evaluation.evaluator]: Start inference on 188 batches
[09/18 20:52:20 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0011 s / iter. Inference: 0.4743 s / iter. Eval: 0.0011 s / iter. Total: 0.4766 s / iter. ETA=0:01:24
[09/18 20:52:25 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0013 s / iter. Inference: 0.4728 s / iter. Eval: 0.0012 s / iter. Total: 0.4754 s / iter. ETA=0:01:18
[09/18 20:52:30 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0020 s / iter. Inference: 0.4736 s / iter. Eval: 0.0011 s / iter. Total: 0.4768 s / iter. ETA=0:01:13
[09/18 20:52:35 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0019 s / iter. Inference: 0.4690 s / iter. Eval: 0.0012 s / iter. Total: 0.4721 s / iter. ETA=0:01:07
[09/18 20:52:40 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0018 s / iter. Inference: 0.4669 s / iter. Eval: 0.0012 s / iter. Total: 0.4700 s / iter. ETA=0:01:02
[09/18 20:52:46 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0018 s / iter. Inference: 0.4689 s / iter. Eval: 0.0013 s / iter. Total: 0.4721 s / iter. ETA=0:00:57
[09/18 20:52:51 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0018 s / iter. Inference: 0.4680 s / iter. Eval: 0.0013 s / iter. Total: 0.4712 s / iter. ETA=0:00:52
[09/18 20:52:56 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0019 s / iter. Inference: 0.4668 s / iter. Eval: 0.0013 s / iter. Total: 0.4701 s / iter. ETA=0:00:47
[09/18 20:53:01 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0021 s / iter. Inference: 0.4625 s / iter. Eval: 0.0013 s / iter. Total: 0.4659 s / iter. ETA=0:00:41
[09/18 20:53:06 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0020 s / iter. Inference: 0.4652 s / iter. Eval: 0.0013 s / iter. Total: 0.4685 s / iter. ETA=0:00:36
[09/18 20:53:12 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0019 s / iter. Inference: 0.4658 s / iter. Eval: 0.0012 s / iter. Total: 0.4691 s / iter. ETA=0:00:30
[09/18 20:53:17 d2.evaluation.evaluator]: Inference done 134/188. Dataloading: 0.0019 s / iter. Inference: 0.4636 s / iter. Eval: 0.0012 s / iter. Total: 0.4668 s / iter. ETA=0:00:25
[09/18 20:53:22 d2.evaluation.evaluator]: Inference done 146/188. Dataloading: 0.0019 s / iter. Inference: 0.4608 s / iter. Eval: 0.0012 s / iter. Total: 0.4639 s / iter. ETA=0:00:19
[09/18 20:53:27 d2.evaluation.evaluator]: Inference done 157/188. Dataloading: 0.0019 s / iter. Inference: 0.4614 s / iter. Eval: 0.0012 s / iter. Total: 0.4646 s / iter. ETA=0:00:14
[09/18 20:53:33 d2.evaluation.evaluator]: Inference done 169/188. Dataloading: 0.0019 s / iter. Inference: 0.4605 s / iter. Eval: 0.0012 s / iter. Total: 0.4637 s / iter. ETA=0:00:08
[09/18 20:53:38 d2.evaluation.evaluator]: Inference done 180/188. Dataloading: 0.0019 s / iter. Inference: 0.4604 s / iter. Eval: 0.0012 s / iter. Total: 0.4635 s / iter. ETA=0:00:03
[09/18 20:54:01 d2.evaluation.evaluator]: Total inference time: 0:01:44.702246 (0.572143 s / iter per device, on 8 devices)
[09/18 20:54:01 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.459536 s / iter per device, on 8 devices)
[09/18 20:54:03 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[55.88725631311685, 58.603505454568186, 69.32471049726506, 35.47411589550492, 53.11322782592248, 38.80239428637206, 41.29617765564434, 55.414886741795485]
[09/18 20:54:59 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/18 20:54:59 d2.evaluation.testing]: copypaste: Task: bbox
[09/18 20:54:59 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/18 20:54:59 d2.evaluation.testing]: copypaste: 28.9442,50.9895,28.5820
[09/18 20:54:59 d2.utils.events]:  eta: 10:25:36  iter: 6999  total_loss: 5.317  loss_cls: 0.04781  loss_box_reg: 0.2282  loss_dis_0: 2.518  loss_dis_1: 2.506  time: 2.0828  data_time: 0.0598  lr: 0.002  max_mem: 15138M
[09/18 20:55:40 d2.utils.events]:  eta: 10:24:54  iter: 7019  total_loss: 5.194  loss_cls: 0.05075  loss_box_reg: 0.2388  loss_dis_0: 2.645  loss_dis_1: 2.254  time: 2.0827  data_time: 0.0588  lr: 0.002  max_mem: 15138M
[09/18 20:56:21 d2.utils.events]:  eta: 10:24:09  iter: 7039  total_loss: 5.23  loss_cls: 0.05053  loss_box_reg: 0.2222  loss_dis_0: 2.7  loss_dis_1: 2.249  time: 2.0827  data_time: 0.0632  lr: 0.002  max_mem: 15138M
[09/18 20:57:03 d2.utils.events]:  eta: 10:23:20  iter: 7059  total_loss: 5.304  loss_cls: 0.0559  loss_box_reg: 0.2484  loss_dis_0: 2.481  loss_dis_1: 2.51  time: 2.0827  data_time: 0.0698  lr: 0.002  max_mem: 15138M
[09/18 20:57:45 d2.utils.events]:  eta: 10:22:43  iter: 7079  total_loss: 5.291  loss_cls: 0.05214  loss_box_reg: 0.2343  loss_dis_0: 2.494  loss_dis_1: 2.526  time: 2.0826  data_time: 0.0678  lr: 0.002  max_mem: 15138M
[09/18 20:58:26 d2.utils.events]:  eta: 10:21:56  iter: 7099  total_loss: 5.319  loss_cls: 0.05059  loss_box_reg: 0.2519  loss_dis_0: 2.542  loss_dis_1: 2.483  time: 2.0826  data_time: 0.0636  lr: 0.002  max_mem: 15138M
[09/18 20:59:08 d2.utils.events]:  eta: 10:21:20  iter: 7119  total_loss: 5.3  loss_cls: 0.06041  loss_box_reg: 0.2522  loss_dis_0: 2.614  loss_dis_1: 2.365  time: 2.0826  data_time: 0.0607  lr: 0.002  max_mem: 15138M
[09/18 20:59:49 d2.utils.events]:  eta: 10:20:43  iter: 7139  total_loss: 5.269  loss_cls: 0.0586  loss_box_reg: 0.2535  loss_dis_0: 2.627  loss_dis_1: 2.321  time: 2.0826  data_time: 0.0633  lr: 0.002  max_mem: 15138M
[09/18 21:00:31 d2.utils.events]:  eta: 10:20:02  iter: 7159  total_loss: 5.211  loss_cls: 0.06574  loss_box_reg: 0.2739  loss_dis_0: 2.464  loss_dis_1: 2.41  time: 2.0826  data_time: 0.0732  lr: 0.002  max_mem: 15138M
[09/18 21:01:13 d2.utils.events]:  eta: 10:19:17  iter: 7179  total_loss: 5.152  loss_cls: 0.05148  loss_box_reg: 0.2436  loss_dis_0: 2.447  loss_dis_1: 2.346  time: 2.0826  data_time: 0.0662  lr: 0.002  max_mem: 15138M
[09/18 21:01:54 d2.utils.events]:  eta: 10:18:36  iter: 7199  total_loss: 5.317  loss_cls: 0.05243  loss_box_reg: 0.2385  loss_dis_0: 2.468  loss_dis_1: 2.583  time: 2.0826  data_time: 0.0752  lr: 0.002  max_mem: 15138M
[09/18 21:02:36 d2.utils.events]:  eta: 10:17:53  iter: 7219  total_loss: 5.321  loss_cls: 0.0537  loss_box_reg: 0.2484  loss_dis_0: 3.003  loss_dis_1: 2.019  time: 2.0826  data_time: 0.0632  lr: 0.002  max_mem: 15138M
[09/18 21:03:18 d2.utils.events]:  eta: 10:17:04  iter: 7239  total_loss: 5.354  loss_cls: 0.05513  loss_box_reg: 0.2549  loss_dis_0: 2.939  loss_dis_1: 2.11  time: 2.0826  data_time: 0.0604  lr: 0.002  max_mem: 15138M
[09/18 21:03:59 d2.utils.events]:  eta: 10:16:23  iter: 7259  total_loss: 5.288  loss_cls: 0.0487  loss_box_reg: 0.2173  loss_dis_0: 2.712  loss_dis_1: 2.293  time: 2.0825  data_time: 0.0675  lr: 0.002  max_mem: 15138M
[09/18 21:04:41 d2.utils.events]:  eta: 10:15:38  iter: 7279  total_loss: 5.3  loss_cls: 0.04683  loss_box_reg: 0.229  loss_dis_0: 2.625  loss_dis_1: 2.404  time: 2.0825  data_time: 0.0697  lr: 0.002  max_mem: 15138M
[09/18 21:05:23 d2.utils.events]:  eta: 10:14:56  iter: 7299  total_loss: 5.319  loss_cls: 0.04975  loss_box_reg: 0.2264  loss_dis_0: 2.581  loss_dis_1: 2.459  time: 2.0825  data_time: 0.0639  lr: 0.002  max_mem: 15138M
[09/18 21:06:04 d2.utils.events]:  eta: 10:14:17  iter: 7319  total_loss: 5.31  loss_cls: 0.04549  loss_box_reg: 0.2292  loss_dis_0: 2.598  loss_dis_1: 2.436  time: 2.0825  data_time: 0.0721  lr: 0.002  max_mem: 15138M
[09/18 21:06:46 d2.utils.events]:  eta: 10:13:36  iter: 7339  total_loss: 5.32  loss_cls: 0.05137  loss_box_reg: 0.2571  loss_dis_0: 2.594  loss_dis_1: 2.425  time: 2.0826  data_time: 0.0739  lr: 0.002  max_mem: 15138M
[09/18 21:07:28 d2.utils.events]:  eta: 10:13:03  iter: 7359  total_loss: 5.282  loss_cls: 0.05145  loss_box_reg: 0.2444  loss_dis_0: 2.508  loss_dis_1: 2.491  time: 2.0826  data_time: 0.0678  lr: 0.002  max_mem: 15138M
[09/18 21:08:10 d2.utils.events]:  eta: 10:12:20  iter: 7379  total_loss: 5.399  loss_cls: 0.06124  loss_box_reg: 0.2676  loss_dis_0: 2.367  loss_dis_1: 2.69  time: 2.0826  data_time: 0.0665  lr: 0.002  max_mem: 15138M
[09/18 21:08:52 d2.utils.events]:  eta: 10:11:31  iter: 7399  total_loss: 5.2  loss_cls: 0.05157  loss_box_reg: 0.2559  loss_dis_0: 2.266  loss_dis_1: 2.625  time: 2.0826  data_time: 0.0622  lr: 0.002  max_mem: 15138M
[09/18 21:09:33 d2.utils.events]:  eta: 10:10:46  iter: 7419  total_loss: 5.153  loss_cls: 0.04461  loss_box_reg: 0.2355  loss_dis_0: 2.453  loss_dis_1: 2.473  time: 2.0826  data_time: 0.0640  lr: 0.002  max_mem: 15138M
[09/18 21:10:15 d2.utils.events]:  eta: 10:09:59  iter: 7439  total_loss: 5.183  loss_cls: 0.04422  loss_box_reg: 0.2389  loss_dis_0: 2.386  loss_dis_1: 2.468  time: 2.0826  data_time: 0.0702  lr: 0.002  max_mem: 15138M
[09/18 21:10:57 d2.utils.events]:  eta: 10:09:22  iter: 7459  total_loss: 5.203  loss_cls: 0.04332  loss_box_reg: 0.2164  loss_dis_0: 2.509  loss_dis_1: 2.379  time: 2.0826  data_time: 0.0623  lr: 0.002  max_mem: 15138M
[09/18 21:11:38 d2.utils.events]:  eta: 10:08:41  iter: 7479  total_loss: 5.187  loss_cls: 0.04759  loss_box_reg: 0.2309  loss_dis_0: 2.517  loss_dis_1: 2.426  time: 2.0826  data_time: 0.0516  lr: 0.002  max_mem: 15138M
[09/18 21:12:20 d2.utils.events]:  eta: 10:07:59  iter: 7499  total_loss: 5.21  loss_cls: 0.04926  loss_box_reg: 0.2302  loss_dis_0: 2.477  loss_dis_1: 2.46  time: 2.0826  data_time: 0.0670  lr: 0.002  max_mem: 15138M
[09/18 21:13:01 d2.utils.events]:  eta: 10:07:10  iter: 7519  total_loss: 5.136  loss_cls: 0.04312  loss_box_reg: 0.2314  loss_dis_0: 2.329  loss_dis_1: 2.57  time: 2.0826  data_time: 0.0695  lr: 0.002  max_mem: 15138M
[09/18 21:13:43 d2.utils.events]:  eta: 10:06:26  iter: 7539  total_loss: 5.153  loss_cls: 0.0429  loss_box_reg: 0.2078  loss_dis_0: 2.476  loss_dis_1: 2.429  time: 2.0826  data_time: 0.0562  lr: 0.002  max_mem: 15138M
[09/18 21:14:25 d2.utils.events]:  eta: 10:05:39  iter: 7559  total_loss: 5.249  loss_cls: 0.04549  loss_box_reg: 0.226  loss_dis_0: 2.177  loss_dis_1: 2.841  time: 2.0826  data_time: 0.0689  lr: 0.002  max_mem: 15138M
[09/18 21:15:07 d2.utils.events]:  eta: 10:04:55  iter: 7579  total_loss: 5.208  loss_cls: 0.04337  loss_box_reg: 0.2291  loss_dis_0: 2.491  loss_dis_1: 2.413  time: 2.0826  data_time: 0.0645  lr: 0.002  max_mem: 15138M
[09/18 21:15:48 d2.utils.events]:  eta: 10:04:09  iter: 7599  total_loss: 5.211  loss_cls: 0.04306  loss_box_reg: 0.2302  loss_dis_0: 2.554  loss_dis_1: 2.352  time: 2.0826  data_time: 0.0624  lr: 0.002  max_mem: 15138M
[09/18 21:16:30 d2.utils.events]:  eta: 10:03:23  iter: 7619  total_loss: 5.255  loss_cls: 0.04102  loss_box_reg: 0.201  loss_dis_0: 2.478  loss_dis_1: 2.524  time: 2.0826  data_time: 0.0686  lr: 0.002  max_mem: 15138M
[09/18 21:17:12 d2.utils.events]:  eta: 10:02:40  iter: 7639  total_loss: 5.337  loss_cls: 0.05348  loss_box_reg: 0.2614  loss_dis_0: 2.874  loss_dis_1: 2.153  time: 2.0826  data_time: 0.0585  lr: 0.002  max_mem: 15138M
[09/18 21:17:53 d2.utils.events]:  eta: 10:01:51  iter: 7659  total_loss: 5.362  loss_cls: 0.05766  loss_box_reg: 0.2479  loss_dis_0: 2.65  loss_dis_1: 2.384  time: 2.0826  data_time: 0.0634  lr: 0.002  max_mem: 15138M
[09/18 21:18:35 d2.utils.events]:  eta: 10:01:10  iter: 7679  total_loss: 5.228  loss_cls: 0.05926  loss_box_reg: 0.256  loss_dis_0: 2.414  loss_dis_1: 2.502  time: 2.0826  data_time: 0.0664  lr: 0.002  max_mem: 15138M
[09/18 21:19:17 d2.utils.events]:  eta: 10:00:30  iter: 7699  total_loss: 5.2  loss_cls: 0.05057  loss_box_reg: 0.2567  loss_dis_0: 2.408  loss_dis_1: 2.437  time: 2.0826  data_time: 0.0583  lr: 0.002  max_mem: 15138M
[09/18 21:19:59 d2.utils.events]:  eta: 9:59:51  iter: 7719  total_loss: 5.222  loss_cls: 0.05072  loss_box_reg: 0.2516  loss_dis_0: 2.437  loss_dis_1: 2.522  time: 2.0826  data_time: 0.0608  lr: 0.002  max_mem: 15138M
[09/18 21:20:40 d2.utils.events]:  eta: 9:59:12  iter: 7739  total_loss: 5.221  loss_cls: 0.04914  loss_box_reg: 0.2507  loss_dis_0: 2.408  loss_dis_1: 2.529  time: 2.0826  data_time: 0.0711  lr: 0.002  max_mem: 15138M
[09/18 21:21:22 d2.utils.events]:  eta: 9:58:29  iter: 7759  total_loss: 5.204  loss_cls: 0.04731  loss_box_reg: 0.2294  loss_dis_0: 2.511  loss_dis_1: 2.415  time: 2.0826  data_time: 0.0608  lr: 0.002  max_mem: 15138M
[09/18 21:22:04 d2.utils.events]:  eta: 9:57:42  iter: 7779  total_loss: 5.232  loss_cls: 0.04307  loss_box_reg: 0.2249  loss_dis_0: 2.461  loss_dis_1: 2.48  time: 2.0826  data_time: 0.0640  lr: 0.002  max_mem: 15138M
[09/18 21:22:45 d2.utils.events]:  eta: 9:56:58  iter: 7799  total_loss: 5.22  loss_cls: 0.04667  loss_box_reg: 0.2371  loss_dis_0: 2.445  loss_dis_1: 2.509  time: 2.0826  data_time: 0.0603  lr: 0.002  max_mem: 15138M
[09/18 21:23:27 d2.utils.events]:  eta: 9:56:16  iter: 7819  total_loss: 5.245  loss_cls: 0.04593  loss_box_reg: 0.2219  loss_dis_0: 2.437  loss_dis_1: 2.539  time: 2.0826  data_time: 0.0673  lr: 0.002  max_mem: 15138M
[09/18 21:24:09 d2.utils.events]:  eta: 9:55:32  iter: 7839  total_loss: 5.231  loss_cls: 0.04544  loss_box_reg: 0.2216  loss_dis_0: 2.468  loss_dis_1: 2.543  time: 2.0826  data_time: 0.0594  lr: 0.002  max_mem: 15138M
[09/18 21:24:50 d2.utils.events]:  eta: 9:54:46  iter: 7859  total_loss: 5.125  loss_cls: 0.04036  loss_box_reg: 0.2121  loss_dis_0: 2.55  loss_dis_1: 2.337  time: 2.0825  data_time: 0.0561  lr: 0.002  max_mem: 15138M
[09/18 21:25:32 d2.utils.events]:  eta: 9:54:04  iter: 7879  total_loss: 5.239  loss_cls: 0.04778  loss_box_reg: 0.2275  loss_dis_0: 2.383  loss_dis_1: 2.595  time: 2.0826  data_time: 0.0682  lr: 0.002  max_mem: 15138M
[09/18 21:26:14 d2.utils.events]:  eta: 9:53:19  iter: 7899  total_loss: 5.27  loss_cls: 0.04493  loss_box_reg: 0.232  loss_dis_0: 2.63  loss_dis_1: 2.37  time: 2.0825  data_time: 0.0603  lr: 0.002  max_mem: 15138M
[09/18 21:26:55 d2.utils.events]:  eta: 9:52:38  iter: 7919  total_loss: 5.309  loss_cls: 0.04855  loss_box_reg: 0.2409  loss_dis_0: 2.749  loss_dis_1: 2.302  time: 2.0826  data_time: 0.0665  lr: 0.002  max_mem: 15138M
[09/18 21:27:37 d2.utils.events]:  eta: 9:51:55  iter: 7939  total_loss: 5.302  loss_cls: 0.05392  loss_box_reg: 0.2213  loss_dis_0: 2.559  loss_dis_1: 2.476  time: 2.0825  data_time: 0.0489  lr: 0.002  max_mem: 15138M
[09/18 21:28:19 d2.utils.events]:  eta: 9:51:13  iter: 7959  total_loss: 5.229  loss_cls: 0.05265  loss_box_reg: 0.2439  loss_dis_0: 2.531  loss_dis_1: 2.38  time: 2.0826  data_time: 0.0649  lr: 0.002  max_mem: 15138M
[09/18 21:29:01 d2.utils.events]:  eta: 9:50:31  iter: 7979  total_loss: 5.253  loss_cls: 0.05792  loss_box_reg: 0.2346  loss_dis_0: 2.384  loss_dis_1: 2.58  time: 2.0826  data_time: 0.0663  lr: 0.002  max_mem: 15138M
[09/18 21:29:42 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0007999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/18 21:29:45 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/18 21:29:45 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/18 21:29:45 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/18 21:29:45 d2.evaluation.evaluator]: Start inference on 188 batches
[09/18 21:30:00 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0010 s / iter. Inference: 0.4700 s / iter. Eval: 0.0010 s / iter. Total: 0.4721 s / iter. ETA=0:01:23
[09/18 21:30:05 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0013 s / iter. Inference: 0.4789 s / iter. Eval: 0.0011 s / iter. Total: 0.4814 s / iter. ETA=0:01:19
[09/18 21:30:11 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0015 s / iter. Inference: 0.4814 s / iter. Eval: 0.0011 s / iter. Total: 0.4841 s / iter. ETA=0:01:15
[09/18 21:30:16 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0017 s / iter. Inference: 0.4798 s / iter. Eval: 0.0012 s / iter. Total: 0.4828 s / iter. ETA=0:01:09
[09/18 21:30:21 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0017 s / iter. Inference: 0.4759 s / iter. Eval: 0.0012 s / iter. Total: 0.4788 s / iter. ETA=0:01:03
[09/18 21:30:26 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0017 s / iter. Inference: 0.4745 s / iter. Eval: 0.0012 s / iter. Total: 0.4774 s / iter. ETA=0:00:58
[09/18 21:30:32 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0016 s / iter. Inference: 0.4747 s / iter. Eval: 0.0012 s / iter. Total: 0.4776 s / iter. ETA=0:00:53
[09/18 21:30:37 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0016 s / iter. Inference: 0.4718 s / iter. Eval: 0.0012 s / iter. Total: 0.4746 s / iter. ETA=0:00:47
[09/18 21:30:42 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0019 s / iter. Inference: 0.4681 s / iter. Eval: 0.0012 s / iter. Total: 0.4712 s / iter. ETA=0:00:41
[09/18 21:30:47 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0018 s / iter. Inference: 0.4698 s / iter. Eval: 0.0012 s / iter. Total: 0.4729 s / iter. ETA=0:00:36
[09/18 21:30:52 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0018 s / iter. Inference: 0.4694 s / iter. Eval: 0.0012 s / iter. Total: 0.4725 s / iter. ETA=0:00:31
[09/18 21:30:58 d2.evaluation.evaluator]: Inference done 134/188. Dataloading: 0.0018 s / iter. Inference: 0.4671 s / iter. Eval: 0.0012 s / iter. Total: 0.4701 s / iter. ETA=0:00:25
[09/18 21:31:03 d2.evaluation.evaluator]: Inference done 146/188. Dataloading: 0.0017 s / iter. Inference: 0.4642 s / iter. Eval: 0.0012 s / iter. Total: 0.4672 s / iter. ETA=0:00:19
[09/18 21:31:08 d2.evaluation.evaluator]: Inference done 157/188. Dataloading: 0.0017 s / iter. Inference: 0.4651 s / iter. Eval: 0.0012 s / iter. Total: 0.4681 s / iter. ETA=0:00:14
[09/18 21:31:14 d2.evaluation.evaluator]: Inference done 169/188. Dataloading: 0.0017 s / iter. Inference: 0.4633 s / iter. Eval: 0.0011 s / iter. Total: 0.4663 s / iter. ETA=0:00:08
[09/18 21:31:19 d2.evaluation.evaluator]: Inference done 180/188. Dataloading: 0.0017 s / iter. Inference: 0.4628 s / iter. Eval: 0.0011 s / iter. Total: 0.4658 s / iter. ETA=0:00:03
[09/18 21:31:42 d2.evaluation.evaluator]: Total inference time: 0:01:45.104777 (0.574343 s / iter per device, on 8 devices)
[09/18 21:31:42 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.461934 s / iter per device, on 8 devices)
[09/18 21:31:43 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[56.17663551764336, 61.65061372881493, 70.28529727177495, 40.63545486912767, 55.88067700355741, 50.59545865582721, 39.00840468368993, 57.564696828732366]
[09/18 21:32:39 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/18 21:32:39 d2.evaluation.testing]: copypaste: Task: bbox
[09/18 21:32:39 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/18 21:32:39 d2.evaluation.testing]: copypaste: 30.9165,53.9747,30.0875
[09/18 21:32:39 d2.utils.events]:  eta: 9:49:50  iter: 7999  total_loss: 5.252  loss_cls: 0.05041  loss_box_reg: 0.2494  loss_dis_0: 2.342  loss_dis_1: 2.58  time: 2.0826  data_time: 0.0584  lr: 0.002  max_mem: 15138M
[09/18 21:33:21 d2.utils.events]:  eta: 9:49:07  iter: 8019  total_loss: 5.256  loss_cls: 0.04383  loss_box_reg: 0.2136  loss_dis_0: 2.684  loss_dis_1: 2.282  time: 2.0826  data_time: 0.0656  lr: 0.002  max_mem: 15138M
[09/18 21:34:02 d2.utils.events]:  eta: 9:48:28  iter: 8039  total_loss: 5.284  loss_cls: 0.04468  loss_box_reg: 0.2292  loss_dis_0: 2.377  loss_dis_1: 2.628  time: 2.0825  data_time: 0.0670  lr: 0.002  max_mem: 15138M
[09/18 21:34:44 d2.utils.events]:  eta: 9:47:52  iter: 8059  total_loss: 5.254  loss_cls: 0.04568  loss_box_reg: 0.232  loss_dis_0: 2.223  loss_dis_1: 2.704  time: 2.0826  data_time: 0.0651  lr: 0.002  max_mem: 15138M
[09/18 21:35:26 d2.utils.events]:  eta: 9:47:10  iter: 8079  total_loss: 5.269  loss_cls: 0.04711  loss_box_reg: 0.2369  loss_dis_0: 2.561  loss_dis_1: 2.429  time: 2.0825  data_time: 0.0581  lr: 0.002  max_mem: 15138M
[09/18 21:36:07 d2.utils.events]:  eta: 9:46:29  iter: 8099  total_loss: 5.262  loss_cls: 0.04975  loss_box_reg: 0.237  loss_dis_0: 2.476  loss_dis_1: 2.514  time: 2.0825  data_time: 0.0594  lr: 0.002  max_mem: 15138M
[09/18 21:36:49 d2.utils.events]:  eta: 9:45:47  iter: 8119  total_loss: 5.308  loss_cls: 0.05846  loss_box_reg: 0.2575  loss_dis_0: 2.473  loss_dis_1: 2.502  time: 2.0825  data_time: 0.0615  lr: 0.002  max_mem: 15138M
[09/18 21:37:31 d2.utils.events]:  eta: 9:45:05  iter: 8139  total_loss: 5.254  loss_cls: 0.05421  loss_box_reg: 0.2616  loss_dis_0: 2.372  loss_dis_1: 2.577  time: 2.0825  data_time: 0.0702  lr: 0.002  max_mem: 15138M
[09/18 21:38:12 d2.utils.events]:  eta: 9:44:24  iter: 8159  total_loss: 5.169  loss_cls: 0.04761  loss_box_reg: 0.2396  loss_dis_0: 2.364  loss_dis_1: 2.541  time: 2.0825  data_time: 0.0654  lr: 0.002  max_mem: 15138M
[09/18 21:38:54 d2.utils.events]:  eta: 9:43:51  iter: 8179  total_loss: 5.239  loss_cls: 0.05065  loss_box_reg: 0.2445  loss_dis_0: 2.474  loss_dis_1: 2.505  time: 2.0826  data_time: 0.0587  lr: 0.002  max_mem: 15138M
[09/18 21:39:36 d2.utils.events]:  eta: 9:43:08  iter: 8199  total_loss: 5.239  loss_cls: 0.04807  loss_box_reg: 0.2432  loss_dis_0: 2.538  loss_dis_1: 2.383  time: 2.0826  data_time: 0.0609  lr: 0.002  max_mem: 15138M
[09/18 21:40:18 d2.utils.events]:  eta: 9:42:30  iter: 8219  total_loss: 5.24  loss_cls: 0.04937  loss_box_reg: 0.2329  loss_dis_0: 2.482  loss_dis_1: 2.482  time: 2.0826  data_time: 0.0619  lr: 0.002  max_mem: 15138M
[09/18 21:41:00 d2.utils.events]:  eta: 9:41:54  iter: 8239  total_loss: 5.246  loss_cls: 0.04141  loss_box_reg: 0.2104  loss_dis_0: 2.604  loss_dis_1: 2.414  time: 2.0826  data_time: 0.0709  lr: 0.002  max_mem: 15138M
[09/18 21:41:42 d2.utils.events]:  eta: 9:41:10  iter: 8259  total_loss: 5.25  loss_cls: 0.04855  loss_box_reg: 0.2431  loss_dis_0: 2.412  loss_dis_1: 2.575  time: 2.0826  data_time: 0.0635  lr: 0.002  max_mem: 15138M
[09/18 21:42:24 d2.utils.events]:  eta: 9:40:44  iter: 8279  total_loss: 5.203  loss_cls: 0.04019  loss_box_reg: 0.2173  loss_dis_0: 2.512  loss_dis_1: 2.421  time: 2.0827  data_time: 0.0553  lr: 0.002  max_mem: 15138M
[09/18 21:43:06 d2.utils.events]:  eta: 9:39:53  iter: 8299  total_loss: 5.208  loss_cls: 0.04573  loss_box_reg: 0.2331  loss_dis_0: 2.335  loss_dis_1: 2.596  time: 2.0827  data_time: 0.0632  lr: 0.002  max_mem: 15138M
[09/18 21:43:47 d2.utils.events]:  eta: 9:39:08  iter: 8319  total_loss: 5.222  loss_cls: 0.04652  loss_box_reg: 0.215  loss_dis_0: 2.508  loss_dis_1: 2.458  time: 2.0827  data_time: 0.0686  lr: 0.002  max_mem: 15138M
[09/18 21:44:29 d2.utils.events]:  eta: 9:38:23  iter: 8339  total_loss: 5.269  loss_cls: 0.05124  loss_box_reg: 0.2482  loss_dis_0: 2.229  loss_dis_1: 2.73  time: 2.0827  data_time: 0.0581  lr: 0.002  max_mem: 15138M
[09/18 21:45:11 d2.utils.events]:  eta: 9:37:43  iter: 8359  total_loss: 5.289  loss_cls: 0.04886  loss_box_reg: 0.2492  loss_dis_0: 2.244  loss_dis_1: 2.752  time: 2.0827  data_time: 0.0608  lr: 0.002  max_mem: 15138M
[09/18 21:45:53 d2.utils.events]:  eta: 9:37:01  iter: 8379  total_loss: 5.302  loss_cls: 0.05037  loss_box_reg: 0.2394  loss_dis_0: 2.302  loss_dis_1: 2.687  time: 2.0827  data_time: 0.0576  lr: 0.002  max_mem: 15138M
[09/18 21:46:35 d2.utils.events]:  eta: 9:36:23  iter: 8399  total_loss: 5.31  loss_cls: 0.0452  loss_box_reg: 0.2183  loss_dis_0: 2.317  loss_dis_1: 2.733  time: 2.0827  data_time: 0.0587  lr: 0.002  max_mem: 15138M
[09/18 21:47:16 d2.utils.events]:  eta: 9:35:54  iter: 8419  total_loss: 5.391  loss_cls: 0.05324  loss_box_reg: 0.2454  loss_dis_0: 2.387  loss_dis_1: 2.717  time: 2.0827  data_time: 0.0572  lr: 0.002  max_mem: 15138M
[09/18 21:47:58 d2.utils.events]:  eta: 9:35:16  iter: 8439  total_loss: 5.412  loss_cls: 0.04919  loss_box_reg: 0.2265  loss_dis_0: 2.383  loss_dis_1: 2.74  time: 2.0827  data_time: 0.0703  lr: 0.002  max_mem: 15138M
[09/18 21:48:40 d2.utils.events]:  eta: 9:34:35  iter: 8459  total_loss: 5.388  loss_cls: 0.05201  loss_box_reg: 0.2417  loss_dis_0: 2.468  loss_dis_1: 2.624  time: 2.0828  data_time: 0.0662  lr: 0.002  max_mem: 15138M
[09/18 21:49:22 d2.utils.events]:  eta: 9:33:53  iter: 8479  total_loss: 5.43  loss_cls: 0.05382  loss_box_reg: 0.2418  loss_dis_0: 2.551  loss_dis_1: 2.566  time: 2.0828  data_time: 0.0660  lr: 0.002  max_mem: 15138M
[09/18 21:50:04 d2.utils.events]:  eta: 9:33:11  iter: 8499  total_loss: 5.473  loss_cls: 0.06164  loss_box_reg: 0.2543  loss_dis_0: 2.608  loss_dis_1: 2.541  time: 2.0828  data_time: 0.0650  lr: 0.002  max_mem: 15138M
[09/18 21:50:45 d2.utils.events]:  eta: 9:32:31  iter: 8519  total_loss: 5.474  loss_cls: 0.06184  loss_box_reg: 0.2873  loss_dis_0: 2.694  loss_dis_1: 2.444  time: 2.0828  data_time: 0.0747  lr: 0.002  max_mem: 15138M
[09/18 21:51:27 d2.utils.events]:  eta: 9:31:51  iter: 8539  total_loss: 5.713  loss_cls: 0.09259  loss_box_reg: 0.3166  loss_dis_0: 2.93  loss_dis_1: 2.396  time: 2.0828  data_time: 0.0627  lr: 0.002  max_mem: 15138M
[09/18 21:52:09 d2.utils.events]:  eta: 9:31:11  iter: 8559  total_loss: 5.444  loss_cls: 0.0675  loss_box_reg: 0.2667  loss_dis_0: 2.615  loss_dis_1: 2.467  time: 2.0828  data_time: 0.0649  lr: 0.002  max_mem: 15138M
[09/18 21:52:51 d2.utils.events]:  eta: 9:30:31  iter: 8579  total_loss: 5.322  loss_cls: 0.05259  loss_box_reg: 0.248  loss_dis_0: 2.828  loss_dis_1: 2.236  time: 2.0828  data_time: 0.0617  lr: 0.002  max_mem: 15138M
[09/18 21:53:33 d2.utils.events]:  eta: 9:29:49  iter: 8599  total_loss: 5.303  loss_cls: 0.0467  loss_box_reg: 0.2286  loss_dis_0: 2.76  loss_dis_1: 2.24  time: 2.0828  data_time: 0.0650  lr: 0.002  max_mem: 15138M
[09/18 21:54:14 d2.utils.events]:  eta: 9:29:10  iter: 8619  total_loss: 5.306  loss_cls: 0.0446  loss_box_reg: 0.2228  loss_dis_0: 2.806  loss_dis_1: 2.197  time: 2.0828  data_time: 0.0591  lr: 0.002  max_mem: 15138M
[09/18 21:54:56 d2.utils.events]:  eta: 9:28:26  iter: 8639  total_loss: 5.33  loss_cls: 0.04847  loss_box_reg: 0.2334  loss_dis_0: 2.744  loss_dis_1: 2.285  time: 2.0828  data_time: 0.0676  lr: 0.002  max_mem: 15138M
[09/18 21:55:38 d2.utils.events]:  eta: 9:27:47  iter: 8659  total_loss: 5.286  loss_cls: 0.04523  loss_box_reg: 0.2225  loss_dis_0: 2.641  loss_dis_1: 2.372  time: 2.0828  data_time: 0.0629  lr: 0.002  max_mem: 15138M
[09/18 21:56:19 d2.utils.events]:  eta: 9:27:03  iter: 8679  total_loss: 5.334  loss_cls: 0.04803  loss_box_reg: 0.2426  loss_dis_0: 2.504  loss_dis_1: 2.509  time: 2.0828  data_time: 0.0623  lr: 0.002  max_mem: 15138M
[09/18 21:57:01 d2.utils.events]:  eta: 9:26:21  iter: 8699  total_loss: 5.357  loss_cls: 0.04902  loss_box_reg: 0.237  loss_dis_0: 2.274  loss_dis_1: 2.769  time: 2.0828  data_time: 0.0540  lr: 0.002  max_mem: 15138M
[09/18 21:57:43 d2.utils.events]:  eta: 9:25:37  iter: 8719  total_loss: 5.283  loss_cls: 0.0463  loss_box_reg: 0.2115  loss_dis_0: 2.346  loss_dis_1: 2.667  time: 2.0828  data_time: 0.0591  lr: 0.002  max_mem: 15138M
[09/18 21:58:25 d2.utils.events]:  eta: 9:24:54  iter: 8739  total_loss: 5.276  loss_cls: 0.05107  loss_box_reg: 0.2345  loss_dis_0: 2.43  loss_dis_1: 2.568  time: 2.0828  data_time: 0.0611  lr: 0.002  max_mem: 15138M
[09/18 21:59:06 d2.utils.events]:  eta: 9:24:17  iter: 8759  total_loss: 5.228  loss_cls: 0.04763  loss_box_reg: 0.2258  loss_dis_0: 2.531  loss_dis_1: 2.435  time: 2.0829  data_time: 0.0724  lr: 0.002  max_mem: 15138M
[09/18 21:59:48 d2.utils.events]:  eta: 9:23:42  iter: 8779  total_loss: 5.286  loss_cls: 0.05463  loss_box_reg: 0.2602  loss_dis_0: 2.495  loss_dis_1: 2.469  time: 2.0829  data_time: 0.0673  lr: 0.002  max_mem: 15138M
[09/18 22:00:30 d2.utils.events]:  eta: 9:23:08  iter: 8799  total_loss: 5.225  loss_cls: 0.04987  loss_box_reg: 0.2291  loss_dis_0: 2.348  loss_dis_1: 2.578  time: 2.0829  data_time: 0.0624  lr: 0.002  max_mem: 15138M
[09/18 22:01:12 d2.utils.events]:  eta: 9:22:26  iter: 8819  total_loss: 5.231  loss_cls: 0.04739  loss_box_reg: 0.2349  loss_dis_0: 2.445  loss_dis_1: 2.525  time: 2.0829  data_time: 0.0670  lr: 0.002  max_mem: 15138M
[09/18 22:01:54 d2.utils.events]:  eta: 9:21:41  iter: 8839  total_loss: 5.171  loss_cls: 0.04231  loss_box_reg: 0.2004  loss_dis_0: 2.512  loss_dis_1: 2.417  time: 2.0829  data_time: 0.0654  lr: 0.002  max_mem: 15138M
[09/18 22:02:36 d2.utils.events]:  eta: 9:21:05  iter: 8859  total_loss: 5.203  loss_cls: 0.04506  loss_box_reg: 0.2211  loss_dis_0: 2.44  loss_dis_1: 2.481  time: 2.0829  data_time: 0.0650  lr: 0.002  max_mem: 15138M
[09/18 22:03:17 d2.utils.events]:  eta: 9:20:23  iter: 8879  total_loss: 5.18  loss_cls: 0.04296  loss_box_reg: 0.2241  loss_dis_0: 2.35  loss_dis_1: 2.561  time: 2.0829  data_time: 0.0654  lr: 0.002  max_mem: 15138M
[09/18 22:03:59 d2.utils.events]:  eta: 9:19:41  iter: 8899  total_loss: 5.188  loss_cls: 0.04648  loss_box_reg: 0.2232  loss_dis_0: 2.341  loss_dis_1: 2.572  time: 2.0829  data_time: 0.0570  lr: 0.002  max_mem: 15138M
[09/18 22:04:41 d2.utils.events]:  eta: 9:18:58  iter: 8919  total_loss: 5.219  loss_cls: 0.04313  loss_box_reg: 0.2205  loss_dis_0: 2.542  loss_dis_1: 2.391  time: 2.0829  data_time: 0.0605  lr: 0.002  max_mem: 15138M
[09/18 22:05:22 d2.utils.events]:  eta: 9:18:17  iter: 8939  total_loss: 5.098  loss_cls: 0.04569  loss_box_reg: 0.2305  loss_dis_0: 2.32  loss_dis_1: 2.482  time: 2.0829  data_time: 0.0614  lr: 0.002  max_mem: 15138M
[09/18 22:06:04 d2.utils.events]:  eta: 9:17:22  iter: 8959  total_loss: 5.162  loss_cls: 0.03955  loss_box_reg: 0.2214  loss_dis_0: 2.491  loss_dis_1: 2.439  time: 2.0829  data_time: 0.0639  lr: 0.002  max_mem: 15138M
[09/18 22:06:46 d2.utils.events]:  eta: 9:16:38  iter: 8979  total_loss: 5.171  loss_cls: 0.04439  loss_box_reg: 0.2169  loss_dis_0: 2.357  loss_dis_1: 2.539  time: 2.0829  data_time: 0.0538  lr: 0.002  max_mem: 15138M
[09/18 22:07:27 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0008999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/18 22:07:30 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/18 22:07:30 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/18 22:07:30 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/18 22:07:30 d2.evaluation.evaluator]: Start inference on 188 batches
[09/18 22:07:45 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0016 s / iter. Inference: 0.5042 s / iter. Eval: 0.0011 s / iter. Total: 0.5069 s / iter. ETA=0:01:29
[09/18 22:07:50 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0016 s / iter. Inference: 0.4963 s / iter. Eval: 0.0012 s / iter. Total: 0.4992 s / iter. ETA=0:01:22
[09/18 22:07:56 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0022 s / iter. Inference: 0.4923 s / iter. Eval: 0.0017 s / iter. Total: 0.4963 s / iter. ETA=0:01:16
[09/18 22:08:01 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0028 s / iter. Inference: 0.4872 s / iter. Eval: 0.0015 s / iter. Total: 0.4915 s / iter. ETA=0:01:10
[09/18 22:08:06 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0025 s / iter. Inference: 0.4799 s / iter. Eval: 0.0014 s / iter. Total: 0.4839 s / iter. ETA=0:01:04
[09/18 22:08:11 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0024 s / iter. Inference: 0.4798 s / iter. Eval: 0.0014 s / iter. Total: 0.4837 s / iter. ETA=0:00:59
[09/18 22:08:17 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0023 s / iter. Inference: 0.4803 s / iter. Eval: 0.0014 s / iter. Total: 0.4840 s / iter. ETA=0:00:53
[09/18 22:08:22 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0022 s / iter. Inference: 0.4783 s / iter. Eval: 0.0014 s / iter. Total: 0.4820 s / iter. ETA=0:00:48
[09/18 22:08:27 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0022 s / iter. Inference: 0.4733 s / iter. Eval: 0.0014 s / iter. Total: 0.4770 s / iter. ETA=0:00:41
[09/18 22:08:33 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0024 s / iter. Inference: 0.4746 s / iter. Eval: 0.0014 s / iter. Total: 0.4784 s / iter. ETA=0:00:36
[09/18 22:08:38 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0026 s / iter. Inference: 0.4756 s / iter. Eval: 0.0014 s / iter. Total: 0.4797 s / iter. ETA=0:00:31
[09/18 22:08:43 d2.evaluation.evaluator]: Inference done 133/188. Dataloading: 0.0027 s / iter. Inference: 0.4738 s / iter. Eval: 0.0014 s / iter. Total: 0.4780 s / iter. ETA=0:00:26
[09/18 22:08:48 d2.evaluation.evaluator]: Inference done 145/188. Dataloading: 0.0026 s / iter. Inference: 0.4708 s / iter. Eval: 0.0014 s / iter. Total: 0.4748 s / iter. ETA=0:00:20
[09/18 22:08:53 d2.evaluation.evaluator]: Inference done 156/188. Dataloading: 0.0026 s / iter. Inference: 0.4703 s / iter. Eval: 0.0013 s / iter. Total: 0.4743 s / iter. ETA=0:00:15
[09/18 22:08:59 d2.evaluation.evaluator]: Inference done 168/188. Dataloading: 0.0025 s / iter. Inference: 0.4688 s / iter. Eval: 0.0013 s / iter. Total: 0.4728 s / iter. ETA=0:00:09
[09/18 22:09:04 d2.evaluation.evaluator]: Inference done 179/188. Dataloading: 0.0024 s / iter. Inference: 0.4687 s / iter. Eval: 0.0013 s / iter. Total: 0.4725 s / iter. ETA=0:00:04
[09/18 22:09:28 d2.evaluation.evaluator]: Total inference time: 0:01:46.226020 (0.580470 s / iter per device, on 8 devices)
[09/18 22:09:28 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:25 (0.467205 s / iter per device, on 8 devices)
[09/18 22:09:29 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[57.05751685209002, 60.20792428505429, 70.63157298114969, 40.40382012528014, 58.85648716465282, 50.20660811578339, 40.936844667673526, 56.332046011131084]
[09/18 22:10:25 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/18 22:10:25 d2.evaluation.testing]: copypaste: Task: bbox
[09/18 22:10:25 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/18 22:10:25 d2.evaluation.testing]: copypaste: 31.2168,54.3291,31.4015
[09/18 22:10:25 d2.utils.events]:  eta: 9:15:52  iter: 8999  total_loss: 5.237  loss_cls: 0.04361  loss_box_reg: 0.2184  loss_dis_0: 2.776  loss_dis_1: 2.17  time: 2.0829  data_time: 0.0614  lr: 0.002  max_mem: 15138M
[09/18 22:11:07 d2.utils.events]:  eta: 9:15:15  iter: 9019  total_loss: 5.267  loss_cls: 0.04492  loss_box_reg: 0.2312  loss_dis_0: 2.862  loss_dis_1: 2.152  time: 2.0829  data_time: 0.0649  lr: 0.002  max_mem: 15138M
[09/18 22:11:48 d2.utils.events]:  eta: 9:14:30  iter: 9039  total_loss: 5.322  loss_cls: 0.05261  loss_box_reg: 0.2375  loss_dis_0: 2.598  loss_dis_1: 2.417  time: 2.0828  data_time: 0.0607  lr: 0.002  max_mem: 15138M
[09/18 22:12:30 d2.utils.events]:  eta: 9:13:45  iter: 9059  total_loss: 5.279  loss_cls: 0.04909  loss_box_reg: 0.2308  loss_dis_0: 2.247  loss_dis_1: 2.75  time: 2.0828  data_time: 0.0738  lr: 0.002  max_mem: 15138M
[09/18 22:13:11 d2.utils.events]:  eta: 9:13:02  iter: 9079  total_loss: 5.253  loss_cls: 0.05046  loss_box_reg: 0.231  loss_dis_0: 2.36  loss_dis_1: 2.575  time: 2.0828  data_time: 0.0710  lr: 0.002  max_mem: 15138M
[09/18 22:13:53 d2.utils.events]:  eta: 9:12:16  iter: 9099  total_loss: 5.236  loss_cls: 0.0527  loss_box_reg: 0.2349  loss_dis_0: 2.337  loss_dis_1: 2.608  time: 2.0828  data_time: 0.0649  lr: 0.002  max_mem: 15138M
[09/18 22:14:35 d2.utils.events]:  eta: 9:11:37  iter: 9119  total_loss: 5.217  loss_cls: 0.04907  loss_box_reg: 0.2321  loss_dis_0: 2.563  loss_dis_1: 2.401  time: 2.0828  data_time: 0.0632  lr: 0.002  max_mem: 15138M
[09/18 22:15:16 d2.utils.events]:  eta: 9:10:46  iter: 9139  total_loss: 5.286  loss_cls: 0.04795  loss_box_reg: 0.2361  loss_dis_0: 2.608  loss_dis_1: 2.429  time: 2.0828  data_time: 0.0575  lr: 0.002  max_mem: 15138M
[09/18 22:15:57 d2.utils.events]:  eta: 9:09:55  iter: 9159  total_loss: 5.22  loss_cls: 0.05034  loss_box_reg: 0.2429  loss_dis_0: 2.533  loss_dis_1: 2.409  time: 2.0827  data_time: 0.0644  lr: 0.002  max_mem: 15138M
[09/18 22:16:39 d2.utils.events]:  eta: 9:09:06  iter: 9179  total_loss: 5.193  loss_cls: 0.0508  loss_box_reg: 0.2382  loss_dis_0: 2.312  loss_dis_1: 2.558  time: 2.0827  data_time: 0.0779  lr: 0.002  max_mem: 15138M
[09/18 22:17:21 d2.utils.events]:  eta: 9:08:28  iter: 9199  total_loss: 5.376  loss_cls: 0.05448  loss_box_reg: 0.2618  loss_dis_0: 2.289  loss_dis_1: 2.754  time: 2.0827  data_time: 0.0600  lr: 0.002  max_mem: 15138M
[09/18 22:18:02 d2.utils.events]:  eta: 9:07:43  iter: 9219  total_loss: 5.335  loss_cls: 0.04523  loss_box_reg: 0.2312  loss_dis_0: 2.32  loss_dis_1: 2.749  time: 2.0827  data_time: 0.0587  lr: 0.002  max_mem: 15138M
[09/18 22:18:44 d2.utils.events]:  eta: 9:06:59  iter: 9239  total_loss: 5.302  loss_cls: 0.05048  loss_box_reg: 0.2386  loss_dis_0: 2.44  loss_dis_1: 2.591  time: 2.0827  data_time: 0.0524  lr: 0.002  max_mem: 15138M
[09/18 22:19:26 d2.utils.events]:  eta: 9:06:18  iter: 9259  total_loss: 5.269  loss_cls: 0.04646  loss_box_reg: 0.2318  loss_dis_0: 2.4  loss_dis_1: 2.618  time: 2.0827  data_time: 0.0658  lr: 0.002  max_mem: 15138M
[09/18 22:20:07 d2.utils.events]:  eta: 9:05:32  iter: 9279  total_loss: 5.286  loss_cls: 0.04878  loss_box_reg: 0.2299  loss_dis_0: 2.521  loss_dis_1: 2.47  time: 2.0827  data_time: 0.0603  lr: 0.002  max_mem: 15138M
[09/18 22:20:49 d2.utils.events]:  eta: 9:04:50  iter: 9299  total_loss: 5.294  loss_cls: 0.04754  loss_box_reg: 0.2276  loss_dis_0: 2.669  loss_dis_1: 2.328  time: 2.0827  data_time: 0.0645  lr: 0.002  max_mem: 15138M
[09/18 22:21:31 d2.utils.events]:  eta: 9:04:09  iter: 9319  total_loss: 5.195  loss_cls: 0.05099  loss_box_reg: 0.237  loss_dis_0: 2.598  loss_dis_1: 2.32  time: 2.0827  data_time: 0.0680  lr: 0.002  max_mem: 15138M
[09/18 22:22:12 d2.utils.events]:  eta: 9:03:29  iter: 9339  total_loss: 5.22  loss_cls: 0.04802  loss_box_reg: 0.2243  loss_dis_0: 2.615  loss_dis_1: 2.317  time: 2.0827  data_time: 0.0695  lr: 0.002  max_mem: 15138M
[09/18 22:22:54 d2.utils.events]:  eta: 9:02:44  iter: 9359  total_loss: 5.284  loss_cls: 0.04797  loss_box_reg: 0.2276  loss_dis_0: 2.61  loss_dis_1: 2.404  time: 2.0827  data_time: 0.0654  lr: 0.002  max_mem: 15138M
[09/18 22:23:36 d2.utils.events]:  eta: 9:02:04  iter: 9379  total_loss: 5.334  loss_cls: 0.04626  loss_box_reg: 0.2357  loss_dis_0: 2.46  loss_dis_1: 2.595  time: 2.0827  data_time: 0.0554  lr: 0.002  max_mem: 15138M
[09/18 22:24:18 d2.utils.events]:  eta: 9:01:18  iter: 9399  total_loss: 5.257  loss_cls: 0.0474  loss_box_reg: 0.2393  loss_dis_0: 2.31  loss_dis_1: 2.68  time: 2.0827  data_time: 0.0633  lr: 0.002  max_mem: 15138M
[09/18 22:24:59 d2.utils.events]:  eta: 9:00:32  iter: 9419  total_loss: 5.203  loss_cls: 0.04874  loss_box_reg: 0.2302  loss_dis_0: 2.407  loss_dis_1: 2.514  time: 2.0827  data_time: 0.0613  lr: 0.002  max_mem: 15138M
[09/18 22:25:41 d2.utils.events]:  eta: 8:59:51  iter: 9439  total_loss: 5.237  loss_cls: 0.05287  loss_box_reg: 0.2486  loss_dis_0: 2.327  loss_dis_1: 2.646  time: 2.0827  data_time: 0.0642  lr: 0.002  max_mem: 15138M
[09/18 22:26:23 d2.utils.events]:  eta: 8:59:08  iter: 9459  total_loss: 5.232  loss_cls: 0.05562  loss_box_reg: 0.2505  loss_dis_0: 2.321  loss_dis_1: 2.6  time: 2.0827  data_time: 0.0605  lr: 0.002  max_mem: 15138M
[09/18 22:27:04 d2.utils.events]:  eta: 8:58:23  iter: 9479  total_loss: 5.276  loss_cls: 0.04833  loss_box_reg: 0.2382  loss_dis_0: 2.402  loss_dis_1: 2.609  time: 2.0827  data_time: 0.0641  lr: 0.002  max_mem: 15138M
[09/18 22:27:46 d2.utils.events]:  eta: 8:57:41  iter: 9499  total_loss: 5.256  loss_cls: 0.04322  loss_box_reg: 0.2145  loss_dis_0: 2.621  loss_dis_1: 2.345  time: 2.0827  data_time: 0.0657  lr: 0.002  max_mem: 15138M
[09/18 22:28:28 d2.utils.events]:  eta: 8:56:59  iter: 9519  total_loss: 5.244  loss_cls: 0.04625  loss_box_reg: 0.2277  loss_dis_0: 2.841  loss_dis_1: 2.122  time: 2.0827  data_time: 0.0592  lr: 0.002  max_mem: 15138M
[09/18 22:29:09 d2.utils.events]:  eta: 8:56:18  iter: 9539  total_loss: 5.297  loss_cls: 0.04781  loss_box_reg: 0.2358  loss_dis_0: 2.332  loss_dis_1: 2.692  time: 2.0827  data_time: 0.0633  lr: 0.002  max_mem: 15138M
[09/18 22:29:51 d2.utils.events]:  eta: 8:55:38  iter: 9559  total_loss: 5.301  loss_cls: 0.05287  loss_box_reg: 0.2372  loss_dis_0: 2.452  loss_dis_1: 2.539  time: 2.0827  data_time: 0.0587  lr: 0.002  max_mem: 15138M
[09/18 22:30:33 d2.utils.events]:  eta: 8:54:55  iter: 9579  total_loss: 5.278  loss_cls: 0.0459  loss_box_reg: 0.2487  loss_dis_0: 2.461  loss_dis_1: 2.515  time: 2.0827  data_time: 0.0683  lr: 0.002  max_mem: 15138M
[09/18 22:31:15 d2.utils.events]:  eta: 8:54:17  iter: 9599  total_loss: 5.259  loss_cls: 0.04481  loss_box_reg: 0.2271  loss_dis_0: 2.515  loss_dis_1: 2.502  time: 2.0827  data_time: 0.0543  lr: 0.002  max_mem: 15138M
[09/18 22:31:56 d2.utils.events]:  eta: 8:53:36  iter: 9619  total_loss: 5.236  loss_cls: 0.0428  loss_box_reg: 0.2191  loss_dis_0: 2.527  loss_dis_1: 2.473  time: 2.0827  data_time: 0.0652  lr: 0.002  max_mem: 15138M
[09/18 22:32:38 d2.utils.events]:  eta: 8:52:57  iter: 9639  total_loss: 5.247  loss_cls: 0.048  loss_box_reg: 0.2361  loss_dis_0: 2.38  loss_dis_1: 2.583  time: 2.0827  data_time: 0.0517  lr: 0.002  max_mem: 15138M
[09/18 22:33:20 d2.utils.events]:  eta: 8:52:14  iter: 9659  total_loss: 5.236  loss_cls: 0.04612  loss_box_reg: 0.2208  loss_dis_0: 2.542  loss_dis_1: 2.42  time: 2.0827  data_time: 0.0683  lr: 0.002  max_mem: 15138M
[09/18 22:34:02 d2.utils.events]:  eta: 8:51:34  iter: 9679  total_loss: 5.265  loss_cls: 0.04576  loss_box_reg: 0.2314  loss_dis_0: 2.412  loss_dis_1: 2.591  time: 2.0827  data_time: 0.0599  lr: 0.002  max_mem: 15138M
[09/18 22:34:43 d2.utils.events]:  eta: 8:50:57  iter: 9699  total_loss: 5.216  loss_cls: 0.04429  loss_box_reg: 0.2135  loss_dis_0: 2.423  loss_dis_1: 2.523  time: 2.0827  data_time: 0.0606  lr: 0.002  max_mem: 15138M
[09/18 22:35:25 d2.utils.events]:  eta: 8:50:20  iter: 9719  total_loss: 5.223  loss_cls: 0.04765  loss_box_reg: 0.2277  loss_dis_0: 2.342  loss_dis_1: 2.621  time: 2.0828  data_time: 0.0685  lr: 0.002  max_mem: 15138M
[09/18 22:36:07 d2.utils.events]:  eta: 8:49:42  iter: 9739  total_loss: 5.245  loss_cls: 0.04527  loss_box_reg: 0.2239  loss_dis_0: 2.65  loss_dis_1: 2.298  time: 2.0828  data_time: 0.0796  lr: 0.002  max_mem: 15138M
[09/18 22:36:49 d2.utils.events]:  eta: 8:49:02  iter: 9759  total_loss: 5.271  loss_cls: 0.0471  loss_box_reg: 0.2222  loss_dis_0: 2.422  loss_dis_1: 2.53  time: 2.0828  data_time: 0.0591  lr: 0.002  max_mem: 15138M
[09/18 22:37:31 d2.utils.events]:  eta: 8:48:16  iter: 9779  total_loss: 5.225  loss_cls: 0.04315  loss_box_reg: 0.2299  loss_dis_0: 2.443  loss_dis_1: 2.517  time: 2.0828  data_time: 0.0544  lr: 0.002  max_mem: 15138M
[09/18 22:38:12 d2.utils.events]:  eta: 8:47:33  iter: 9799  total_loss: 5.274  loss_cls: 0.04077  loss_box_reg: 0.212  loss_dis_0: 2.592  loss_dis_1: 2.393  time: 2.0828  data_time: 0.0705  lr: 0.002  max_mem: 15138M
[09/18 22:38:54 d2.utils.events]:  eta: 8:46:51  iter: 9819  total_loss: 5.29  loss_cls: 0.04629  loss_box_reg: 0.223  loss_dis_0: 2.439  loss_dis_1: 2.525  time: 2.0828  data_time: 0.0619  lr: 0.002  max_mem: 15138M
[09/18 22:39:36 d2.utils.events]:  eta: 8:46:12  iter: 9839  total_loss: 5.251  loss_cls: 0.04305  loss_box_reg: 0.2275  loss_dis_0: 2.498  loss_dis_1: 2.529  time: 2.0828  data_time: 0.0525  lr: 0.002  max_mem: 15138M
[09/18 22:40:18 d2.utils.events]:  eta: 8:45:28  iter: 9859  total_loss: 5.291  loss_cls: 0.04586  loss_box_reg: 0.2161  loss_dis_0: 2.516  loss_dis_1: 2.535  time: 2.0828  data_time: 0.0652  lr: 0.002  max_mem: 15138M
[09/18 22:41:00 d2.utils.events]:  eta: 8:44:50  iter: 9879  total_loss: 5.288  loss_cls: 0.03971  loss_box_reg: 0.204  loss_dis_0: 2.496  loss_dis_1: 2.539  time: 2.0828  data_time: 0.0655  lr: 0.002  max_mem: 15138M
[09/18 22:41:41 d2.utils.events]:  eta: 8:44:09  iter: 9899  total_loss: 5.319  loss_cls: 0.04545  loss_box_reg: 0.2258  loss_dis_0: 2.566  loss_dis_1: 2.486  time: 2.0828  data_time: 0.0570  lr: 0.002  max_mem: 15138M
[09/18 22:42:23 d2.utils.events]:  eta: 8:43:28  iter: 9919  total_loss: 5.27  loss_cls: 0.0437  loss_box_reg: 0.2168  loss_dis_0: 2.556  loss_dis_1: 2.462  time: 2.0828  data_time: 0.0584  lr: 0.002  max_mem: 15138M
[09/18 22:43:05 d2.utils.events]:  eta: 8:42:47  iter: 9939  total_loss: 5.334  loss_cls: 0.04516  loss_box_reg: 0.2293  loss_dis_0: 2.5  loss_dis_1: 2.552  time: 2.0828  data_time: 0.0581  lr: 0.002  max_mem: 15138M
[09/18 22:43:46 d2.utils.events]:  eta: 8:42:08  iter: 9959  total_loss: 5.342  loss_cls: 0.04884  loss_box_reg: 0.2275  loss_dis_0: 2.421  loss_dis_1: 2.645  time: 2.0828  data_time: 0.0699  lr: 0.002  max_mem: 15138M
[09/18 22:44:28 d2.utils.events]:  eta: 8:41:26  iter: 9979  total_loss: 5.324  loss_cls: 0.04733  loss_box_reg: 0.2384  loss_dis_0: 2.512  loss_dis_1: 2.538  time: 2.0828  data_time: 0.0581  lr: 0.002  max_mem: 15138M
[09/18 22:45:10 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0009999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/18 22:45:12 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/18 22:45:12 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/18 22:45:12 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/18 22:45:12 d2.evaluation.evaluator]: Start inference on 188 batches
[09/18 22:45:27 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0011 s / iter. Inference: 0.4640 s / iter. Eval: 0.0011 s / iter. Total: 0.4662 s / iter. ETA=0:01:22
[09/18 22:45:32 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0013 s / iter. Inference: 0.4730 s / iter. Eval: 0.0012 s / iter. Total: 0.4755 s / iter. ETA=0:01:18
[09/18 22:45:38 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0013 s / iter. Inference: 0.4722 s / iter. Eval: 0.0012 s / iter. Total: 0.4748 s / iter. ETA=0:01:13
[09/18 22:45:43 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0016 s / iter. Inference: 0.4713 s / iter. Eval: 0.0012 s / iter. Total: 0.4742 s / iter. ETA=0:01:08
[09/18 22:45:48 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0019 s / iter. Inference: 0.4717 s / iter. Eval: 0.0012 s / iter. Total: 0.4748 s / iter. ETA=0:01:03
[09/18 22:45:53 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0022 s / iter. Inference: 0.4733 s / iter. Eval: 0.0012 s / iter. Total: 0.4768 s / iter. ETA=0:00:58
[09/18 22:45:59 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0021 s / iter. Inference: 0.4736 s / iter. Eval: 0.0012 s / iter. Total: 0.4770 s / iter. ETA=0:00:52
[09/18 22:46:04 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0020 s / iter. Inference: 0.4710 s / iter. Eval: 0.0012 s / iter. Total: 0.4743 s / iter. ETA=0:00:47
[09/18 22:46:09 d2.evaluation.evaluator]: Inference done 99/188. Dataloading: 0.0021 s / iter. Inference: 0.4687 s / iter. Eval: 0.0012 s / iter. Total: 0.4721 s / iter. ETA=0:00:42
[09/18 22:46:14 d2.evaluation.evaluator]: Inference done 110/188. Dataloading: 0.0023 s / iter. Inference: 0.4707 s / iter. Eval: 0.0012 s / iter. Total: 0.4743 s / iter. ETA=0:00:36
[09/18 22:46:19 d2.evaluation.evaluator]: Inference done 121/188. Dataloading: 0.0022 s / iter. Inference: 0.4712 s / iter. Eval: 0.0012 s / iter. Total: 0.4747 s / iter. ETA=0:00:31
[09/18 22:46:24 d2.evaluation.evaluator]: Inference done 132/188. Dataloading: 0.0024 s / iter. Inference: 0.4694 s / iter. Eval: 0.0012 s / iter. Total: 0.4731 s / iter. ETA=0:00:26
[09/18 22:46:30 d2.evaluation.evaluator]: Inference done 144/188. Dataloading: 0.0024 s / iter. Inference: 0.4673 s / iter. Eval: 0.0012 s / iter. Total: 0.4709 s / iter. ETA=0:00:20
[09/18 22:46:35 d2.evaluation.evaluator]: Inference done 155/188. Dataloading: 0.0023 s / iter. Inference: 0.4669 s / iter. Eval: 0.0012 s / iter. Total: 0.4705 s / iter. ETA=0:00:15
[09/18 22:46:40 d2.evaluation.evaluator]: Inference done 166/188. Dataloading: 0.0023 s / iter. Inference: 0.4661 s / iter. Eval: 0.0012 s / iter. Total: 0.4697 s / iter. ETA=0:00:10
[09/18 22:46:45 d2.evaluation.evaluator]: Inference done 177/188. Dataloading: 0.0023 s / iter. Inference: 0.4671 s / iter. Eval: 0.0012 s / iter. Total: 0.4706 s / iter. ETA=0:00:05
[09/18 22:47:10 d2.evaluation.evaluator]: Total inference time: 0:01:45.771384 (0.577986 s / iter per device, on 8 devices)
[09/18 22:47:10 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:25 (0.464996 s / iter per device, on 8 devices)
[09/18 22:47:10 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[57.2215540173985, 61.896553433003554, 70.86025848793001, 41.58110398862237, 62.31523323005229, 50.44256559697742, 43.91122276490144, 58.0444117775643]
[09/18 22:48:16 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/18 22:48:16 d2.evaluation.testing]: copypaste: Task: bbox
[09/18 22:48:16 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/18 22:48:16 d2.evaluation.testing]: copypaste: 31.9830,55.7841,31.6749
[09/18 22:48:16 d2.utils.events]:  eta: 8:40:44  iter: 9999  total_loss: 5.313  loss_cls: 0.04133  loss_box_reg: 0.2183  loss_dis_0: 2.499  loss_dis_1: 2.561  time: 2.0828  data_time: 0.0623  lr: 0.002  max_mem: 15138M
[09/18 22:48:58 d2.utils.events]:  eta: 8:40:01  iter: 10019  total_loss: 5.321  loss_cls: 0.04152  loss_box_reg: 0.2149  loss_dis_0: 2.519  loss_dis_1: 2.539  time: 2.0828  data_time: 0.0726  lr: 0.002  max_mem: 15138M
[09/18 22:49:39 d2.utils.events]:  eta: 8:39:21  iter: 10039  total_loss: 5.359  loss_cls: 0.04693  loss_box_reg: 0.2419  loss_dis_0: 2.439  loss_dis_1: 2.628  time: 2.0828  data_time: 0.0559  lr: 0.002  max_mem: 15138M
[09/18 22:50:21 d2.utils.events]:  eta: 8:38:40  iter: 10059  total_loss: 5.36  loss_cls: 0.05667  loss_box_reg: 0.249  loss_dis_0: 2.306  loss_dis_1: 2.726  time: 2.0828  data_time: 0.0652  lr: 0.002  max_mem: 15138M
[09/18 22:51:02 d2.utils.events]:  eta: 8:38:03  iter: 10079  total_loss: 5.462  loss_cls: 0.07011  loss_box_reg: 0.291  loss_dis_0: 2.488  loss_dis_1: 2.594  time: 2.0828  data_time: 0.0680  lr: 0.002  max_mem: 15138M
[09/18 22:51:44 d2.utils.events]:  eta: 8:37:24  iter: 10099  total_loss: 5.292  loss_cls: 0.06028  loss_box_reg: 0.2471  loss_dis_0: 2.615  loss_dis_1: 2.354  time: 2.0827  data_time: 0.0660  lr: 0.002  max_mem: 15138M
[09/18 22:52:26 d2.utils.events]:  eta: 8:36:35  iter: 10119  total_loss: 5.352  loss_cls: 0.05332  loss_box_reg: 0.2396  loss_dis_0: 2.596  loss_dis_1: 2.455  time: 2.0827  data_time: 0.0662  lr: 0.002  max_mem: 15138M
[09/18 22:53:07 d2.utils.events]:  eta: 8:35:58  iter: 10139  total_loss: 5.337  loss_cls: 0.04828  loss_box_reg: 0.2267  loss_dis_0: 2.854  loss_dis_1: 2.177  time: 2.0827  data_time: 0.0638  lr: 0.002  max_mem: 15138M
[09/18 22:53:49 d2.utils.events]:  eta: 8:35:24  iter: 10159  total_loss: 5.286  loss_cls: 0.04448  loss_box_reg: 0.2252  loss_dis_0: 2.608  loss_dis_1: 2.381  time: 2.0828  data_time: 0.0530  lr: 0.002  max_mem: 15138M
[09/18 22:54:31 d2.utils.events]:  eta: 8:34:45  iter: 10179  total_loss: 5.308  loss_cls: 0.04701  loss_box_reg: 0.2299  loss_dis_0: 2.488  loss_dis_1: 2.554  time: 2.0827  data_time: 0.0584  lr: 0.002  max_mem: 15138M
[09/18 22:55:13 d2.utils.events]:  eta: 8:34:06  iter: 10199  total_loss: 5.274  loss_cls: 0.04299  loss_box_reg: 0.2212  loss_dis_0: 2.625  loss_dis_1: 2.383  time: 2.0828  data_time: 0.0657  lr: 0.002  max_mem: 15138M
[09/18 22:55:54 d2.utils.events]:  eta: 8:33:29  iter: 10219  total_loss: 5.263  loss_cls: 0.04888  loss_box_reg: 0.2338  loss_dis_0: 2.456  loss_dis_1: 2.532  time: 2.0827  data_time: 0.0554  lr: 0.002  max_mem: 15138M
[09/18 22:56:36 d2.utils.events]:  eta: 8:32:48  iter: 10239  total_loss: 5.255  loss_cls: 0.04691  loss_box_reg: 0.2405  loss_dis_0: 2.465  loss_dis_1: 2.501  time: 2.0828  data_time: 0.0544  lr: 0.002  max_mem: 15138M
[09/18 22:57:18 d2.utils.events]:  eta: 8:32:08  iter: 10259  total_loss: 5.243  loss_cls: 0.04554  loss_box_reg: 0.2335  loss_dis_0: 2.476  loss_dis_1: 2.47  time: 2.0828  data_time: 0.0639  lr: 0.002  max_mem: 15138M
[09/18 22:58:00 d2.utils.events]:  eta: 8:31:34  iter: 10279  total_loss: 5.218  loss_cls: 0.04326  loss_box_reg: 0.2137  loss_dis_0: 2.494  loss_dis_1: 2.413  time: 2.0828  data_time: 0.0659  lr: 0.002  max_mem: 15138M
[09/18 22:58:42 d2.utils.events]:  eta: 8:30:51  iter: 10299  total_loss: 5.258  loss_cls: 0.04902  loss_box_reg: 0.2191  loss_dis_0: 2.583  loss_dis_1: 2.41  time: 2.0828  data_time: 0.0643  lr: 0.002  max_mem: 15138M
[09/18 22:59:23 d2.utils.events]:  eta: 8:30:15  iter: 10319  total_loss: 5.238  loss_cls: 0.04434  loss_box_reg: 0.2259  loss_dis_0: 2.413  loss_dis_1: 2.528  time: 2.0828  data_time: 0.0675  lr: 0.002  max_mem: 15138M
[09/18 23:00:05 d2.utils.events]:  eta: 8:29:30  iter: 10339  total_loss: 5.246  loss_cls: 0.0428  loss_box_reg: 0.2268  loss_dis_0: 2.444  loss_dis_1: 2.538  time: 2.0828  data_time: 0.0587  lr: 0.002  max_mem: 15138M
[09/18 23:00:47 d2.utils.events]:  eta: 8:28:52  iter: 10359  total_loss: 5.281  loss_cls: 0.04663  loss_box_reg: 0.2338  loss_dis_0: 2.428  loss_dis_1: 2.562  time: 2.0828  data_time: 0.0613  lr: 0.002  max_mem: 15138M
[09/18 23:01:29 d2.utils.events]:  eta: 8:28:07  iter: 10379  total_loss: 5.263  loss_cls: 0.04586  loss_box_reg: 0.2354  loss_dis_0: 2.355  loss_dis_1: 2.628  time: 2.0829  data_time: 0.0679  lr: 0.002  max_mem: 15138M
[09/18 23:02:11 d2.utils.events]:  eta: 8:27:25  iter: 10399  total_loss: 5.181  loss_cls: 0.04999  loss_box_reg: 0.234  loss_dis_0: 2.471  loss_dis_1: 2.422  time: 2.0829  data_time: 0.0655  lr: 0.002  max_mem: 15138M
[09/18 23:02:53 d2.utils.events]:  eta: 8:26:46  iter: 10419  total_loss: 5.246  loss_cls: 0.04305  loss_box_reg: 0.2242  loss_dis_0: 2.459  loss_dis_1: 2.61  time: 2.0829  data_time: 0.0659  lr: 0.002  max_mem: 15138M
[09/18 23:03:34 d2.utils.events]:  eta: 8:26:05  iter: 10439  total_loss: 5.221  loss_cls: 0.04097  loss_box_reg: 0.2203  loss_dis_0: 2.495  loss_dis_1: 2.471  time: 2.0829  data_time: 0.0646  lr: 0.002  max_mem: 15138M
[09/18 23:04:16 d2.utils.events]:  eta: 8:25:23  iter: 10459  total_loss: 5.179  loss_cls: 0.04518  loss_box_reg: 0.221  loss_dis_0: 2.362  loss_dis_1: 2.592  time: 2.0829  data_time: 0.0668  lr: 0.002  max_mem: 15138M
[09/18 23:04:58 d2.utils.events]:  eta: 8:24:42  iter: 10479  total_loss: 5.219  loss_cls: 0.04345  loss_box_reg: 0.2125  loss_dis_0: 2.337  loss_dis_1: 2.624  time: 2.0829  data_time: 0.0595  lr: 0.002  max_mem: 15138M
[09/18 23:05:39 d2.utils.events]:  eta: 8:24:00  iter: 10499  total_loss: 5.251  loss_cls: 0.04422  loss_box_reg: 0.2265  loss_dis_0: 2.436  loss_dis_1: 2.534  time: 2.0829  data_time: 0.0657  lr: 0.002  max_mem: 15138M
[09/18 23:06:21 d2.utils.events]:  eta: 8:23:19  iter: 10519  total_loss: 5.295  loss_cls: 0.04953  loss_box_reg: 0.2398  loss_dis_0: 2.467  loss_dis_1: 2.522  time: 2.0829  data_time: 0.0604  lr: 0.002  max_mem: 15138M
[09/18 23:07:03 d2.utils.events]:  eta: 8:22:38  iter: 10539  total_loss: 5.305  loss_cls: 0.04361  loss_box_reg: 0.2273  loss_dis_0: 2.515  loss_dis_1: 2.5  time: 2.0829  data_time: 0.0648  lr: 0.002  max_mem: 15138M
[09/18 23:07:45 d2.utils.events]:  eta: 8:21:55  iter: 10559  total_loss: 5.296  loss_cls: 0.04363  loss_box_reg: 0.2233  loss_dis_0: 2.469  loss_dis_1: 2.574  time: 2.0829  data_time: 0.0759  lr: 0.002  max_mem: 15138M
[09/18 23:08:27 d2.utils.events]:  eta: 8:21:13  iter: 10579  total_loss: 5.268  loss_cls: 0.04526  loss_box_reg: 0.2228  loss_dis_0: 2.481  loss_dis_1: 2.534  time: 2.0829  data_time: 0.0635  lr: 0.002  max_mem: 15138M
[09/18 23:09:09 d2.utils.events]:  eta: 8:20:31  iter: 10599  total_loss: 5.266  loss_cls: 0.04632  loss_box_reg: 0.2353  loss_dis_0: 2.441  loss_dis_1: 2.53  time: 2.0829  data_time: 0.0578  lr: 0.002  max_mem: 15138M
[09/18 23:09:50 d2.utils.events]:  eta: 8:19:49  iter: 10619  total_loss: 5.295  loss_cls: 0.04558  loss_box_reg: 0.2169  loss_dis_0: 2.555  loss_dis_1: 2.483  time: 2.0829  data_time: 0.0601  lr: 0.002  max_mem: 15138M
[09/18 23:10:32 d2.utils.events]:  eta: 8:19:07  iter: 10639  total_loss: 5.31  loss_cls: 0.04668  loss_box_reg: 0.2179  loss_dis_0: 2.394  loss_dis_1: 2.647  time: 2.0829  data_time: 0.0597  lr: 0.002  max_mem: 15138M
[09/18 23:11:14 d2.utils.events]:  eta: 8:18:26  iter: 10659  total_loss: 5.327  loss_cls: 0.04492  loss_box_reg: 0.2213  loss_dis_0: 2.251  loss_dis_1: 2.819  time: 2.0829  data_time: 0.0632  lr: 0.002  max_mem: 15138M
[09/18 23:11:56 d2.utils.events]:  eta: 8:17:47  iter: 10679  total_loss: 5.322  loss_cls: 0.04834  loss_box_reg: 0.2346  loss_dis_0: 2.337  loss_dis_1: 2.716  time: 2.0829  data_time: 0.0713  lr: 0.002  max_mem: 15138M
[09/18 23:12:37 d2.utils.events]:  eta: 8:17:02  iter: 10699  total_loss: 5.2  loss_cls: 0.04587  loss_box_reg: 0.2206  loss_dis_0: 2.568  loss_dis_1: 2.387  time: 2.0829  data_time: 0.0636  lr: 0.002  max_mem: 15138M
[09/18 23:13:19 d2.utils.events]:  eta: 8:16:18  iter: 10719  total_loss: 5.369  loss_cls: 0.04945  loss_box_reg: 0.2446  loss_dis_0: 2.691  loss_dis_1: 2.396  time: 2.0830  data_time: 0.0575  lr: 0.002  max_mem: 15138M
[09/18 23:14:01 d2.utils.events]:  eta: 8:15:32  iter: 10739  total_loss: 5.8  loss_cls: 0.06758  loss_box_reg: 0.2793  loss_dis_0: 2.64  loss_dis_1: 2.813  time: 2.0829  data_time: 0.0631  lr: 0.002  max_mem: 15138M
[09/18 23:14:43 d2.utils.events]:  eta: 8:14:50  iter: 10759  total_loss: 5.577  loss_cls: 0.09175  loss_box_reg: 0.324  loss_dis_0: 2.563  loss_dis_1: 2.613  time: 2.0830  data_time: 0.0629  lr: 0.002  max_mem: 15138M
[09/18 23:15:24 d2.utils.events]:  eta: 8:14:14  iter: 10779  total_loss: 5.378  loss_cls: 0.0698  loss_box_reg: 0.2913  loss_dis_0: 2.596  loss_dis_1: 2.419  time: 2.0830  data_time: 0.0610  lr: 0.002  max_mem: 15138M
[09/18 23:16:06 d2.utils.events]:  eta: 8:13:31  iter: 10799  total_loss: 5.429  loss_cls: 0.08573  loss_box_reg: 0.3063  loss_dis_0: 2.794  loss_dis_1: 2.275  time: 2.0830  data_time: 0.0632  lr: 0.002  max_mem: 15138M
[09/18 23:16:48 d2.utils.events]:  eta: 8:12:55  iter: 10819  total_loss: 5.459  loss_cls: 0.08228  loss_box_reg: 0.3259  loss_dis_0: 2.543  loss_dis_1: 2.538  time: 2.0830  data_time: 0.0652  lr: 0.002  max_mem: 15138M
[09/18 23:17:30 d2.utils.events]:  eta: 8:12:10  iter: 10839  total_loss: 5.413  loss_cls: 0.07229  loss_box_reg: 0.2834  loss_dis_0: 2.468  loss_dis_1: 2.607  time: 2.0830  data_time: 0.0635  lr: 0.002  max_mem: 15138M
[09/18 23:18:11 d2.utils.events]:  eta: 8:11:30  iter: 10859  total_loss: 5.599  loss_cls: 0.08338  loss_box_reg: 0.3022  loss_dis_0: 2.619  loss_dis_1: 2.644  time: 2.0830  data_time: 0.0705  lr: 0.002  max_mem: 15138M
[09/18 23:18:53 d2.utils.events]:  eta: 8:10:47  iter: 10879  total_loss: 5.503  loss_cls: 0.0803  loss_box_reg: 0.3205  loss_dis_0: 2.67  loss_dis_1: 2.414  time: 2.0830  data_time: 0.0665  lr: 0.002  max_mem: 15138M
[09/18 23:19:35 d2.utils.events]:  eta: 8:10:05  iter: 10899  total_loss: 5.558  loss_cls: 0.1023  loss_box_reg: 0.3372  loss_dis_0: 2.738  loss_dis_1: 2.35  time: 2.0830  data_time: 0.0595  lr: 0.002  max_mem: 15138M
[09/18 23:20:17 d2.utils.events]:  eta: 8:09:20  iter: 10919  total_loss: 5.731  loss_cls: 0.08094  loss_box_reg: 0.3203  loss_dis_0: 2.89  loss_dis_1: 2.426  time: 2.0830  data_time: 0.0558  lr: 0.002  max_mem: 15138M
[09/18 23:20:58 d2.utils.events]:  eta: 8:08:44  iter: 10939  total_loss: 5.527  loss_cls: 0.08596  loss_box_reg: 0.3071  loss_dis_0: 2.678  loss_dis_1: 2.458  time: 2.0830  data_time: 0.0637  lr: 0.002  max_mem: 15138M
[09/18 23:21:40 d2.utils.events]:  eta: 8:08:03  iter: 10959  total_loss: 5.358  loss_cls: 0.07483  loss_box_reg: 0.2861  loss_dis_0: 2.55  loss_dis_1: 2.48  time: 2.0830  data_time: 0.0549  lr: 0.002  max_mem: 15138M
[09/18 23:22:22 d2.utils.events]:  eta: 8:07:24  iter: 10979  total_loss: 5.346  loss_cls: 0.06076  loss_box_reg: 0.2689  loss_dis_0: 2.617  loss_dis_1: 2.404  time: 2.0830  data_time: 0.0560  lr: 0.002  max_mem: 15138M
[09/18 23:23:04 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0010999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/18 23:23:06 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/18 23:23:06 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/18 23:23:06 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/18 23:23:06 d2.evaluation.evaluator]: Start inference on 188 batches
[09/18 23:23:21 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0032 s / iter. Inference: 0.4804 s / iter. Eval: 0.0013 s / iter. Total: 0.4849 s / iter. ETA=0:01:25
[09/18 23:23:27 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0024 s / iter. Inference: 0.4888 s / iter. Eval: 0.0013 s / iter. Total: 0.4926 s / iter. ETA=0:01:21
[09/18 23:23:32 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0021 s / iter. Inference: 0.4881 s / iter. Eval: 0.0012 s / iter. Total: 0.4915 s / iter. ETA=0:01:16
[09/18 23:23:37 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0019 s / iter. Inference: 0.4817 s / iter. Eval: 0.0012 s / iter. Total: 0.4850 s / iter. ETA=0:01:09
[09/18 23:23:42 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0018 s / iter. Inference: 0.4782 s / iter. Eval: 0.0012 s / iter. Total: 0.4813 s / iter. ETA=0:01:04
[09/18 23:23:48 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0017 s / iter. Inference: 0.4778 s / iter. Eval: 0.0012 s / iter. Total: 0.4808 s / iter. ETA=0:00:58
[09/18 23:23:53 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0017 s / iter. Inference: 0.4786 s / iter. Eval: 0.0012 s / iter. Total: 0.4816 s / iter. ETA=0:00:53
[09/18 23:23:58 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0017 s / iter. Inference: 0.4753 s / iter. Eval: 0.0012 s / iter. Total: 0.4782 s / iter. ETA=0:00:47
[09/18 23:24:03 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0017 s / iter. Inference: 0.4711 s / iter. Eval: 0.0012 s / iter. Total: 0.4740 s / iter. ETA=0:00:41
[09/18 23:24:09 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0017 s / iter. Inference: 0.4723 s / iter. Eval: 0.0012 s / iter. Total: 0.4753 s / iter. ETA=0:00:36
[09/18 23:24:14 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0017 s / iter. Inference: 0.4730 s / iter. Eval: 0.0012 s / iter. Total: 0.4759 s / iter. ETA=0:00:31
[09/18 23:24:19 d2.evaluation.evaluator]: Inference done 134/188. Dataloading: 0.0017 s / iter. Inference: 0.4707 s / iter. Eval: 0.0012 s / iter. Total: 0.4737 s / iter. ETA=0:00:25
[09/18 23:24:25 d2.evaluation.evaluator]: Inference done 146/188. Dataloading: 0.0017 s / iter. Inference: 0.4682 s / iter. Eval: 0.0012 s / iter. Total: 0.4712 s / iter. ETA=0:00:19
[09/18 23:24:30 d2.evaluation.evaluator]: Inference done 157/188. Dataloading: 0.0018 s / iter. Inference: 0.4684 s / iter. Eval: 0.0012 s / iter. Total: 0.4715 s / iter. ETA=0:00:14
[09/18 23:24:35 d2.evaluation.evaluator]: Inference done 169/188. Dataloading: 0.0018 s / iter. Inference: 0.4666 s / iter. Eval: 0.0012 s / iter. Total: 0.4696 s / iter. ETA=0:00:08
[09/18 23:24:40 d2.evaluation.evaluator]: Inference done 180/188. Dataloading: 0.0017 s / iter. Inference: 0.4663 s / iter. Eval: 0.0012 s / iter. Total: 0.4693 s / iter. ETA=0:00:03
[09/18 23:25:04 d2.evaluation.evaluator]: Total inference time: 0:01:45.711887 (0.577661 s / iter per device, on 8 devices)
[09/18 23:25:04 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:25 (0.465189 s / iter per device, on 8 devices)
[09/18 23:25:05 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[55.25605856749913, 57.884888921620195, 68.65312592936245, 36.44514855108597, 60.048869621938074, 44.581886936976645, 41.353893994098115, 55.30999546427573]
[09/18 23:26:01 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/18 23:26:01 d2.evaluation.testing]: copypaste: Task: bbox
[09/18 23:26:01 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/18 23:26:01 d2.evaluation.testing]: copypaste: 29.2308,52.4417,28.7135
[09/18 23:26:01 d2.utils.events]:  eta: 8:06:43  iter: 10999  total_loss: 5.31  loss_cls: 0.05052  loss_box_reg: 0.2299  loss_dis_0: 2.522  loss_dis_1: 2.486  time: 2.0830  data_time: 0.0523  lr: 0.002  max_mem: 15138M
[09/18 23:26:42 d2.utils.events]:  eta: 8:06:01  iter: 11019  total_loss: 5.306  loss_cls: 0.04683  loss_box_reg: 0.2289  loss_dis_0: 2.547  loss_dis_1: 2.482  time: 2.0830  data_time: 0.0622  lr: 0.002  max_mem: 15138M
[09/18 23:27:24 d2.utils.events]:  eta: 8:05:18  iter: 11039  total_loss: 5.316  loss_cls: 0.04983  loss_box_reg: 0.2387  loss_dis_0: 2.442  loss_dis_1: 2.577  time: 2.0830  data_time: 0.0634  lr: 0.002  max_mem: 15138M
[09/18 23:28:05 d2.utils.events]:  eta: 8:04:36  iter: 11059  total_loss: 5.255  loss_cls: 0.05001  loss_box_reg: 0.2314  loss_dis_0: 2.45  loss_dis_1: 2.54  time: 2.0830  data_time: 0.0656  lr: 0.002  max_mem: 15138M
[09/18 23:28:47 d2.utils.events]:  eta: 8:03:51  iter: 11079  total_loss: 5.255  loss_cls: 0.04638  loss_box_reg: 0.2289  loss_dis_0: 2.376  loss_dis_1: 2.595  time: 2.0829  data_time: 0.0599  lr: 0.002  max_mem: 15138M
[09/18 23:29:28 d2.utils.events]:  eta: 8:03:01  iter: 11099  total_loss: 5.294  loss_cls: 0.05071  loss_box_reg: 0.2531  loss_dis_0: 2.423  loss_dis_1: 2.562  time: 2.0829  data_time: 0.0644  lr: 0.002  max_mem: 15138M
[09/18 23:30:09 d2.utils.events]:  eta: 8:02:19  iter: 11119  total_loss: 5.282  loss_cls: 0.04923  loss_box_reg: 0.2307  loss_dis_0: 2.473  loss_dis_1: 2.52  time: 2.0829  data_time: 0.0646  lr: 0.002  max_mem: 15138M
[09/18 23:30:51 d2.utils.events]:  eta: 8:01:34  iter: 11139  total_loss: 5.273  loss_cls: 0.05174  loss_box_reg: 0.2488  loss_dis_0: 2.509  loss_dis_1: 2.468  time: 2.0829  data_time: 0.0655  lr: 0.002  max_mem: 15138M
[09/18 23:31:33 d2.utils.events]:  eta: 8:00:53  iter: 11159  total_loss: 5.254  loss_cls: 0.04924  loss_box_reg: 0.2421  loss_dis_0: 2.527  loss_dis_1: 2.448  time: 2.0829  data_time: 0.0623  lr: 0.002  max_mem: 15138M
[09/18 23:32:14 d2.utils.events]:  eta: 8:00:11  iter: 11179  total_loss: 5.264  loss_cls: 0.05125  loss_box_reg: 0.2478  loss_dis_0: 2.587  loss_dis_1: 2.397  time: 2.0829  data_time: 0.0648  lr: 0.002  max_mem: 15138M
[09/18 23:32:56 d2.utils.events]:  eta: 7:59:28  iter: 11199  total_loss: 5.269  loss_cls: 0.04696  loss_box_reg: 0.2245  loss_dis_0: 2.568  loss_dis_1: 2.431  time: 2.0829  data_time: 0.0667  lr: 0.002  max_mem: 15138M
[09/18 23:33:38 d2.utils.events]:  eta: 7:58:46  iter: 11219  total_loss: 5.244  loss_cls: 0.04456  loss_box_reg: 0.2244  loss_dis_0: 2.456  loss_dis_1: 2.516  time: 2.0828  data_time: 0.0607  lr: 0.002  max_mem: 15138M
[09/18 23:34:20 d2.utils.events]:  eta: 7:58:01  iter: 11239  total_loss: 5.246  loss_cls: 0.04989  loss_box_reg: 0.2259  loss_dis_0: 2.558  loss_dis_1: 2.403  time: 2.0829  data_time: 0.0636  lr: 0.002  max_mem: 15138M
[09/18 23:35:01 d2.utils.events]:  eta: 7:57:16  iter: 11259  total_loss: 5.227  loss_cls: 0.04632  loss_box_reg: 0.2291  loss_dis_0: 2.497  loss_dis_1: 2.445  time: 2.0829  data_time: 0.0600  lr: 0.002  max_mem: 15138M
[09/18 23:35:43 d2.utils.events]:  eta: 7:56:35  iter: 11279  total_loss: 5.256  loss_cls: 0.04716  loss_box_reg: 0.2374  loss_dis_0: 2.499  loss_dis_1: 2.458  time: 2.0829  data_time: 0.0624  lr: 0.002  max_mem: 15138M
[09/18 23:36:25 d2.utils.events]:  eta: 7:55:54  iter: 11299  total_loss: 5.34  loss_cls: 0.04703  loss_box_reg: 0.2384  loss_dis_0: 2.734  loss_dis_1: 2.314  time: 2.0829  data_time: 0.0578  lr: 0.002  max_mem: 15138M
[09/18 23:37:06 d2.utils.events]:  eta: 7:55:11  iter: 11319  total_loss: 5.247  loss_cls: 0.04517  loss_box_reg: 0.2251  loss_dis_0: 2.53  loss_dis_1: 2.458  time: 2.0829  data_time: 0.0577  lr: 0.002  max_mem: 15138M
[09/18 23:37:48 d2.utils.events]:  eta: 7:54:30  iter: 11339  total_loss: 5.237  loss_cls: 0.04354  loss_box_reg: 0.2134  loss_dis_0: 2.353  loss_dis_1: 2.642  time: 2.0829  data_time: 0.0595  lr: 0.002  max_mem: 15138M
[09/18 23:38:30 d2.utils.events]:  eta: 7:53:48  iter: 11359  total_loss: 5.25  loss_cls: 0.04091  loss_box_reg: 0.2244  loss_dis_0: 2.469  loss_dis_1: 2.503  time: 2.0829  data_time: 0.0562  lr: 0.002  max_mem: 15138M
[09/18 23:39:12 d2.utils.events]:  eta: 7:53:06  iter: 11379  total_loss: 5.245  loss_cls: 0.04268  loss_box_reg: 0.2271  loss_dis_0: 2.443  loss_dis_1: 2.545  time: 2.0829  data_time: 0.0583  lr: 0.002  max_mem: 15138M
[09/18 23:39:53 d2.utils.events]:  eta: 7:52:25  iter: 11399  total_loss: 5.26  loss_cls: 0.04434  loss_box_reg: 0.2182  loss_dis_0: 2.606  loss_dis_1: 2.39  time: 2.0829  data_time: 0.0658  lr: 0.002  max_mem: 15138M
[09/18 23:40:35 d2.utils.events]:  eta: 7:51:41  iter: 11419  total_loss: 5.303  loss_cls: 0.04679  loss_box_reg: 0.2274  loss_dis_0: 2.56  loss_dis_1: 2.445  time: 2.0829  data_time: 0.0613  lr: 0.002  max_mem: 15138M
[09/18 23:41:17 d2.utils.events]:  eta: 7:51:00  iter: 11439  total_loss: 5.33  loss_cls: 0.0451  loss_box_reg: 0.2192  loss_dis_0: 2.584  loss_dis_1: 2.479  time: 2.0829  data_time: 0.0615  lr: 0.002  max_mem: 15138M
[09/18 23:41:59 d2.utils.events]:  eta: 7:50:21  iter: 11459  total_loss: 5.335  loss_cls: 0.0476  loss_box_reg: 0.2459  loss_dis_0: 2.45  loss_dis_1: 2.578  time: 2.0829  data_time: 0.0633  lr: 0.002  max_mem: 15138M
[09/18 23:42:41 d2.utils.events]:  eta: 7:49:42  iter: 11479  total_loss: 5.303  loss_cls: 0.05227  loss_box_reg: 0.2535  loss_dis_0: 2.404  loss_dis_1: 2.619  time: 2.0829  data_time: 0.0709  lr: 0.002  max_mem: 15138M
[09/18 23:43:22 d2.utils.events]:  eta: 7:49:01  iter: 11499  total_loss: 5.304  loss_cls: 0.05409  loss_box_reg: 0.2431  loss_dis_0: 2.43  loss_dis_1: 2.593  time: 2.0829  data_time: 0.0646  lr: 0.002  max_mem: 15138M
[09/18 23:44:04 d2.utils.events]:  eta: 7:48:14  iter: 11519  total_loss: 5.216  loss_cls: 0.05776  loss_box_reg: 0.2515  loss_dis_0: 2.42  loss_dis_1: 2.426  time: 2.0829  data_time: 0.0598  lr: 0.002  max_mem: 15138M
[09/18 23:44:45 d2.utils.events]:  eta: 7:47:31  iter: 11539  total_loss: 5.305  loss_cls: 0.05329  loss_box_reg: 0.2382  loss_dis_0: 2.361  loss_dis_1: 2.646  time: 2.0829  data_time: 0.0692  lr: 0.002  max_mem: 15138M
[09/18 23:45:27 d2.utils.events]:  eta: 7:46:49  iter: 11559  total_loss: 5.295  loss_cls: 0.04785  loss_box_reg: 0.2275  loss_dis_0: 2.464  loss_dis_1: 2.552  time: 2.0829  data_time: 0.0537  lr: 0.002  max_mem: 15138M
[09/18 23:46:09 d2.utils.events]:  eta: 7:46:06  iter: 11579  total_loss: 5.29  loss_cls: 0.04592  loss_box_reg: 0.228  loss_dis_0: 2.508  loss_dis_1: 2.517  time: 2.0829  data_time: 0.0670  lr: 0.002  max_mem: 15138M
[09/18 23:46:50 d2.utils.events]:  eta: 7:45:25  iter: 11599  total_loss: 5.318  loss_cls: 0.04405  loss_box_reg: 0.2265  loss_dis_0: 2.557  loss_dis_1: 2.476  time: 2.0829  data_time: 0.0755  lr: 0.002  max_mem: 15138M
[09/18 23:47:32 d2.utils.events]:  eta: 7:44:43  iter: 11619  total_loss: 5.303  loss_cls: 0.0484  loss_box_reg: 0.2316  loss_dis_0: 2.547  loss_dis_1: 2.491  time: 2.0829  data_time: 0.0538  lr: 0.002  max_mem: 15138M
[09/18 23:48:14 d2.utils.events]:  eta: 7:44:04  iter: 11639  total_loss: 5.34  loss_cls: 0.04778  loss_box_reg: 0.2385  loss_dis_0: 2.556  loss_dis_1: 2.493  time: 2.0829  data_time: 0.0689  lr: 0.002  max_mem: 15138M
[09/18 23:48:56 d2.utils.events]:  eta: 7:43:20  iter: 11659  total_loss: 5.321  loss_cls: 0.04562  loss_box_reg: 0.23  loss_dis_0: 2.578  loss_dis_1: 2.461  time: 2.0829  data_time: 0.0529  lr: 0.002  max_mem: 15138M
[09/18 23:49:37 d2.utils.events]:  eta: 7:42:38  iter: 11679  total_loss: 5.291  loss_cls: 0.0435  loss_box_reg: 0.2162  loss_dis_0: 2.611  loss_dis_1: 2.434  time: 2.0829  data_time: 0.0524  lr: 0.002  max_mem: 15138M
[09/18 23:50:19 d2.utils.events]:  eta: 7:41:56  iter: 11699  total_loss: 5.314  loss_cls: 0.04826  loss_box_reg: 0.2309  loss_dis_0: 2.618  loss_dis_1: 2.421  time: 2.0829  data_time: 0.0479  lr: 0.002  max_mem: 15138M
[09/18 23:51:00 d2.utils.events]:  eta: 7:41:13  iter: 11719  total_loss: 5.289  loss_cls: 0.04339  loss_box_reg: 0.211  loss_dis_0: 2.612  loss_dis_1: 2.42  time: 2.0829  data_time: 0.0720  lr: 0.002  max_mem: 15138M
[09/18 23:51:42 d2.utils.events]:  eta: 7:40:33  iter: 11739  total_loss: 5.286  loss_cls: 0.04135  loss_box_reg: 0.218  loss_dis_0: 2.6  loss_dis_1: 2.423  time: 2.0829  data_time: 0.0666  lr: 0.002  max_mem: 15138M
[09/18 23:52:24 d2.utils.events]:  eta: 7:39:44  iter: 11759  total_loss: 5.285  loss_cls: 0.04747  loss_box_reg: 0.2271  loss_dis_0: 2.59  loss_dis_1: 2.422  time: 2.0828  data_time: 0.0594  lr: 0.002  max_mem: 15138M
[09/18 23:53:05 d2.utils.events]:  eta: 7:39:01  iter: 11779  total_loss: 5.267  loss_cls: 0.0434  loss_box_reg: 0.2129  loss_dis_0: 2.556  loss_dis_1: 2.454  time: 2.0828  data_time: 0.0647  lr: 0.002  max_mem: 15138M
[09/18 23:53:47 d2.utils.events]:  eta: 7:38:17  iter: 11799  total_loss: 5.271  loss_cls: 0.04643  loss_box_reg: 0.2096  loss_dis_0: 2.526  loss_dis_1: 2.463  time: 2.0828  data_time: 0.0586  lr: 0.002  max_mem: 15138M
[09/18 23:54:28 d2.utils.events]:  eta: 7:37:28  iter: 11819  total_loss: 5.239  loss_cls: 0.04372  loss_box_reg: 0.2061  loss_dis_0: 2.517  loss_dis_1: 2.482  time: 2.0828  data_time: 0.0598  lr: 0.002  max_mem: 15138M
[09/18 23:55:10 d2.utils.events]:  eta: 7:36:50  iter: 11839  total_loss: 5.294  loss_cls: 0.05104  loss_box_reg: 0.2479  loss_dis_0: 2.52  loss_dis_1: 2.481  time: 2.0828  data_time: 0.0646  lr: 0.002  max_mem: 15138M
[09/18 23:55:52 d2.utils.events]:  eta: 7:36:02  iter: 11859  total_loss: 5.283  loss_cls: 0.04459  loss_box_reg: 0.2435  loss_dis_0: 2.503  loss_dis_1: 2.498  time: 2.0828  data_time: 0.0522  lr: 0.002  max_mem: 15138M
[09/18 23:56:34 d2.utils.events]:  eta: 7:35:23  iter: 11879  total_loss: 5.275  loss_cls: 0.04497  loss_box_reg: 0.2398  loss_dis_0: 2.511  loss_dis_1: 2.483  time: 2.0828  data_time: 0.0643  lr: 0.002  max_mem: 15138M
[09/18 23:57:15 d2.utils.events]:  eta: 7:34:41  iter: 11899  total_loss: 5.263  loss_cls: 0.04406  loss_box_reg: 0.2147  loss_dis_0: 2.509  loss_dis_1: 2.494  time: 2.0828  data_time: 0.0604  lr: 0.002  max_mem: 15138M
[09/18 23:57:57 d2.utils.events]:  eta: 7:34:00  iter: 11919  total_loss: 5.251  loss_cls: 0.04275  loss_box_reg: 0.2095  loss_dis_0: 2.516  loss_dis_1: 2.484  time: 2.0828  data_time: 0.0501  lr: 0.002  max_mem: 15138M
[09/18 23:58:39 d2.utils.events]:  eta: 7:33:17  iter: 11939  total_loss: 5.25  loss_cls: 0.03919  loss_box_reg: 0.215  loss_dis_0: 2.498  loss_dis_1: 2.5  time: 2.0828  data_time: 0.0623  lr: 0.002  max_mem: 15138M
[09/18 23:59:20 d2.utils.events]:  eta: 7:32:42  iter: 11959  total_loss: 5.248  loss_cls: 0.04047  loss_box_reg: 0.2154  loss_dis_0: 2.521  loss_dis_1: 2.47  time: 2.0828  data_time: 0.0583  lr: 0.002  max_mem: 15138M
[09/19 00:00:02 d2.utils.events]:  eta: 7:31:51  iter: 11979  total_loss: 5.269  loss_cls: 0.04447  loss_box_reg: 0.2283  loss_dis_0: 2.531  loss_dis_1: 2.464  time: 2.0828  data_time: 0.0626  lr: 0.002  max_mem: 15138M
[09/19 00:00:44 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0011999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 00:00:46 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 00:00:46 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 00:00:46 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 00:00:46 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 00:01:01 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0011 s / iter. Inference: 0.4666 s / iter. Eval: 0.0012 s / iter. Total: 0.4689 s / iter. ETA=0:01:22
[09/19 00:01:06 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0013 s / iter. Inference: 0.4730 s / iter. Eval: 0.0011 s / iter. Total: 0.4755 s / iter. ETA=0:01:18
[09/19 00:01:11 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0016 s / iter. Inference: 0.4744 s / iter. Eval: 0.0012 s / iter. Total: 0.4772 s / iter. ETA=0:01:13
[09/19 00:01:16 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0016 s / iter. Inference: 0.4713 s / iter. Eval: 0.0012 s / iter. Total: 0.4741 s / iter. ETA=0:01:08
[09/19 00:01:22 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0016 s / iter. Inference: 0.4693 s / iter. Eval: 0.0012 s / iter. Total: 0.4721 s / iter. ETA=0:01:02
[09/19 00:01:27 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0017 s / iter. Inference: 0.4738 s / iter. Eval: 0.0012 s / iter. Total: 0.4768 s / iter. ETA=0:00:58
[09/19 00:01:32 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0019 s / iter. Inference: 0.4730 s / iter. Eval: 0.0012 s / iter. Total: 0.4762 s / iter. ETA=0:00:52
[09/19 00:01:37 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0020 s / iter. Inference: 0.4718 s / iter. Eval: 0.0012 s / iter. Total: 0.4751 s / iter. ETA=0:00:47
[09/19 00:01:43 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0019 s / iter. Inference: 0.4678 s / iter. Eval: 0.0012 s / iter. Total: 0.4710 s / iter. ETA=0:00:41
[09/19 00:01:48 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0019 s / iter. Inference: 0.4700 s / iter. Eval: 0.0012 s / iter. Total: 0.4732 s / iter. ETA=0:00:36
[09/19 00:01:53 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0019 s / iter. Inference: 0.4707 s / iter. Eval: 0.0012 s / iter. Total: 0.4739 s / iter. ETA=0:00:31
[09/19 00:01:59 d2.evaluation.evaluator]: Inference done 134/188. Dataloading: 0.0019 s / iter. Inference: 0.4682 s / iter. Eval: 0.0012 s / iter. Total: 0.4714 s / iter. ETA=0:00:25
[09/19 00:02:04 d2.evaluation.evaluator]: Inference done 146/188. Dataloading: 0.0019 s / iter. Inference: 0.4654 s / iter. Eval: 0.0012 s / iter. Total: 0.4685 s / iter. ETA=0:00:19
[09/19 00:02:09 d2.evaluation.evaluator]: Inference done 157/188. Dataloading: 0.0019 s / iter. Inference: 0.4661 s / iter. Eval: 0.0012 s / iter. Total: 0.4692 s / iter. ETA=0:00:14
[09/19 00:02:15 d2.evaluation.evaluator]: Inference done 169/188. Dataloading: 0.0018 s / iter. Inference: 0.4648 s / iter. Eval: 0.0012 s / iter. Total: 0.4678 s / iter. ETA=0:00:08
[09/19 00:02:20 d2.evaluation.evaluator]: Inference done 181/188. Dataloading: 0.0018 s / iter. Inference: 0.4639 s / iter. Eval: 0.0012 s / iter. Total: 0.4669 s / iter. ETA=0:00:03
[09/19 00:02:43 d2.evaluation.evaluator]: Total inference time: 0:01:45.320575 (0.575522 s / iter per device, on 8 devices)
[09/19 00:02:43 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.462987 s / iter per device, on 8 devices)
[09/19 00:02:45 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[57.290718680208904, 62.25836829741791, 70.93534928232324, 41.37576366822327, 63.0632511167448, 53.24158631459542, 43.477268159573676, 58.11319640000718]
[09/19 00:03:41 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 00:03:41 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 00:03:41 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 00:03:41 d2.evaluation.testing]: copypaste: 32.0341,56.2194,31.6550
[09/19 00:03:41 d2.utils.events]:  eta: 7:31:12  iter: 11999  total_loss: 5.259  loss_cls: 0.04445  loss_box_reg: 0.2255  loss_dis_0: 2.463  loss_dis_1: 2.519  time: 2.0828  data_time: 0.0639  lr: 0.002  max_mem: 15138M
[09/19 00:04:22 d2.utils.events]:  eta: 7:30:30  iter: 12019  total_loss: 5.267  loss_cls: 0.04176  loss_box_reg: 0.2135  loss_dis_0: 2.482  loss_dis_1: 2.521  time: 2.0828  data_time: 0.0553  lr: 0.002  max_mem: 15138M
[09/19 00:05:04 d2.utils.events]:  eta: 7:29:53  iter: 12039  total_loss: 5.271  loss_cls: 0.04354  loss_box_reg: 0.2287  loss_dis_0: 2.476  loss_dis_1: 2.523  time: 2.0828  data_time: 0.0671  lr: 0.002  max_mem: 15138M
[09/19 00:05:45 d2.utils.events]:  eta: 7:29:13  iter: 12059  total_loss: 5.27  loss_cls: 0.04112  loss_box_reg: 0.2204  loss_dis_0: 2.485  loss_dis_1: 2.512  time: 2.0828  data_time: 0.0539  lr: 0.002  max_mem: 15138M
[09/19 00:06:27 d2.utils.events]:  eta: 7:28:37  iter: 12079  total_loss: 5.276  loss_cls: 0.03981  loss_box_reg: 0.2207  loss_dis_0: 2.498  loss_dis_1: 2.507  time: 2.0828  data_time: 0.0638  lr: 0.002  max_mem: 15138M
[09/19 00:07:09 d2.utils.events]:  eta: 7:28:01  iter: 12099  total_loss: 5.288  loss_cls: 0.04745  loss_box_reg: 0.2352  loss_dis_0: 2.508  loss_dis_1: 2.497  time: 2.0828  data_time: 0.0603  lr: 0.002  max_mem: 15138M
[09/19 00:07:50 d2.utils.events]:  eta: 7:27:23  iter: 12119  total_loss: 5.249  loss_cls: 0.04385  loss_box_reg: 0.2125  loss_dis_0: 2.553  loss_dis_1: 2.44  time: 2.0828  data_time: 0.0602  lr: 0.002  max_mem: 15138M
[09/19 00:08:32 d2.utils.events]:  eta: 7:26:42  iter: 12139  total_loss: 5.273  loss_cls: 0.0423  loss_box_reg: 0.2272  loss_dis_0: 2.491  loss_dis_1: 2.508  time: 2.0828  data_time: 0.0604  lr: 0.002  max_mem: 15138M
[09/19 00:09:14 d2.utils.events]:  eta: 7:25:58  iter: 12159  total_loss: 5.267  loss_cls: 0.04184  loss_box_reg: 0.2233  loss_dis_0: 2.482  loss_dis_1: 2.52  time: 2.0828  data_time: 0.0633  lr: 0.002  max_mem: 15138M
[09/19 00:09:56 d2.utils.events]:  eta: 7:25:18  iter: 12179  total_loss: 5.268  loss_cls: 0.04169  loss_box_reg: 0.2175  loss_dis_0: 2.494  loss_dis_1: 2.51  time: 2.0828  data_time: 0.0701  lr: 0.002  max_mem: 15138M
[09/19 00:10:37 d2.utils.events]:  eta: 7:24:37  iter: 12199  total_loss: 5.274  loss_cls: 0.04202  loss_box_reg: 0.2282  loss_dis_0: 2.493  loss_dis_1: 2.502  time: 2.0828  data_time: 0.0601  lr: 0.002  max_mem: 15138M
[09/19 00:11:19 d2.utils.events]:  eta: 7:23:55  iter: 12219  total_loss: 5.263  loss_cls: 0.04458  loss_box_reg: 0.2289  loss_dis_0: 2.503  loss_dis_1: 2.495  time: 2.0828  data_time: 0.0686  lr: 0.002  max_mem: 15138M
[09/19 00:12:01 d2.utils.events]:  eta: 7:23:13  iter: 12239  total_loss: 5.279  loss_cls: 0.04558  loss_box_reg: 0.234  loss_dis_0: 2.511  loss_dis_1: 2.497  time: 2.0828  data_time: 0.0600  lr: 0.002  max_mem: 15138M
[09/19 00:12:43 d2.utils.events]:  eta: 7:22:32  iter: 12259  total_loss: 5.265  loss_cls: 0.04291  loss_box_reg: 0.2152  loss_dis_0: 2.503  loss_dis_1: 2.505  time: 2.0828  data_time: 0.0625  lr: 0.002  max_mem: 15138M
[09/19 00:13:25 d2.utils.events]:  eta: 7:21:51  iter: 12279  total_loss: 5.262  loss_cls: 0.04162  loss_box_reg: 0.2227  loss_dis_0: 2.498  loss_dis_1: 2.51  time: 2.0828  data_time: 0.0651  lr: 0.002  max_mem: 15138M
[09/19 00:14:06 d2.utils.events]:  eta: 7:21:08  iter: 12299  total_loss: 5.278  loss_cls: 0.04333  loss_box_reg: 0.2264  loss_dis_0: 2.502  loss_dis_1: 2.505  time: 2.0828  data_time: 0.0616  lr: 0.002  max_mem: 15138M
[09/19 00:14:48 d2.utils.events]:  eta: 7:20:30  iter: 12319  total_loss: 5.275  loss_cls: 0.04421  loss_box_reg: 0.2277  loss_dis_0: 2.5  loss_dis_1: 2.502  time: 2.0828  data_time: 0.0658  lr: 0.002  max_mem: 15138M
[09/19 00:15:30 d2.utils.events]:  eta: 7:19:47  iter: 12339  total_loss: 5.279  loss_cls: 0.04278  loss_box_reg: 0.2114  loss_dis_0: 2.507  loss_dis_1: 2.501  time: 2.0828  data_time: 0.0732  lr: 0.002  max_mem: 15138M
[09/19 00:16:12 d2.utils.events]:  eta: 7:19:05  iter: 12359  total_loss: 5.276  loss_cls: 0.04433  loss_box_reg: 0.2278  loss_dis_0: 2.503  loss_dis_1: 2.5  time: 2.0829  data_time: 0.0633  lr: 0.002  max_mem: 15138M
[09/19 00:16:54 d2.utils.events]:  eta: 7:18:22  iter: 12379  total_loss: 5.279  loss_cls: 0.0441  loss_box_reg: 0.2318  loss_dis_0: 2.51  loss_dis_1: 2.499  time: 2.0828  data_time: 0.0577  lr: 0.002  max_mem: 15138M
[09/19 00:17:35 d2.utils.events]:  eta: 7:17:43  iter: 12399  total_loss: 5.27  loss_cls: 0.04341  loss_box_reg: 0.2256  loss_dis_0: 2.52  loss_dis_1: 2.487  time: 2.0829  data_time: 0.0704  lr: 0.002  max_mem: 15138M
[09/19 00:18:17 d2.utils.events]:  eta: 7:17:03  iter: 12419  total_loss: 5.276  loss_cls: 0.04421  loss_box_reg: 0.2306  loss_dis_0: 2.513  loss_dis_1: 2.485  time: 2.0829  data_time: 0.0699  lr: 0.002  max_mem: 15138M
[09/19 00:18:59 d2.utils.events]:  eta: 7:16:20  iter: 12439  total_loss: 5.274  loss_cls: 0.04807  loss_box_reg: 0.2325  loss_dis_0: 2.511  loss_dis_1: 2.488  time: 2.0829  data_time: 0.0618  lr: 0.002  max_mem: 15138M
[09/19 00:19:41 d2.utils.events]:  eta: 7:15:34  iter: 12459  total_loss: 5.27  loss_cls: 0.04325  loss_box_reg: 0.2312  loss_dis_0: 2.509  loss_dis_1: 2.49  time: 2.0829  data_time: 0.0554  lr: 0.002  max_mem: 15138M
[09/19 00:20:23 d2.utils.events]:  eta: 7:14:54  iter: 12479  total_loss: 5.274  loss_cls: 0.04509  loss_box_reg: 0.2247  loss_dis_0: 2.508  loss_dis_1: 2.493  time: 2.0829  data_time: 0.0583  lr: 0.002  max_mem: 15138M
[09/19 00:21:04 d2.utils.events]:  eta: 7:14:14  iter: 12499  total_loss: 5.249  loss_cls: 0.04279  loss_box_reg: 0.2181  loss_dis_0: 2.499  loss_dis_1: 2.499  time: 2.0829  data_time: 0.0513  lr: 0.002  max_mem: 15138M
[09/19 00:21:46 d2.utils.events]:  eta: 7:13:39  iter: 12519  total_loss: 5.275  loss_cls: 0.04383  loss_box_reg: 0.2244  loss_dis_0: 2.503  loss_dis_1: 2.507  time: 2.0829  data_time: 0.0692  lr: 0.002  max_mem: 15138M
[09/19 00:22:28 d2.utils.events]:  eta: 7:13:05  iter: 12539  total_loss: 5.258  loss_cls: 0.04109  loss_box_reg: 0.2168  loss_dis_0: 2.504  loss_dis_1: 2.499  time: 2.0829  data_time: 0.0595  lr: 0.002  max_mem: 15138M
[09/19 00:23:10 d2.utils.events]:  eta: 7:12:15  iter: 12559  total_loss: 5.261  loss_cls: 0.04237  loss_box_reg: 0.2101  loss_dis_0: 2.506  loss_dis_1: 2.493  time: 2.0829  data_time: 0.0638  lr: 0.002  max_mem: 15138M
[09/19 00:23:52 d2.utils.events]:  eta: 7:11:35  iter: 12579  total_loss: 5.27  loss_cls: 0.04267  loss_box_reg: 0.2176  loss_dis_0: 2.513  loss_dis_1: 2.497  time: 2.0829  data_time: 0.0651  lr: 0.002  max_mem: 15138M
[09/19 00:24:34 d2.utils.events]:  eta: 7:10:54  iter: 12599  total_loss: 5.294  loss_cls: 0.04359  loss_box_reg: 0.2346  loss_dis_0: 2.503  loss_dis_1: 2.506  time: 2.0829  data_time: 0.0600  lr: 0.002  max_mem: 15138M
[09/19 00:25:15 d2.utils.events]:  eta: 7:10:12  iter: 12619  total_loss: 5.281  loss_cls: 0.04332  loss_box_reg: 0.2337  loss_dis_0: 2.498  loss_dis_1: 2.504  time: 2.0830  data_time: 0.0531  lr: 0.002  max_mem: 15138M
[09/19 00:25:57 d2.utils.events]:  eta: 7:09:26  iter: 12639  total_loss: 5.28  loss_cls: 0.04282  loss_box_reg: 0.2345  loss_dis_0: 2.502  loss_dis_1: 2.499  time: 2.0829  data_time: 0.0629  lr: 0.002  max_mem: 15138M
[09/19 00:26:39 d2.utils.events]:  eta: 7:08:45  iter: 12659  total_loss: 5.271  loss_cls: 0.04112  loss_box_reg: 0.213  loss_dis_0: 2.507  loss_dis_1: 2.502  time: 2.0829  data_time: 0.0555  lr: 0.002  max_mem: 15138M
[09/19 00:27:21 d2.utils.events]:  eta: 7:08:10  iter: 12679  total_loss: 5.261  loss_cls: 0.04358  loss_box_reg: 0.2171  loss_dis_0: 2.502  loss_dis_1: 2.503  time: 2.0830  data_time: 0.0623  lr: 0.002  max_mem: 15138M
[09/19 00:28:03 d2.utils.events]:  eta: 7:07:32  iter: 12699  total_loss: 5.271  loss_cls: 0.04188  loss_box_reg: 0.2218  loss_dis_0: 2.502  loss_dis_1: 2.501  time: 2.0830  data_time: 0.0640  lr: 0.002  max_mem: 15138M
[09/19 00:28:44 d2.utils.events]:  eta: 7:06:52  iter: 12719  total_loss: 5.26  loss_cls: 0.04233  loss_box_reg: 0.2145  loss_dis_0: 2.51  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0634  lr: 0.002  max_mem: 15138M
[09/19 00:29:26 d2.utils.events]:  eta: 7:06:09  iter: 12739  total_loss: 5.266  loss_cls: 0.03993  loss_box_reg: 0.209  loss_dis_0: 2.506  loss_dis_1: 2.499  time: 2.0830  data_time: 0.0608  lr: 0.002  max_mem: 15138M
[09/19 00:30:08 d2.utils.events]:  eta: 7:05:33  iter: 12759  total_loss: 5.263  loss_cls: 0.03957  loss_box_reg: 0.2148  loss_dis_0: 2.507  loss_dis_1: 2.502  time: 2.0830  data_time: 0.0624  lr: 0.002  max_mem: 15138M
[09/19 00:30:50 d2.utils.events]:  eta: 7:04:53  iter: 12779  total_loss: 5.258  loss_cls: 0.04238  loss_box_reg: 0.2132  loss_dis_0: 2.518  loss_dis_1: 2.492  time: 2.0830  data_time: 0.0559  lr: 0.002  max_mem: 15138M
[09/19 00:31:32 d2.utils.events]:  eta: 7:04:13  iter: 12799  total_loss: 5.301  loss_cls: 0.04437  loss_box_reg: 0.2317  loss_dis_0: 2.513  loss_dis_1: 2.494  time: 2.0830  data_time: 0.0586  lr: 0.002  max_mem: 15138M
[09/19 00:32:14 d2.utils.events]:  eta: 7:03:35  iter: 12819  total_loss: 5.277  loss_cls: 0.04361  loss_box_reg: 0.2124  loss_dis_0: 2.514  loss_dis_1: 2.503  time: 2.0831  data_time: 0.0732  lr: 0.002  max_mem: 15138M
[09/19 00:32:56 d2.utils.events]:  eta: 7:02:56  iter: 12839  total_loss: 5.267  loss_cls: 0.04278  loss_box_reg: 0.2213  loss_dis_0: 2.514  loss_dis_1: 2.49  time: 2.0831  data_time: 0.0672  lr: 0.002  max_mem: 15138M
[09/19 00:33:37 d2.utils.events]:  eta: 7:02:18  iter: 12859  total_loss: 5.281  loss_cls: 0.0442  loss_box_reg: 0.2234  loss_dis_0: 2.515  loss_dis_1: 2.493  time: 2.0831  data_time: 0.0671  lr: 0.002  max_mem: 15138M
[09/19 00:34:19 d2.utils.events]:  eta: 7:01:33  iter: 12879  total_loss: 5.267  loss_cls: 0.04498  loss_box_reg: 0.2278  loss_dis_0: 2.52  loss_dis_1: 2.492  time: 2.0831  data_time: 0.0555  lr: 0.002  max_mem: 15138M
[09/19 00:35:01 d2.utils.events]:  eta: 7:01:01  iter: 12899  total_loss: 5.253  loss_cls: 0.03862  loss_box_reg: 0.209  loss_dis_0: 2.509  loss_dis_1: 2.499  time: 2.0831  data_time: 0.0545  lr: 0.002  max_mem: 15138M
[09/19 00:35:43 d2.utils.events]:  eta: 7:00:18  iter: 12919  total_loss: 5.29  loss_cls: 0.04708  loss_box_reg: 0.237  loss_dis_0: 2.503  loss_dis_1: 2.5  time: 2.0831  data_time: 0.0639  lr: 0.002  max_mem: 15138M
[09/19 00:36:25 d2.utils.events]:  eta: 6:59:33  iter: 12939  total_loss: 5.285  loss_cls: 0.04426  loss_box_reg: 0.2239  loss_dis_0: 2.514  loss_dis_1: 2.498  time: 2.0831  data_time: 0.0560  lr: 0.002  max_mem: 15138M
[09/19 00:37:07 d2.utils.events]:  eta: 6:58:54  iter: 12959  total_loss: 5.278  loss_cls: 0.04218  loss_box_reg: 0.2243  loss_dis_0: 2.526  loss_dis_1: 2.489  time: 2.0831  data_time: 0.0600  lr: 0.002  max_mem: 15138M
[09/19 00:37:48 d2.utils.events]:  eta: 6:58:16  iter: 12979  total_loss: 5.284  loss_cls: 0.04431  loss_box_reg: 0.2318  loss_dis_0: 2.522  loss_dis_1: 2.488  time: 2.0831  data_time: 0.0610  lr: 0.002  max_mem: 15138M
[09/19 00:38:30 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0012999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 00:38:33 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 00:38:33 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 00:38:33 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 00:38:33 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 00:38:48 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0010 s / iter. Inference: 0.4732 s / iter. Eval: 0.0011 s / iter. Total: 0.4753 s / iter. ETA=0:01:24
[09/19 00:38:53 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0015 s / iter. Inference: 0.4742 s / iter. Eval: 0.0010 s / iter. Total: 0.4767 s / iter. ETA=0:01:19
[09/19 00:38:58 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0027 s / iter. Inference: 0.4767 s / iter. Eval: 0.0012 s / iter. Total: 0.4807 s / iter. ETA=0:01:14
[09/19 00:39:03 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0023 s / iter. Inference: 0.4741 s / iter. Eval: 0.0012 s / iter. Total: 0.4777 s / iter. ETA=0:01:08
[09/19 00:39:08 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0021 s / iter. Inference: 0.4702 s / iter. Eval: 0.0012 s / iter. Total: 0.4736 s / iter. ETA=0:01:02
[09/19 00:39:14 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0021 s / iter. Inference: 0.4713 s / iter. Eval: 0.0012 s / iter. Total: 0.4746 s / iter. ETA=0:00:57
[09/19 00:39:19 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0021 s / iter. Inference: 0.4707 s / iter. Eval: 0.0012 s / iter. Total: 0.4742 s / iter. ETA=0:00:52
[09/19 00:39:24 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0020 s / iter. Inference: 0.4696 s / iter. Eval: 0.0012 s / iter. Total: 0.4729 s / iter. ETA=0:00:47
[09/19 00:39:29 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0020 s / iter. Inference: 0.4649 s / iter. Eval: 0.0012 s / iter. Total: 0.4682 s / iter. ETA=0:00:41
[09/19 00:39:34 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0020 s / iter. Inference: 0.4661 s / iter. Eval: 0.0012 s / iter. Total: 0.4693 s / iter. ETA=0:00:36
[09/19 00:39:40 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0020 s / iter. Inference: 0.4678 s / iter. Eval: 0.0012 s / iter. Total: 0.4710 s / iter. ETA=0:00:31
[09/19 00:39:45 d2.evaluation.evaluator]: Inference done 134/188. Dataloading: 0.0019 s / iter. Inference: 0.4655 s / iter. Eval: 0.0012 s / iter. Total: 0.4687 s / iter. ETA=0:00:25
[09/19 00:39:50 d2.evaluation.evaluator]: Inference done 146/188. Dataloading: 0.0019 s / iter. Inference: 0.4633 s / iter. Eval: 0.0012 s / iter. Total: 0.4665 s / iter. ETA=0:00:19
[09/19 00:39:56 d2.evaluation.evaluator]: Inference done 157/188. Dataloading: 0.0020 s / iter. Inference: 0.4640 s / iter. Eval: 0.0012 s / iter. Total: 0.4672 s / iter. ETA=0:00:14
[09/19 00:40:01 d2.evaluation.evaluator]: Inference done 169/188. Dataloading: 0.0021 s / iter. Inference: 0.4623 s / iter. Eval: 0.0011 s / iter. Total: 0.4656 s / iter. ETA=0:00:08
[09/19 00:40:07 d2.evaluation.evaluator]: Inference done 181/188. Dataloading: 0.0021 s / iter. Inference: 0.4616 s / iter. Eval: 0.0011 s / iter. Total: 0.4649 s / iter. ETA=0:00:03
[09/19 00:40:30 d2.evaluation.evaluator]: Total inference time: 0:01:44.949950 (0.573497 s / iter per device, on 8 devices)
[09/19 00:40:30 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.460722 s / iter per device, on 8 devices)
[09/19 00:40:30 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[56.39093848686913, 61.65262180770298, 70.18735214582651, 38.54295604032051, 59.09532712784033, 55.08856719975878, 43.975727962639574, 57.940219738937984]
[09/19 00:41:27 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 00:41:27 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 00:41:27 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 00:41:27 d2.evaluation.testing]: copypaste: 31.0854,55.3592,30.4304
[09/19 00:41:27 d2.utils.events]:  eta: 6:57:32  iter: 12999  total_loss: 5.281  loss_cls: 0.04372  loss_box_reg: 0.2168  loss_dis_0: 2.531  loss_dis_1: 2.485  time: 2.0831  data_time: 0.0579  lr: 0.002  max_mem: 15138M
[09/19 00:42:08 d2.utils.events]:  eta: 6:56:55  iter: 13019  total_loss: 5.298  loss_cls: 0.04208  loss_box_reg: 0.2252  loss_dis_0: 2.528  loss_dis_1: 2.483  time: 2.0831  data_time: 0.0627  lr: 0.002  max_mem: 15138M
[09/19 00:42:50 d2.utils.events]:  eta: 6:56:09  iter: 13039  total_loss: 5.296  loss_cls: 0.04642  loss_box_reg: 0.2259  loss_dis_0: 2.542  loss_dis_1: 2.482  time: 2.0831  data_time: 0.0651  lr: 0.002  max_mem: 15138M
[09/19 00:43:31 d2.utils.events]:  eta: 6:55:29  iter: 13059  total_loss: 5.323  loss_cls: 0.04592  loss_box_reg: 0.2242  loss_dis_0: 2.543  loss_dis_1: 2.494  time: 2.0831  data_time: 0.0694  lr: 0.002  max_mem: 15138M
[09/19 00:44:13 d2.utils.events]:  eta: 6:54:44  iter: 13079  total_loss: 5.333  loss_cls: 0.04578  loss_box_reg: 0.2297  loss_dis_0: 2.53  loss_dis_1: 2.534  time: 2.0831  data_time: 0.0591  lr: 0.002  max_mem: 15138M
[09/19 00:44:54 d2.utils.events]:  eta: 6:53:55  iter: 13099  total_loss: 5.362  loss_cls: 0.04858  loss_box_reg: 0.2283  loss_dis_0: 2.545  loss_dis_1: 2.541  time: 2.0830  data_time: 0.0518  lr: 0.002  max_mem: 15138M
[09/19 00:45:36 d2.utils.events]:  eta: 6:53:12  iter: 13119  total_loss: 5.41  loss_cls: 0.04832  loss_box_reg: 0.2398  loss_dis_0: 2.572  loss_dis_1: 2.53  time: 2.0830  data_time: 0.0568  lr: 0.002  max_mem: 15138M
[09/19 00:46:18 d2.utils.events]:  eta: 6:52:30  iter: 13139  total_loss: 5.343  loss_cls: 0.04835  loss_box_reg: 0.2305  loss_dis_0: 2.536  loss_dis_1: 2.52  time: 2.0830  data_time: 0.0608  lr: 0.002  max_mem: 15138M
[09/19 00:46:59 d2.utils.events]:  eta: 6:51:52  iter: 13159  total_loss: 5.359  loss_cls: 0.05318  loss_box_reg: 0.2593  loss_dis_0: 2.522  loss_dis_1: 2.538  time: 2.0830  data_time: 0.0621  lr: 0.002  max_mem: 15138M
[09/19 00:47:41 d2.utils.events]:  eta: 6:51:06  iter: 13179  total_loss: 5.371  loss_cls: 0.04849  loss_box_reg: 0.2446  loss_dis_0: 2.523  loss_dis_1: 2.554  time: 2.0830  data_time: 0.0680  lr: 0.002  max_mem: 15138M
[09/19 00:48:22 d2.utils.events]:  eta: 6:50:21  iter: 13199  total_loss: 5.347  loss_cls: 0.0481  loss_box_reg: 0.2415  loss_dis_0: 2.504  loss_dis_1: 2.545  time: 2.0830  data_time: 0.0626  lr: 0.002  max_mem: 15138M
[09/19 00:49:04 d2.utils.events]:  eta: 6:49:39  iter: 13219  total_loss: 5.337  loss_cls: 0.04913  loss_box_reg: 0.2339  loss_dis_0: 2.506  loss_dis_1: 2.547  time: 2.0830  data_time: 0.0593  lr: 0.002  max_mem: 15138M
[09/19 00:49:46 d2.utils.events]:  eta: 6:48:57  iter: 13239  total_loss: 5.332  loss_cls: 0.04633  loss_box_reg: 0.2318  loss_dis_0: 2.508  loss_dis_1: 2.539  time: 2.0830  data_time: 0.0604  lr: 0.002  max_mem: 15138M
[09/19 00:50:27 d2.utils.events]:  eta: 6:48:16  iter: 13259  total_loss: 5.329  loss_cls: 0.05374  loss_box_reg: 0.2419  loss_dis_0: 2.501  loss_dis_1: 2.539  time: 2.0830  data_time: 0.0657  lr: 0.002  max_mem: 15138M
[09/19 00:51:09 d2.utils.events]:  eta: 6:47:30  iter: 13279  total_loss: 5.306  loss_cls: 0.0438  loss_box_reg: 0.2184  loss_dis_0: 2.492  loss_dis_1: 2.536  time: 2.0830  data_time: 0.0606  lr: 0.002  max_mem: 15138M
[09/19 00:51:50 d2.utils.events]:  eta: 6:46:46  iter: 13299  total_loss: 5.311  loss_cls: 0.04715  loss_box_reg: 0.2429  loss_dis_0: 2.499  loss_dis_1: 2.523  time: 2.0830  data_time: 0.0634  lr: 0.002  max_mem: 15138M
[09/19 00:52:32 d2.utils.events]:  eta: 6:45:54  iter: 13319  total_loss: 5.3  loss_cls: 0.0503  loss_box_reg: 0.2439  loss_dis_0: 2.503  loss_dis_1: 2.513  time: 2.0830  data_time: 0.0651  lr: 0.002  max_mem: 15138M
[09/19 00:53:14 d2.utils.events]:  eta: 6:45:20  iter: 13339  total_loss: 5.293  loss_cls: 0.05299  loss_box_reg: 0.2362  loss_dis_0: 2.495  loss_dis_1: 2.508  time: 2.0830  data_time: 0.0606  lr: 0.002  max_mem: 15138M
[09/19 00:53:56 d2.utils.events]:  eta: 6:44:35  iter: 13359  total_loss: 5.296  loss_cls: 0.04652  loss_box_reg: 0.2374  loss_dis_0: 2.506  loss_dis_1: 2.502  time: 2.0830  data_time: 0.0552  lr: 0.002  max_mem: 15138M
[09/19 00:54:37 d2.utils.events]:  eta: 6:43:54  iter: 13379  total_loss: 5.298  loss_cls: 0.04788  loss_box_reg: 0.2425  loss_dis_0: 2.505  loss_dis_1: 2.488  time: 2.0830  data_time: 0.0711  lr: 0.002  max_mem: 15138M
[09/19 00:55:19 d2.utils.events]:  eta: 6:43:07  iter: 13399  total_loss: 5.267  loss_cls: 0.04671  loss_box_reg: 0.231  loss_dis_0: 2.494  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0629  lr: 0.002  max_mem: 15138M
[09/19 00:56:01 d2.utils.events]:  eta: 6:42:20  iter: 13419  total_loss: 5.25  loss_cls: 0.04143  loss_box_reg: 0.2284  loss_dis_0: 2.481  loss_dis_1: 2.508  time: 2.0830  data_time: 0.0573  lr: 0.002  max_mem: 15138M
[09/19 00:56:42 d2.utils.events]:  eta: 6:41:38  iter: 13439  total_loss: 5.262  loss_cls: 0.04419  loss_box_reg: 0.2249  loss_dis_0: 2.491  loss_dis_1: 2.507  time: 2.0830  data_time: 0.0561  lr: 0.002  max_mem: 15138M
[09/19 00:57:24 d2.utils.events]:  eta: 6:40:54  iter: 13459  total_loss: 5.276  loss_cls: 0.04586  loss_box_reg: 0.2392  loss_dis_0: 2.482  loss_dis_1: 2.502  time: 2.0830  data_time: 0.0588  lr: 0.002  max_mem: 15138M
[09/19 00:58:05 d2.utils.events]:  eta: 6:40:06  iter: 13479  total_loss: 5.252  loss_cls: 0.042  loss_box_reg: 0.2176  loss_dis_0: 2.492  loss_dis_1: 2.504  time: 2.0829  data_time: 0.0562  lr: 0.002  max_mem: 15138M
[09/19 00:58:47 d2.utils.events]:  eta: 6:39:24  iter: 13499  total_loss: 5.257  loss_cls: 0.04445  loss_box_reg: 0.2197  loss_dis_0: 2.492  loss_dis_1: 2.507  time: 2.0830  data_time: 0.0796  lr: 0.002  max_mem: 15138M
[09/19 00:59:29 d2.utils.events]:  eta: 6:38:39  iter: 13519  total_loss: 5.264  loss_cls: 0.04405  loss_box_reg: 0.232  loss_dis_0: 2.488  loss_dis_1: 2.503  time: 2.0830  data_time: 0.0657  lr: 0.002  max_mem: 15138M
[09/19 01:00:11 d2.utils.events]:  eta: 6:37:56  iter: 13539  total_loss: 5.246  loss_cls: 0.04138  loss_box_reg: 0.2158  loss_dis_0: 2.48  loss_dis_1: 2.514  time: 2.0830  data_time: 0.0717  lr: 0.002  max_mem: 15138M
[09/19 01:00:52 d2.utils.events]:  eta: 6:37:16  iter: 13559  total_loss: 5.267  loss_cls: 0.04099  loss_box_reg: 0.2194  loss_dis_0: 2.47  loss_dis_1: 2.533  time: 2.0830  data_time: 0.0652  lr: 0.002  max_mem: 15138M
[09/19 01:01:34 d2.utils.events]:  eta: 6:36:34  iter: 13579  total_loss: 5.251  loss_cls: 0.04216  loss_box_reg: 0.211  loss_dis_0: 2.476  loss_dis_1: 2.522  time: 2.0829  data_time: 0.0604  lr: 0.002  max_mem: 15138M
[09/19 01:02:16 d2.utils.events]:  eta: 6:35:51  iter: 13599  total_loss: 5.266  loss_cls: 0.0433  loss_box_reg: 0.2201  loss_dis_0: 2.473  loss_dis_1: 2.528  time: 2.0829  data_time: 0.0651  lr: 0.002  max_mem: 15138M
[09/19 01:02:57 d2.utils.events]:  eta: 6:35:09  iter: 13619  total_loss: 5.238  loss_cls: 0.0397  loss_box_reg: 0.2081  loss_dis_0: 2.48  loss_dis_1: 2.51  time: 2.0830  data_time: 0.0649  lr: 0.002  max_mem: 15138M
[09/19 01:03:39 d2.utils.events]:  eta: 6:34:27  iter: 13639  total_loss: 5.264  loss_cls: 0.04393  loss_box_reg: 0.2276  loss_dis_0: 2.484  loss_dis_1: 2.503  time: 2.0829  data_time: 0.0611  lr: 0.002  max_mem: 15138M
[09/19 01:04:21 d2.utils.events]:  eta: 6:33:42  iter: 13659  total_loss: 5.255  loss_cls: 0.04427  loss_box_reg: 0.2224  loss_dis_0: 2.478  loss_dis_1: 2.509  time: 2.0829  data_time: 0.0611  lr: 0.002  max_mem: 15138M
[09/19 01:05:02 d2.utils.events]:  eta: 6:32:55  iter: 13679  total_loss: 5.244  loss_cls: 0.0425  loss_box_reg: 0.2127  loss_dis_0: 2.484  loss_dis_1: 2.513  time: 2.0829  data_time: 0.0607  lr: 0.002  max_mem: 15138M
[09/19 01:05:44 d2.utils.events]:  eta: 6:32:14  iter: 13699  total_loss: 5.26  loss_cls: 0.04412  loss_box_reg: 0.2227  loss_dis_0: 2.484  loss_dis_1: 2.508  time: 2.0829  data_time: 0.0635  lr: 0.002  max_mem: 15138M
[09/19 01:06:26 d2.utils.events]:  eta: 6:31:29  iter: 13719  total_loss: 5.241  loss_cls: 0.03974  loss_box_reg: 0.2069  loss_dis_0: 2.485  loss_dis_1: 2.51  time: 2.0829  data_time: 0.0671  lr: 0.002  max_mem: 15138M
[09/19 01:07:08 d2.utils.events]:  eta: 6:30:47  iter: 13739  total_loss: 5.252  loss_cls: 0.04038  loss_box_reg: 0.2207  loss_dis_0: 2.476  loss_dis_1: 2.513  time: 2.0829  data_time: 0.0598  lr: 0.002  max_mem: 15138M
[09/19 01:07:49 d2.utils.events]:  eta: 6:30:05  iter: 13759  total_loss: 5.256  loss_cls: 0.04399  loss_box_reg: 0.2259  loss_dis_0: 2.476  loss_dis_1: 2.508  time: 2.0829  data_time: 0.0693  lr: 0.002  max_mem: 15138M
[09/19 01:08:31 d2.utils.events]:  eta: 6:29:22  iter: 13779  total_loss: 5.264  loss_cls: 0.04657  loss_box_reg: 0.2255  loss_dis_0: 2.482  loss_dis_1: 2.505  time: 2.0830  data_time: 0.0674  lr: 0.002  max_mem: 15138M
[09/19 01:09:13 d2.utils.events]:  eta: 6:28:43  iter: 13799  total_loss: 5.247  loss_cls: 0.04193  loss_box_reg: 0.2222  loss_dis_0: 2.495  loss_dis_1: 2.486  time: 2.0830  data_time: 0.0730  lr: 0.002  max_mem: 15138M
[09/19 01:09:55 d2.utils.events]:  eta: 6:27:58  iter: 13819  total_loss: 5.261  loss_cls: 0.04882  loss_box_reg: 0.2312  loss_dis_0: 2.482  loss_dis_1: 2.511  time: 2.0830  data_time: 0.0577  lr: 0.002  max_mem: 15138M
[09/19 01:10:37 d2.utils.events]:  eta: 6:27:14  iter: 13839  total_loss: 5.247  loss_cls: 0.04353  loss_box_reg: 0.2151  loss_dis_0: 2.454  loss_dis_1: 2.53  time: 2.0830  data_time: 0.0643  lr: 0.002  max_mem: 15138M
[09/19 01:11:18 d2.utils.events]:  eta: 6:26:25  iter: 13859  total_loss: 5.262  loss_cls: 0.04407  loss_box_reg: 0.2357  loss_dis_0: 2.464  loss_dis_1: 2.52  time: 2.0830  data_time: 0.0539  lr: 0.002  max_mem: 15138M
[09/19 01:12:00 d2.utils.events]:  eta: 6:25:43  iter: 13879  total_loss: 5.267  loss_cls: 0.04708  loss_box_reg: 0.2267  loss_dis_0: 2.472  loss_dis_1: 2.518  time: 2.0830  data_time: 0.0759  lr: 0.002  max_mem: 15138M
[09/19 01:12:41 d2.utils.events]:  eta: 6:24:58  iter: 13899  total_loss: 5.254  loss_cls: 0.04104  loss_box_reg: 0.216  loss_dis_0: 2.464  loss_dis_1: 2.52  time: 2.0830  data_time: 0.0730  lr: 0.002  max_mem: 15138M
[09/19 01:13:23 d2.utils.events]:  eta: 6:24:17  iter: 13919  total_loss: 5.247  loss_cls: 0.03942  loss_box_reg: 0.2117  loss_dis_0: 2.473  loss_dis_1: 2.514  time: 2.0830  data_time: 0.0484  lr: 0.002  max_mem: 15138M
[09/19 01:14:05 d2.utils.events]:  eta: 6:23:35  iter: 13939  total_loss: 5.25  loss_cls: 0.043  loss_box_reg: 0.216  loss_dis_0: 2.477  loss_dis_1: 2.522  time: 2.0830  data_time: 0.0587  lr: 0.002  max_mem: 15138M
[09/19 01:14:46 d2.utils.events]:  eta: 6:22:53  iter: 13959  total_loss: 5.254  loss_cls: 0.04214  loss_box_reg: 0.2217  loss_dis_0: 2.482  loss_dis_1: 2.518  time: 2.0829  data_time: 0.0651  lr: 0.002  max_mem: 15138M
[09/19 01:15:28 d2.utils.events]:  eta: 6:22:11  iter: 13979  total_loss: 5.282  loss_cls: 0.04352  loss_box_reg: 0.2313  loss_dis_0: 2.497  loss_dis_1: 2.498  time: 2.0829  data_time: 0.0623  lr: 0.002  max_mem: 15138M
[09/19 01:16:10 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0013999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 01:16:13 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 01:16:13 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 01:16:13 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 01:16:13 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 01:16:28 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0011 s / iter. Inference: 0.4776 s / iter. Eval: 0.0011 s / iter. Total: 0.4798 s / iter. ETA=0:01:24
[09/19 01:16:33 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0018 s / iter. Inference: 0.4761 s / iter. Eval: 0.0011 s / iter. Total: 0.4790 s / iter. ETA=0:01:19
[09/19 01:16:38 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0017 s / iter. Inference: 0.4754 s / iter. Eval: 0.0011 s / iter. Total: 0.4783 s / iter. ETA=0:01:14
[09/19 01:16:43 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0016 s / iter. Inference: 0.4698 s / iter. Eval: 0.0011 s / iter. Total: 0.4726 s / iter. ETA=0:01:08
[09/19 01:16:48 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0016 s / iter. Inference: 0.4681 s / iter. Eval: 0.0011 s / iter. Total: 0.4709 s / iter. ETA=0:01:02
[09/19 01:16:54 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0016 s / iter. Inference: 0.4680 s / iter. Eval: 0.0011 s / iter. Total: 0.4708 s / iter. ETA=0:00:57
[09/19 01:16:59 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0017 s / iter. Inference: 0.4693 s / iter. Eval: 0.0011 s / iter. Total: 0.4723 s / iter. ETA=0:00:52
[09/19 01:17:04 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0018 s / iter. Inference: 0.4691 s / iter. Eval: 0.0011 s / iter. Total: 0.4721 s / iter. ETA=0:00:47
[09/19 01:17:09 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0019 s / iter. Inference: 0.4652 s / iter. Eval: 0.0011 s / iter. Total: 0.4684 s / iter. ETA=0:00:41
[09/19 01:17:15 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0020 s / iter. Inference: 0.4673 s / iter. Eval: 0.0012 s / iter. Total: 0.4705 s / iter. ETA=0:00:36
[09/19 01:17:20 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0020 s / iter. Inference: 0.4678 s / iter. Eval: 0.0011 s / iter. Total: 0.4710 s / iter. ETA=0:00:31
[09/19 01:17:25 d2.evaluation.evaluator]: Inference done 133/188. Dataloading: 0.0020 s / iter. Inference: 0.4667 s / iter. Eval: 0.0012 s / iter. Total: 0.4699 s / iter. ETA=0:00:25
[09/19 01:17:30 d2.evaluation.evaluator]: Inference done 145/188. Dataloading: 0.0020 s / iter. Inference: 0.4654 s / iter. Eval: 0.0012 s / iter. Total: 0.4686 s / iter. ETA=0:00:20
[09/19 01:17:35 d2.evaluation.evaluator]: Inference done 156/188. Dataloading: 0.0020 s / iter. Inference: 0.4650 s / iter. Eval: 0.0012 s / iter. Total: 0.4682 s / iter. ETA=0:00:14
[09/19 01:17:41 d2.evaluation.evaluator]: Inference done 168/188. Dataloading: 0.0020 s / iter. Inference: 0.4634 s / iter. Eval: 0.0012 s / iter. Total: 0.4666 s / iter. ETA=0:00:09
[09/19 01:17:46 d2.evaluation.evaluator]: Inference done 179/188. Dataloading: 0.0019 s / iter. Inference: 0.4628 s / iter. Eval: 0.0012 s / iter. Total: 0.4659 s / iter. ETA=0:00:04
[09/19 01:18:10 d2.evaluation.evaluator]: Total inference time: 0:01:45.102644 (0.574331 s / iter per device, on 8 devices)
[09/19 01:18:10 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.461715 s / iter per device, on 8 devices)
[09/19 01:18:12 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[57.526000900183284, 62.67356525501627, 70.96793301259846, 41.43223110268946, 61.82685811961031, 53.40628894232346, 45.86296050152119, 58.72099992637331]
[09/19 01:19:08 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 01:19:08 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 01:19:08 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 01:19:08 d2.evaluation.testing]: copypaste: 32.2361,56.5521,32.0812
[09/19 01:19:08 d2.utils.events]:  eta: 6:21:32  iter: 13999  total_loss: 5.265  loss_cls: 0.04371  loss_box_reg: 0.22  loss_dis_0: 2.491  loss_dis_1: 2.509  time: 2.0829  data_time: 0.0660  lr: 0.002  max_mem: 15138M
[09/19 01:19:50 d2.utils.events]:  eta: 6:20:50  iter: 14019  total_loss: 5.251  loss_cls: 0.04277  loss_box_reg: 0.2201  loss_dis_0: 2.501  loss_dis_1: 2.501  time: 2.0829  data_time: 0.0653  lr: 0.002  max_mem: 15138M
[09/19 01:20:31 d2.utils.events]:  eta: 6:20:08  iter: 14039  total_loss: 5.27  loss_cls: 0.04536  loss_box_reg: 0.2229  loss_dis_0: 2.5  loss_dis_1: 2.495  time: 2.0829  data_time: 0.0633  lr: 0.002  max_mem: 15138M
[09/19 01:21:12 d2.utils.events]:  eta: 6:19:25  iter: 14059  total_loss: 5.279  loss_cls: 0.04453  loss_box_reg: 0.2315  loss_dis_0: 2.5  loss_dis_1: 2.498  time: 2.0829  data_time: 0.0682  lr: 0.002  max_mem: 15138M
[09/19 01:21:54 d2.utils.events]:  eta: 6:18:44  iter: 14079  total_loss: 5.283  loss_cls: 0.04631  loss_box_reg: 0.2316  loss_dis_0: 2.5  loss_dis_1: 2.499  time: 2.0829  data_time: 0.0660  lr: 0.002  max_mem: 15138M
[09/19 01:22:36 d2.utils.events]:  eta: 6:18:03  iter: 14099  total_loss: 5.25  loss_cls: 0.03694  loss_box_reg: 0.2141  loss_dis_0: 2.479  loss_dis_1: 2.518  time: 2.0829  data_time: 0.0581  lr: 0.002  max_mem: 15138M
[09/19 01:23:17 d2.utils.events]:  eta: 6:17:21  iter: 14119  total_loss: 5.245  loss_cls: 0.04275  loss_box_reg: 0.2091  loss_dis_0: 2.496  loss_dis_1: 2.505  time: 2.0829  data_time: 0.0618  lr: 0.002  max_mem: 15138M
[09/19 01:23:59 d2.utils.events]:  eta: 6:16:40  iter: 14139  total_loss: 5.256  loss_cls: 0.04154  loss_box_reg: 0.2223  loss_dis_0: 2.484  loss_dis_1: 2.506  time: 2.0829  data_time: 0.0720  lr: 0.002  max_mem: 15138M
[09/19 01:24:40 d2.utils.events]:  eta: 6:15:54  iter: 14159  total_loss: 5.257  loss_cls: 0.04036  loss_box_reg: 0.2225  loss_dis_0: 2.479  loss_dis_1: 2.515  time: 2.0828  data_time: 0.0504  lr: 0.002  max_mem: 15138M
[09/19 01:25:22 d2.utils.events]:  eta: 6:15:13  iter: 14179  total_loss: 5.252  loss_cls: 0.04337  loss_box_reg: 0.2162  loss_dis_0: 2.481  loss_dis_1: 2.513  time: 2.0828  data_time: 0.0649  lr: 0.002  max_mem: 15138M
[09/19 01:26:04 d2.utils.events]:  eta: 6:14:34  iter: 14199  total_loss: 5.283  loss_cls: 0.04388  loss_box_reg: 0.2303  loss_dis_0: 2.468  loss_dis_1: 2.534  time: 2.0828  data_time: 0.0625  lr: 0.002  max_mem: 15138M
[09/19 01:26:45 d2.utils.events]:  eta: 6:13:53  iter: 14219  total_loss: 5.271  loss_cls: 0.04898  loss_box_reg: 0.2274  loss_dis_0: 2.49  loss_dis_1: 2.511  time: 2.0828  data_time: 0.0605  lr: 0.002  max_mem: 15138M
[09/19 01:27:27 d2.utils.events]:  eta: 6:13:12  iter: 14239  total_loss: 5.259  loss_cls: 0.04109  loss_box_reg: 0.2126  loss_dis_0: 2.593  loss_dis_1: 2.409  time: 2.0829  data_time: 0.0639  lr: 0.002  max_mem: 15138M
[09/19 01:28:09 d2.utils.events]:  eta: 6:12:30  iter: 14259  total_loss: 5.262  loss_cls: 0.04388  loss_box_reg: 0.2271  loss_dis_0: 2.469  loss_dis_1: 2.529  time: 2.0828  data_time: 0.0602  lr: 0.002  max_mem: 15138M
[09/19 01:28:50 d2.utils.events]:  eta: 6:11:48  iter: 14279  total_loss: 5.246  loss_cls: 0.04381  loss_box_reg: 0.2137  loss_dis_0: 2.615  loss_dis_1: 2.383  time: 2.0829  data_time: 0.0581  lr: 0.002  max_mem: 15138M
[09/19 01:29:32 d2.utils.events]:  eta: 6:11:10  iter: 14299  total_loss: 5.254  loss_cls: 0.04294  loss_box_reg: 0.2208  loss_dis_0: 2.529  loss_dis_1: 2.457  time: 2.0829  data_time: 0.0771  lr: 0.002  max_mem: 15138M
[09/19 01:30:14 d2.utils.events]:  eta: 6:10:31  iter: 14319  total_loss: 5.252  loss_cls: 0.04168  loss_box_reg: 0.2197  loss_dis_0: 2.539  loss_dis_1: 2.455  time: 2.0829  data_time: 0.0631  lr: 0.002  max_mem: 15138M
[09/19 01:30:56 d2.utils.events]:  eta: 6:09:47  iter: 14339  total_loss: 5.26  loss_cls: 0.04312  loss_box_reg: 0.2207  loss_dis_0: 2.47  loss_dis_1: 2.525  time: 2.0829  data_time: 0.0650  lr: 0.002  max_mem: 15138M
[09/19 01:31:38 d2.utils.events]:  eta: 6:09:03  iter: 14359  total_loss: 5.246  loss_cls: 0.04595  loss_box_reg: 0.2206  loss_dis_0: 2.479  loss_dis_1: 2.513  time: 2.0829  data_time: 0.0624  lr: 0.002  max_mem: 15138M
[09/19 01:32:20 d2.utils.events]:  eta: 6:08:24  iter: 14379  total_loss: 5.229  loss_cls: 0.04047  loss_box_reg: 0.2099  loss_dis_0: 2.491  loss_dis_1: 2.497  time: 2.0829  data_time: 0.0659  lr: 0.002  max_mem: 15138M
[09/19 01:33:01 d2.utils.events]:  eta: 6:07:42  iter: 14399  total_loss: 5.274  loss_cls: 0.04404  loss_box_reg: 0.2367  loss_dis_0: 2.491  loss_dis_1: 2.491  time: 2.0829  data_time: 0.0574  lr: 0.002  max_mem: 15138M
[09/19 01:33:43 d2.utils.events]:  eta: 6:07:07  iter: 14419  total_loss: 5.264  loss_cls: 0.04425  loss_box_reg: 0.2324  loss_dis_0: 2.587  loss_dis_1: 2.409  time: 2.0829  data_time: 0.0597  lr: 0.002  max_mem: 15138M
[09/19 01:34:25 d2.utils.events]:  eta: 6:06:27  iter: 14439  total_loss: 5.256  loss_cls: 0.04377  loss_box_reg: 0.2225  loss_dis_0: 2.503  loss_dis_1: 2.493  time: 2.0829  data_time: 0.0571  lr: 0.002  max_mem: 15138M
[09/19 01:35:07 d2.utils.events]:  eta: 6:05:47  iter: 14459  total_loss: 5.255  loss_cls: 0.04373  loss_box_reg: 0.2262  loss_dis_0: 2.488  loss_dis_1: 2.502  time: 2.0829  data_time: 0.0620  lr: 0.002  max_mem: 15138M
[09/19 01:35:49 d2.utils.events]:  eta: 6:05:08  iter: 14479  total_loss: 5.298  loss_cls: 0.04529  loss_box_reg: 0.2432  loss_dis_0: 2.521  loss_dis_1: 2.469  time: 2.0829  data_time: 0.0621  lr: 0.002  max_mem: 15138M
[09/19 01:36:31 d2.utils.events]:  eta: 6:04:28  iter: 14499  total_loss: 5.262  loss_cls: 0.04496  loss_box_reg: 0.2159  loss_dis_0: 2.566  loss_dis_1: 2.428  time: 2.0829  data_time: 0.0611  lr: 0.002  max_mem: 15138M
[09/19 01:37:12 d2.utils.events]:  eta: 6:03:47  iter: 14519  total_loss: 5.255  loss_cls: 0.04357  loss_box_reg: 0.2208  loss_dis_0: 2.559  loss_dis_1: 2.438  time: 2.0830  data_time: 0.0497  lr: 0.002  max_mem: 15138M
[09/19 01:37:54 d2.utils.events]:  eta: 6:03:05  iter: 14539  total_loss: 5.271  loss_cls: 0.04364  loss_box_reg: 0.2321  loss_dis_0: 2.508  loss_dis_1: 2.491  time: 2.0830  data_time: 0.0629  lr: 0.002  max_mem: 15138M
[09/19 01:38:36 d2.utils.events]:  eta: 6:02:23  iter: 14559  total_loss: 5.318  loss_cls: 0.04295  loss_box_reg: 0.2193  loss_dis_0: 2.498  loss_dis_1: 2.555  time: 2.0830  data_time: 0.0602  lr: 0.002  max_mem: 15138M
[09/19 01:39:18 d2.utils.events]:  eta: 6:01:41  iter: 14579  total_loss: 5.314  loss_cls: 0.0474  loss_box_reg: 0.2341  loss_dis_0: 2.386  loss_dis_1: 2.64  time: 2.0830  data_time: 0.0662  lr: 0.002  max_mem: 15138M
[09/19 01:39:59 d2.utils.events]:  eta: 6:01:00  iter: 14599  total_loss: 5.27  loss_cls: 0.04848  loss_box_reg: 0.2366  loss_dis_0: 2.366  loss_dis_1: 2.601  time: 2.0830  data_time: 0.0607  lr: 0.002  max_mem: 15138M
[09/19 01:40:41 d2.utils.events]:  eta: 6:00:21  iter: 14619  total_loss: 5.262  loss_cls: 0.04549  loss_box_reg: 0.2344  loss_dis_0: 2.442  loss_dis_1: 2.535  time: 2.0830  data_time: 0.0605  lr: 0.002  max_mem: 15138M
[09/19 01:41:23 d2.utils.events]:  eta: 5:59:45  iter: 14639  total_loss: 5.257  loss_cls: 0.04585  loss_box_reg: 0.2277  loss_dis_0: 2.465  loss_dis_1: 2.514  time: 2.0830  data_time: 0.0582  lr: 0.002  max_mem: 15138M
[09/19 01:42:05 d2.utils.events]:  eta: 5:59:04  iter: 14659  total_loss: 5.21  loss_cls: 0.04405  loss_box_reg: 0.2051  loss_dis_0: 2.497  loss_dis_1: 2.461  time: 2.0830  data_time: 0.0615  lr: 0.002  max_mem: 15138M
[09/19 01:42:47 d2.utils.events]:  eta: 5:58:26  iter: 14679  total_loss: 5.216  loss_cls: 0.03939  loss_box_reg: 0.2159  loss_dis_0: 2.508  loss_dis_1: 2.445  time: 2.0830  data_time: 0.0604  lr: 0.002  max_mem: 15138M
[09/19 01:43:28 d2.utils.events]:  eta: 5:57:44  iter: 14699  total_loss: 5.247  loss_cls: 0.04631  loss_box_reg: 0.2308  loss_dis_0: 2.528  loss_dis_1: 2.45  time: 2.0830  data_time: 0.0615  lr: 0.002  max_mem: 15138M
[09/19 01:44:10 d2.utils.events]:  eta: 5:57:05  iter: 14719  total_loss: 5.229  loss_cls: 0.03968  loss_box_reg: 0.2006  loss_dis_0: 2.586  loss_dis_1: 2.388  time: 2.0830  data_time: 0.0642  lr: 0.002  max_mem: 15138M
[09/19 01:44:52 d2.utils.events]:  eta: 5:56:24  iter: 14739  total_loss: 5.26  loss_cls: 0.04189  loss_box_reg: 0.2203  loss_dis_0: 2.598  loss_dis_1: 2.412  time: 2.0830  data_time: 0.0711  lr: 0.002  max_mem: 15138M
[09/19 01:45:34 d2.utils.events]:  eta: 5:55:46  iter: 14759  total_loss: 5.258  loss_cls: 0.04397  loss_box_reg: 0.2077  loss_dis_0: 2.509  loss_dis_1: 2.489  time: 2.0830  data_time: 0.0695  lr: 0.002  max_mem: 15138M
[09/19 01:46:16 d2.utils.events]:  eta: 5:55:06  iter: 14779  total_loss: 5.254  loss_cls: 0.0449  loss_box_reg: 0.2212  loss_dis_0: 2.438  loss_dis_1: 2.552  time: 2.0830  data_time: 0.0508  lr: 0.002  max_mem: 15138M
[09/19 01:46:57 d2.utils.events]:  eta: 5:54:24  iter: 14799  total_loss: 5.255  loss_cls: 0.048  loss_box_reg: 0.2302  loss_dis_0: 2.43  loss_dis_1: 2.549  time: 2.0830  data_time: 0.0643  lr: 0.002  max_mem: 15138M
[09/19 01:47:39 d2.utils.events]:  eta: 5:53:54  iter: 14819  total_loss: 5.276  loss_cls: 0.04862  loss_box_reg: 0.2438  loss_dis_0: 2.446  loss_dis_1: 2.526  time: 2.0830  data_time: 0.0706  lr: 0.002  max_mem: 15138M
[09/19 01:48:21 d2.utils.events]:  eta: 5:53:10  iter: 14839  total_loss: 5.266  loss_cls: 0.04479  loss_box_reg: 0.2249  loss_dis_0: 2.476  loss_dis_1: 2.521  time: 2.0830  data_time: 0.0605  lr: 0.002  max_mem: 15138M
[09/19 01:49:03 d2.utils.events]:  eta: 5:52:34  iter: 14859  total_loss: 5.315  loss_cls: 0.0469  loss_box_reg: 0.2472  loss_dis_0: 2.552  loss_dis_1: 2.475  time: 2.0830  data_time: 0.0710  lr: 0.002  max_mem: 15138M
[09/19 01:49:45 d2.utils.events]:  eta: 5:51:56  iter: 14879  total_loss: 5.271  loss_cls: 0.04371  loss_box_reg: 0.2231  loss_dis_0: 2.486  loss_dis_1: 2.512  time: 2.0831  data_time: 0.0614  lr: 0.002  max_mem: 15138M
[09/19 01:50:26 d2.utils.events]:  eta: 5:51:15  iter: 14899  total_loss: 5.27  loss_cls: 0.04401  loss_box_reg: 0.223  loss_dis_0: 2.439  loss_dis_1: 2.57  time: 2.0831  data_time: 0.0616  lr: 0.002  max_mem: 15138M
[09/19 01:51:08 d2.utils.events]:  eta: 5:50:41  iter: 14919  total_loss: 5.252  loss_cls: 0.04713  loss_box_reg: 0.2498  loss_dis_0: 2.421  loss_dis_1: 2.556  time: 2.0831  data_time: 0.0617  lr: 0.002  max_mem: 15138M
[09/19 01:51:50 d2.utils.events]:  eta: 5:50:01  iter: 14939  total_loss: 5.264  loss_cls: 0.04263  loss_box_reg: 0.2278  loss_dis_0: 2.444  loss_dis_1: 2.554  time: 2.0831  data_time: 0.0669  lr: 0.002  max_mem: 15138M
[09/19 01:52:32 d2.utils.events]:  eta: 5:49:21  iter: 14959  total_loss: 5.201  loss_cls: 0.04252  loss_box_reg: 0.204  loss_dis_0: 2.404  loss_dis_1: 2.538  time: 2.0831  data_time: 0.0700  lr: 0.002  max_mem: 15138M
[09/19 01:53:14 d2.utils.events]:  eta: 5:48:45  iter: 14979  total_loss: 5.212  loss_cls: 0.04723  loss_box_reg: 0.2253  loss_dis_0: 2.424  loss_dis_1: 2.498  time: 2.0831  data_time: 0.0685  lr: 0.002  max_mem: 15138M
[09/19 01:53:56 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0014999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 01:53:58 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 01:53:58 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 01:53:58 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 01:53:58 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 01:54:13 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0012 s / iter. Inference: 0.4675 s / iter. Eval: 0.0012 s / iter. Total: 0.4699 s / iter. ETA=0:01:23
[09/19 01:54:18 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0019 s / iter. Inference: 0.4825 s / iter. Eval: 0.0012 s / iter. Total: 0.4857 s / iter. ETA=0:01:20
[09/19 01:54:24 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0018 s / iter. Inference: 0.4823 s / iter. Eval: 0.0012 s / iter. Total: 0.4853 s / iter. ETA=0:01:15
[09/19 01:54:29 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0017 s / iter. Inference: 0.4764 s / iter. Eval: 0.0011 s / iter. Total: 0.4793 s / iter. ETA=0:01:09
[09/19 01:54:34 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0020 s / iter. Inference: 0.4725 s / iter. Eval: 0.0011 s / iter. Total: 0.4757 s / iter. ETA=0:01:03
[09/19 01:54:39 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0020 s / iter. Inference: 0.4742 s / iter. Eval: 0.0011 s / iter. Total: 0.4774 s / iter. ETA=0:00:58
[09/19 01:54:44 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0019 s / iter. Inference: 0.4735 s / iter. Eval: 0.0012 s / iter. Total: 0.4766 s / iter. ETA=0:00:52
[09/19 01:54:50 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0020 s / iter. Inference: 0.4721 s / iter. Eval: 0.0012 s / iter. Total: 0.4754 s / iter. ETA=0:00:47
[09/19 01:54:55 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0020 s / iter. Inference: 0.4674 s / iter. Eval: 0.0012 s / iter. Total: 0.4707 s / iter. ETA=0:00:41
[09/19 01:55:00 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0020 s / iter. Inference: 0.4687 s / iter. Eval: 0.0012 s / iter. Total: 0.4719 s / iter. ETA=0:00:36
[09/19 01:55:05 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0019 s / iter. Inference: 0.4692 s / iter. Eval: 0.0012 s / iter. Total: 0.4724 s / iter. ETA=0:00:31
[09/19 01:55:11 d2.evaluation.evaluator]: Inference done 134/188. Dataloading: 0.0020 s / iter. Inference: 0.4673 s / iter. Eval: 0.0012 s / iter. Total: 0.4706 s / iter. ETA=0:00:25
[09/19 01:55:16 d2.evaluation.evaluator]: Inference done 146/188. Dataloading: 0.0019 s / iter. Inference: 0.4647 s / iter. Eval: 0.0012 s / iter. Total: 0.4679 s / iter. ETA=0:00:19
[09/19 01:55:21 d2.evaluation.evaluator]: Inference done 157/188. Dataloading: 0.0020 s / iter. Inference: 0.4654 s / iter. Eval: 0.0012 s / iter. Total: 0.4687 s / iter. ETA=0:00:14
[09/19 01:55:27 d2.evaluation.evaluator]: Inference done 169/188. Dataloading: 0.0020 s / iter. Inference: 0.4640 s / iter. Eval: 0.0012 s / iter. Total: 0.4673 s / iter. ETA=0:00:08
[09/19 01:55:32 d2.evaluation.evaluator]: Inference done 181/188. Dataloading: 0.0019 s / iter. Inference: 0.4634 s / iter. Eval: 0.0012 s / iter. Total: 0.4666 s / iter. ETA=0:00:03
[09/19 01:55:55 d2.evaluation.evaluator]: Total inference time: 0:01:45.249928 (0.575136 s / iter per device, on 8 devices)
[09/19 01:55:55 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.462455 s / iter per device, on 8 devices)
[09/19 01:55:56 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[56.69723002807044, 62.18404306084524, 70.65487829266286, 40.70365044733095, 62.79388676218236, 51.219735894210515, 43.82895797403127, 58.276306560555554]
[09/19 01:56:52 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 01:56:52 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 01:56:52 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 01:56:52 d2.evaluation.testing]: copypaste: 31.5502,55.7948,31.2759
[09/19 01:56:52 d2.utils.events]:  eta: 5:48:02  iter: 14999  total_loss: 5.311  loss_cls: 0.04588  loss_box_reg: 0.2412  loss_dis_0: 2.571  loss_dis_1: 2.443  time: 2.0831  data_time: 0.0625  lr: 0.002  max_mem: 15138M
[09/19 01:57:34 d2.utils.events]:  eta: 5:47:20  iter: 15019  total_loss: 5.224  loss_cls: 0.04175  loss_box_reg: 0.2126  loss_dis_0: 2.393  loss_dis_1: 2.575  time: 2.0831  data_time: 0.0641  lr: 0.002  max_mem: 15138M
[09/19 01:58:15 d2.utils.events]:  eta: 5:46:38  iter: 15039  total_loss: 5.287  loss_cls: 0.04451  loss_box_reg: 0.2305  loss_dis_0: 2.566  loss_dis_1: 2.436  time: 2.0831  data_time: 0.0642  lr: 0.002  max_mem: 15138M
[09/19 01:58:56 d2.utils.events]:  eta: 5:45:56  iter: 15059  total_loss: 5.293  loss_cls: 0.04466  loss_box_reg: 0.2226  loss_dis_0: 2.582  loss_dis_1: 2.426  time: 2.0831  data_time: 0.0627  lr: 0.002  max_mem: 15138M
[09/19 01:59:38 d2.utils.events]:  eta: 5:45:14  iter: 15079  total_loss: 5.284  loss_cls: 0.04415  loss_box_reg: 0.2269  loss_dis_0: 2.517  loss_dis_1: 2.504  time: 2.0830  data_time: 0.0559  lr: 0.002  max_mem: 15138M
[09/19 02:00:20 d2.utils.events]:  eta: 5:44:28  iter: 15099  total_loss: 5.249  loss_cls: 0.03637  loss_box_reg: 0.1971  loss_dis_0: 2.427  loss_dis_1: 2.578  time: 2.0830  data_time: 0.0599  lr: 0.002  max_mem: 15138M
[09/19 02:01:01 d2.utils.events]:  eta: 5:43:50  iter: 15119  total_loss: 5.235  loss_cls: 0.03989  loss_box_reg: 0.2052  loss_dis_0: 2.414  loss_dis_1: 2.578  time: 2.0830  data_time: 0.0573  lr: 0.002  max_mem: 15138M
[09/19 02:01:43 d2.utils.events]:  eta: 5:43:09  iter: 15139  total_loss: 5.266  loss_cls: 0.04475  loss_box_reg: 0.2096  loss_dis_0: 2.356  loss_dis_1: 2.641  time: 2.0830  data_time: 0.0731  lr: 0.002  max_mem: 15138M
[09/19 02:02:25 d2.utils.events]:  eta: 5:42:28  iter: 15159  total_loss: 5.237  loss_cls: 0.04235  loss_box_reg: 0.2237  loss_dis_0: 2.493  loss_dis_1: 2.46  time: 2.0830  data_time: 0.0646  lr: 0.002  max_mem: 15138M
[09/19 02:03:07 d2.utils.events]:  eta: 5:41:47  iter: 15179  total_loss: 5.281  loss_cls: 0.04241  loss_box_reg: 0.2126  loss_dis_0: 2.511  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0627  lr: 0.002  max_mem: 15138M
[09/19 02:03:48 d2.utils.events]:  eta: 5:41:04  iter: 15199  total_loss: 5.253  loss_cls: 0.04308  loss_box_reg: 0.2154  loss_dis_0: 2.279  loss_dis_1: 2.728  time: 2.0830  data_time: 0.0630  lr: 0.002  max_mem: 15138M
[09/19 02:04:30 d2.utils.events]:  eta: 5:40:24  iter: 15219  total_loss: 5.28  loss_cls: 0.04589  loss_box_reg: 0.2371  loss_dis_0: 2.397  loss_dis_1: 2.603  time: 2.0830  data_time: 0.0728  lr: 0.002  max_mem: 15138M
[09/19 02:05:12 d2.utils.events]:  eta: 5:39:41  iter: 15239  total_loss: 5.267  loss_cls: 0.04282  loss_box_reg: 0.2186  loss_dis_0: 2.48  loss_dis_1: 2.518  time: 2.0830  data_time: 0.0652  lr: 0.002  max_mem: 15138M
[09/19 02:05:54 d2.utils.events]:  eta: 5:39:00  iter: 15259  total_loss: 5.27  loss_cls: 0.04112  loss_box_reg: 0.218  loss_dis_0: 2.513  loss_dis_1: 2.482  time: 2.0830  data_time: 0.0700  lr: 0.002  max_mem: 15138M
[09/19 02:06:35 d2.utils.events]:  eta: 5:38:18  iter: 15279  total_loss: 5.253  loss_cls: 0.04085  loss_box_reg: 0.2096  loss_dis_0: 2.53  loss_dis_1: 2.468  time: 2.0830  data_time: 0.0586  lr: 0.002  max_mem: 15138M
[09/19 02:07:17 d2.utils.events]:  eta: 5:37:35  iter: 15299  total_loss: 5.265  loss_cls: 0.04371  loss_box_reg: 0.2201  loss_dis_0: 2.507  loss_dis_1: 2.489  time: 2.0830  data_time: 0.0619  lr: 0.002  max_mem: 15138M
[09/19 02:07:58 d2.utils.events]:  eta: 5:36:53  iter: 15319  total_loss: 5.25  loss_cls: 0.0408  loss_box_reg: 0.2105  loss_dis_0: 2.493  loss_dis_1: 2.506  time: 2.0830  data_time: 0.0650  lr: 0.002  max_mem: 15138M
[09/19 02:08:40 d2.utils.events]:  eta: 5:36:09  iter: 15339  total_loss: 5.271  loss_cls: 0.04305  loss_box_reg: 0.2185  loss_dis_0: 2.5  loss_dis_1: 2.508  time: 2.0830  data_time: 0.0598  lr: 0.002  max_mem: 15138M
[09/19 02:09:22 d2.utils.events]:  eta: 5:35:25  iter: 15359  total_loss: 5.257  loss_cls: 0.04332  loss_box_reg: 0.2146  loss_dis_0: 2.508  loss_dis_1: 2.496  time: 2.0830  data_time: 0.0745  lr: 0.002  max_mem: 15138M
[09/19 02:10:04 d2.utils.events]:  eta: 5:34:42  iter: 15379  total_loss: 5.256  loss_cls: 0.04284  loss_box_reg: 0.2095  loss_dis_0: 2.508  loss_dis_1: 2.495  time: 2.0830  data_time: 0.0660  lr: 0.002  max_mem: 15138M
[09/19 02:10:45 d2.utils.events]:  eta: 5:34:04  iter: 15399  total_loss: 5.254  loss_cls: 0.0415  loss_box_reg: 0.2105  loss_dis_0: 2.518  loss_dis_1: 2.495  time: 2.0830  data_time: 0.0693  lr: 0.002  max_mem: 15138M
[09/19 02:11:27 d2.utils.events]:  eta: 5:33:18  iter: 15419  total_loss: 5.272  loss_cls: 0.03905  loss_box_reg: 0.2174  loss_dis_0: 2.521  loss_dis_1: 2.489  time: 2.0830  data_time: 0.0615  lr: 0.002  max_mem: 15138M
[09/19 02:12:09 d2.utils.events]:  eta: 5:32:37  iter: 15439  total_loss: 5.294  loss_cls: 0.04398  loss_box_reg: 0.2386  loss_dis_0: 2.521  loss_dis_1: 2.488  time: 2.0830  data_time: 0.0636  lr: 0.002  max_mem: 15138M
[09/19 02:12:51 d2.utils.events]:  eta: 5:31:58  iter: 15459  total_loss: 5.279  loss_cls: 0.04316  loss_box_reg: 0.2233  loss_dis_0: 2.511  loss_dis_1: 2.49  time: 2.0830  data_time: 0.0599  lr: 0.002  max_mem: 15138M
[09/19 02:13:32 d2.utils.events]:  eta: 5:31:13  iter: 15479  total_loss: 5.273  loss_cls: 0.0472  loss_box_reg: 0.2286  loss_dis_0: 2.513  loss_dis_1: 2.492  time: 2.0830  data_time: 0.0720  lr: 0.002  max_mem: 15138M
[09/19 02:14:14 d2.utils.events]:  eta: 5:30:30  iter: 15499  total_loss: 5.28  loss_cls: 0.04731  loss_box_reg: 0.2292  loss_dis_0: 2.51  loss_dis_1: 2.492  time: 2.0830  data_time: 0.0697  lr: 0.002  max_mem: 15138M
[09/19 02:14:56 d2.utils.events]:  eta: 5:29:40  iter: 15519  total_loss: 5.285  loss_cls: 0.0452  loss_box_reg: 0.2293  loss_dis_0: 2.515  loss_dis_1: 2.494  time: 2.0830  data_time: 0.0628  lr: 0.002  max_mem: 15138M
[09/19 02:15:37 d2.utils.events]:  eta: 5:28:57  iter: 15539  total_loss: 5.254  loss_cls: 0.03878  loss_box_reg: 0.2131  loss_dis_0: 2.517  loss_dis_1: 2.488  time: 2.0830  data_time: 0.0691  lr: 0.002  max_mem: 15138M
[09/19 02:16:19 d2.utils.events]:  eta: 5:28:15  iter: 15559  total_loss: 5.258  loss_cls: 0.03844  loss_box_reg: 0.2071  loss_dis_0: 2.514  loss_dis_1: 2.491  time: 2.0830  data_time: 0.0583  lr: 0.002  max_mem: 15138M
[09/19 02:17:01 d2.utils.events]:  eta: 5:27:34  iter: 15579  total_loss: 5.288  loss_cls: 0.04483  loss_box_reg: 0.2372  loss_dis_0: 2.517  loss_dis_1: 2.491  time: 2.0830  data_time: 0.0516  lr: 0.002  max_mem: 15138M
[09/19 02:17:42 d2.utils.events]:  eta: 5:26:52  iter: 15599  total_loss: 5.285  loss_cls: 0.04251  loss_box_reg: 0.2359  loss_dis_0: 2.512  loss_dis_1: 2.494  time: 2.0830  data_time: 0.0677  lr: 0.002  max_mem: 15138M
[09/19 02:18:24 d2.utils.events]:  eta: 5:26:10  iter: 15619  total_loss: 5.293  loss_cls: 0.04783  loss_box_reg: 0.2412  loss_dis_0: 2.511  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0647  lr: 0.002  max_mem: 15138M
[09/19 02:19:05 d2.utils.events]:  eta: 5:25:23  iter: 15639  total_loss: 5.267  loss_cls: 0.04287  loss_box_reg: 0.2077  loss_dis_0: 2.509  loss_dis_1: 2.498  time: 2.0830  data_time: 0.0665  lr: 0.002  max_mem: 15138M
[09/19 02:19:47 d2.utils.events]:  eta: 5:24:42  iter: 15659  total_loss: 5.256  loss_cls: 0.04151  loss_box_reg: 0.2101  loss_dis_0: 2.513  loss_dis_1: 2.495  time: 2.0830  data_time: 0.0735  lr: 0.002  max_mem: 15138M
[09/19 02:20:29 d2.utils.events]:  eta: 5:23:55  iter: 15679  total_loss: 5.281  loss_cls: 0.04406  loss_box_reg: 0.2315  loss_dis_0: 2.509  loss_dis_1: 2.499  time: 2.0830  data_time: 0.0524  lr: 0.002  max_mem: 15138M
[09/19 02:21:10 d2.utils.events]:  eta: 5:23:11  iter: 15699  total_loss: 5.268  loss_cls: 0.04467  loss_box_reg: 0.2215  loss_dis_0: 2.509  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0609  lr: 0.002  max_mem: 15138M
[09/19 02:21:52 d2.utils.events]:  eta: 5:22:25  iter: 15719  total_loss: 5.259  loss_cls: 0.04703  loss_box_reg: 0.2102  loss_dis_0: 2.511  loss_dis_1: 2.494  time: 2.0830  data_time: 0.0654  lr: 0.002  max_mem: 15138M
[09/19 02:22:34 d2.utils.events]:  eta: 5:21:43  iter: 15739  total_loss: 5.25  loss_cls: 0.04126  loss_box_reg: 0.2043  loss_dis_0: 2.508  loss_dis_1: 2.496  time: 2.0830  data_time: 0.0597  lr: 0.002  max_mem: 15138M
[09/19 02:23:16 d2.utils.events]:  eta: 5:21:01  iter: 15759  total_loss: 5.266  loss_cls: 0.03943  loss_box_reg: 0.2145  loss_dis_0: 2.501  loss_dis_1: 2.506  time: 2.0830  data_time: 0.0646  lr: 0.002  max_mem: 15138M
[09/19 02:23:57 d2.utils.events]:  eta: 5:20:17  iter: 15779  total_loss: 5.262  loss_cls: 0.03969  loss_box_reg: 0.2153  loss_dis_0: 2.507  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0680  lr: 0.002  max_mem: 15138M
[09/19 02:24:39 d2.utils.events]:  eta: 5:19:29  iter: 15799  total_loss: 5.292  loss_cls: 0.04503  loss_box_reg: 0.2394  loss_dis_0: 2.509  loss_dis_1: 2.495  time: 2.0830  data_time: 0.0662  lr: 0.002  max_mem: 15138M
[09/19 02:25:21 d2.utils.events]:  eta: 5:18:46  iter: 15819  total_loss: 5.249  loss_cls: 0.03892  loss_box_reg: 0.2086  loss_dis_0: 2.511  loss_dis_1: 2.498  time: 2.0830  data_time: 0.0610  lr: 0.002  max_mem: 15138M
[09/19 02:26:03 d2.utils.events]:  eta: 5:18:05  iter: 15839  total_loss: 5.266  loss_cls: 0.04062  loss_box_reg: 0.2154  loss_dis_0: 2.506  loss_dis_1: 2.503  time: 2.0830  data_time: 0.0670  lr: 0.002  max_mem: 15138M
[09/19 02:26:44 d2.utils.events]:  eta: 5:17:20  iter: 15859  total_loss: 5.272  loss_cls: 0.04307  loss_box_reg: 0.2276  loss_dis_0: 2.507  loss_dis_1: 2.495  time: 2.0830  data_time: 0.0648  lr: 0.002  max_mem: 15138M
[09/19 02:27:26 d2.utils.events]:  eta: 5:16:33  iter: 15879  total_loss: 5.278  loss_cls: 0.04657  loss_box_reg: 0.2297  loss_dis_0: 2.506  loss_dis_1: 2.496  time: 2.0830  data_time: 0.0619  lr: 0.002  max_mem: 15138M
[09/19 02:28:08 d2.utils.events]:  eta: 5:15:51  iter: 15899  total_loss: 5.276  loss_cls: 0.043  loss_box_reg: 0.2244  loss_dis_0: 2.504  loss_dis_1: 2.502  time: 2.0830  data_time: 0.0523  lr: 0.002  max_mem: 15138M
[09/19 02:28:49 d2.utils.events]:  eta: 5:15:00  iter: 15919  total_loss: 5.271  loss_cls: 0.04228  loss_box_reg: 0.2271  loss_dis_0: 2.5  loss_dis_1: 2.502  time: 2.0830  data_time: 0.0616  lr: 0.002  max_mem: 15138M
[09/19 02:29:31 d2.utils.events]:  eta: 5:14:18  iter: 15939  total_loss: 5.26  loss_cls: 0.04191  loss_box_reg: 0.205  loss_dis_0: 2.512  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0625  lr: 0.002  max_mem: 15138M
[09/19 02:30:12 d2.utils.events]:  eta: 5:13:34  iter: 15959  total_loss: 5.275  loss_cls: 0.04409  loss_box_reg: 0.2276  loss_dis_0: 2.51  loss_dis_1: 2.494  time: 2.0830  data_time: 0.0587  lr: 0.002  max_mem: 15138M
[09/19 02:30:54 d2.utils.events]:  eta: 5:12:51  iter: 15979  total_loss: 5.268  loss_cls: 0.04049  loss_box_reg: 0.219  loss_dis_0: 2.513  loss_dis_1: 2.491  time: 2.0830  data_time: 0.0699  lr: 0.002  max_mem: 15138M
[09/19 02:31:36 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0015999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 02:31:39 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 02:31:39 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 02:31:39 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 02:31:39 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 02:31:53 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0014 s / iter. Inference: 0.4689 s / iter. Eval: 0.0013 s / iter. Total: 0.4715 s / iter. ETA=0:01:23
[09/19 02:31:59 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0014 s / iter. Inference: 0.4758 s / iter. Eval: 0.0012 s / iter. Total: 0.4784 s / iter. ETA=0:01:19
[09/19 02:32:04 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0017 s / iter. Inference: 0.4739 s / iter. Eval: 0.0012 s / iter. Total: 0.4769 s / iter. ETA=0:01:13
[09/19 02:32:09 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0016 s / iter. Inference: 0.4720 s / iter. Eval: 0.0012 s / iter. Total: 0.4749 s / iter. ETA=0:01:08
[09/19 02:32:14 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0016 s / iter. Inference: 0.4687 s / iter. Eval: 0.0011 s / iter. Total: 0.4716 s / iter. ETA=0:01:02
[09/19 02:32:19 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0016 s / iter. Inference: 0.4705 s / iter. Eval: 0.0011 s / iter. Total: 0.4734 s / iter. ETA=0:00:57
[09/19 02:32:25 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0019 s / iter. Inference: 0.4721 s / iter. Eval: 0.0012 s / iter. Total: 0.4753 s / iter. ETA=0:00:52
[09/19 02:32:30 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0019 s / iter. Inference: 0.4701 s / iter. Eval: 0.0012 s / iter. Total: 0.4733 s / iter. ETA=0:00:47
[09/19 02:32:35 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0019 s / iter. Inference: 0.4667 s / iter. Eval: 0.0012 s / iter. Total: 0.4698 s / iter. ETA=0:00:41
[09/19 02:32:41 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0020 s / iter. Inference: 0.4690 s / iter. Eval: 0.0012 s / iter. Total: 0.4723 s / iter. ETA=0:00:36
[09/19 02:32:46 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0020 s / iter. Inference: 0.4696 s / iter. Eval: 0.0012 s / iter. Total: 0.4728 s / iter. ETA=0:00:31
[09/19 02:32:51 d2.evaluation.evaluator]: Inference done 134/188. Dataloading: 0.0020 s / iter. Inference: 0.4672 s / iter. Eval: 0.0012 s / iter. Total: 0.4705 s / iter. ETA=0:00:25
[09/19 02:32:56 d2.evaluation.evaluator]: Inference done 146/188. Dataloading: 0.0020 s / iter. Inference: 0.4644 s / iter. Eval: 0.0012 s / iter. Total: 0.4676 s / iter. ETA=0:00:19
[09/19 02:33:02 d2.evaluation.evaluator]: Inference done 157/188. Dataloading: 0.0020 s / iter. Inference: 0.4656 s / iter. Eval: 0.0012 s / iter. Total: 0.4689 s / iter. ETA=0:00:14
[09/19 02:33:07 d2.evaluation.evaluator]: Inference done 168/188. Dataloading: 0.0020 s / iter. Inference: 0.4651 s / iter. Eval: 0.0012 s / iter. Total: 0.4683 s / iter. ETA=0:00:09
[09/19 02:33:12 d2.evaluation.evaluator]: Inference done 179/188. Dataloading: 0.0020 s / iter. Inference: 0.4655 s / iter. Eval: 0.0012 s / iter. Total: 0.4687 s / iter. ETA=0:00:04
[09/19 02:33:36 d2.evaluation.evaluator]: Total inference time: 0:01:45.570961 (0.576890 s / iter per device, on 8 devices)
[09/19 02:33:36 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.464217 s / iter per device, on 8 devices)
[09/19 02:33:36 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[57.058616236365, 62.855178554705795, 70.79094403506807, 41.93834529766109, 61.403812024459924, 55.75480735709125, 45.87396537058199, 58.44460204361245]
[09/19 02:34:32 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 02:34:32 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 02:34:32 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 02:34:32 d2.evaluation.testing]: copypaste: 32.4403,56.7650,32.2438
[09/19 02:34:32 d2.utils.events]:  eta: 5:12:07  iter: 15999  total_loss: 5.28  loss_cls: 0.04837  loss_box_reg: 0.2275  loss_dis_0: 2.514  loss_dis_1: 2.486  time: 2.0830  data_time: 0.0660  lr: 0.002  max_mem: 15138M
[09/19 02:35:14 d2.utils.events]:  eta: 5:11:28  iter: 16019  total_loss: 5.252  loss_cls: 0.04433  loss_box_reg: 0.2148  loss_dis_0: 2.512  loss_dis_1: 2.49  time: 2.0830  data_time: 0.0668  lr: 0.002  max_mem: 15138M
[09/19 02:35:56 d2.utils.events]:  eta: 5:10:49  iter: 16039  total_loss: 5.26  loss_cls: 0.03906  loss_box_reg: 0.2133  loss_dis_0: 2.502  loss_dis_1: 2.501  time: 2.0830  data_time: 0.0769  lr: 0.002  max_mem: 15138M
[09/19 02:36:37 d2.utils.events]:  eta: 5:10:08  iter: 16059  total_loss: 5.265  loss_cls: 0.04383  loss_box_reg: 0.2103  loss_dis_0: 2.501  loss_dis_1: 2.503  time: 2.0830  data_time: 0.0581  lr: 0.002  max_mem: 15138M
[09/19 02:37:19 d2.utils.events]:  eta: 5:09:27  iter: 16079  total_loss: 5.271  loss_cls: 0.0417  loss_box_reg: 0.2224  loss_dis_0: 2.507  loss_dis_1: 2.499  time: 2.0830  data_time: 0.0584  lr: 0.002  max_mem: 15138M
[09/19 02:38:00 d2.utils.events]:  eta: 5:08:44  iter: 16099  total_loss: 5.259  loss_cls: 0.03915  loss_box_reg: 0.2173  loss_dis_0: 2.5  loss_dis_1: 2.501  time: 2.0829  data_time: 0.0675  lr: 0.002  max_mem: 15138M
[09/19 02:38:42 d2.utils.events]:  eta: 5:08:04  iter: 16119  total_loss: 5.258  loss_cls: 0.04171  loss_box_reg: 0.2106  loss_dis_0: 2.489  loss_dis_1: 2.512  time: 2.0829  data_time: 0.0657  lr: 0.002  max_mem: 15138M
[09/19 02:39:24 d2.utils.events]:  eta: 5:07:24  iter: 16139  total_loss: 5.247  loss_cls: 0.04018  loss_box_reg: 0.2151  loss_dis_0: 2.497  loss_dis_1: 2.51  time: 2.0829  data_time: 0.0694  lr: 0.002  max_mem: 15138M
[09/19 02:40:05 d2.utils.events]:  eta: 5:06:42  iter: 16159  total_loss: 5.269  loss_cls: 0.04328  loss_box_reg: 0.2258  loss_dis_0: 2.497  loss_dis_1: 2.506  time: 2.0829  data_time: 0.0676  lr: 0.002  max_mem: 15138M
[09/19 02:40:47 d2.utils.events]:  eta: 5:05:57  iter: 16179  total_loss: 5.248  loss_cls: 0.04047  loss_box_reg: 0.2105  loss_dis_0: 2.499  loss_dis_1: 2.5  time: 2.0829  data_time: 0.0686  lr: 0.002  max_mem: 15138M
[09/19 02:41:29 d2.utils.events]:  eta: 5:05:20  iter: 16199  total_loss: 5.265  loss_cls: 0.04044  loss_box_reg: 0.2144  loss_dis_0: 2.5  loss_dis_1: 2.503  time: 2.0829  data_time: 0.0609  lr: 0.002  max_mem: 15138M
[09/19 02:42:11 d2.utils.events]:  eta: 5:04:38  iter: 16219  total_loss: 5.282  loss_cls: 0.04484  loss_box_reg: 0.2303  loss_dis_0: 2.506  loss_dis_1: 2.504  time: 2.0829  data_time: 0.0636  lr: 0.002  max_mem: 15138M
[09/19 02:42:52 d2.utils.events]:  eta: 5:03:56  iter: 16239  total_loss: 5.267  loss_cls: 0.04161  loss_box_reg: 0.2207  loss_dis_0: 2.509  loss_dis_1: 2.496  time: 2.0830  data_time: 0.0635  lr: 0.002  max_mem: 15138M
[09/19 02:43:34 d2.utils.events]:  eta: 5:03:15  iter: 16259  total_loss: 5.259  loss_cls: 0.04014  loss_box_reg: 0.2117  loss_dis_0: 2.508  loss_dis_1: 2.494  time: 2.0829  data_time: 0.0684  lr: 0.002  max_mem: 15138M
[09/19 02:44:16 d2.utils.events]:  eta: 5:02:39  iter: 16279  total_loss: 5.255  loss_cls: 0.04092  loss_box_reg: 0.2118  loss_dis_0: 2.507  loss_dis_1: 2.494  time: 2.0830  data_time: 0.0587  lr: 0.002  max_mem: 15138M
[09/19 02:44:58 d2.utils.events]:  eta: 5:02:00  iter: 16299  total_loss: 5.271  loss_cls: 0.04477  loss_box_reg: 0.2258  loss_dis_0: 2.506  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0649  lr: 0.002  max_mem: 15138M
[09/19 02:45:39 d2.utils.events]:  eta: 5:01:18  iter: 16319  total_loss: 5.282  loss_cls: 0.04654  loss_box_reg: 0.2304  loss_dis_0: 2.509  loss_dis_1: 2.494  time: 2.0830  data_time: 0.0722  lr: 0.002  max_mem: 15138M
[09/19 02:46:21 d2.utils.events]:  eta: 5:00:36  iter: 16339  total_loss: 5.261  loss_cls: 0.04243  loss_box_reg: 0.2197  loss_dis_0: 2.508  loss_dis_1: 2.495  time: 2.0830  data_time: 0.0560  lr: 0.002  max_mem: 15138M
[09/19 02:47:03 d2.utils.events]:  eta: 4:59:56  iter: 16359  total_loss: 5.257  loss_cls: 0.0408  loss_box_reg: 0.2061  loss_dis_0: 2.503  loss_dis_1: 2.495  time: 2.0830  data_time: 0.0679  lr: 0.002  max_mem: 15138M
[09/19 02:47:45 d2.utils.events]:  eta: 4:59:15  iter: 16379  total_loss: 5.275  loss_cls: 0.04113  loss_box_reg: 0.2323  loss_dis_0: 2.505  loss_dis_1: 2.499  time: 2.0830  data_time: 0.0678  lr: 0.002  max_mem: 15138M
[09/19 02:48:27 d2.utils.events]:  eta: 4:58:33  iter: 16399  total_loss: 5.277  loss_cls: 0.04081  loss_box_reg: 0.2315  loss_dis_0: 2.504  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0695  lr: 0.002  max_mem: 15138M
[09/19 02:49:09 d2.utils.events]:  eta: 4:57:53  iter: 16419  total_loss: 5.25  loss_cls: 0.04267  loss_box_reg: 0.2069  loss_dis_0: 2.5  loss_dis_1: 2.501  time: 2.0830  data_time: 0.0679  lr: 0.002  max_mem: 15138M
[09/19 02:49:51 d2.utils.events]:  eta: 4:57:15  iter: 16439  total_loss: 5.256  loss_cls: 0.0418  loss_box_reg: 0.2141  loss_dis_0: 2.502  loss_dis_1: 2.501  time: 2.0830  data_time: 0.0645  lr: 0.002  max_mem: 15138M
[09/19 02:50:32 d2.utils.events]:  eta: 4:56:30  iter: 16459  total_loss: 5.273  loss_cls: 0.04263  loss_box_reg: 0.2235  loss_dis_0: 2.507  loss_dis_1: 2.495  time: 2.0830  data_time: 0.0625  lr: 0.002  max_mem: 15138M
[09/19 02:51:14 d2.utils.events]:  eta: 4:55:51  iter: 16479  total_loss: 5.277  loss_cls: 0.04538  loss_box_reg: 0.222  loss_dis_0: 2.505  loss_dis_1: 2.499  time: 2.0830  data_time: 0.0666  lr: 0.002  max_mem: 15138M
[09/19 02:51:56 d2.utils.events]:  eta: 4:55:11  iter: 16499  total_loss: 5.258  loss_cls: 0.04276  loss_box_reg: 0.2133  loss_dis_0: 2.508  loss_dis_1: 2.49  time: 2.0831  data_time: 0.0609  lr: 0.002  max_mem: 15138M
[09/19 02:52:38 d2.utils.events]:  eta: 4:54:31  iter: 16519  total_loss: 5.258  loss_cls: 0.04249  loss_box_reg: 0.2106  loss_dis_0: 2.51  loss_dis_1: 2.493  time: 2.0831  data_time: 0.0606  lr: 0.002  max_mem: 15138M
[09/19 02:53:20 d2.utils.events]:  eta: 4:53:55  iter: 16539  total_loss: 5.28  loss_cls: 0.04081  loss_box_reg: 0.2352  loss_dis_0: 2.512  loss_dis_1: 2.489  time: 2.0831  data_time: 0.0600  lr: 0.002  max_mem: 15138M
[09/19 02:54:02 d2.utils.events]:  eta: 4:53:14  iter: 16559  total_loss: 5.261  loss_cls: 0.04247  loss_box_reg: 0.2162  loss_dis_0: 2.512  loss_dis_1: 2.496  time: 2.0831  data_time: 0.0622  lr: 0.002  max_mem: 15138M
[09/19 02:54:44 d2.utils.events]:  eta: 4:52:33  iter: 16579  total_loss: 5.264  loss_cls: 0.04078  loss_box_reg: 0.222  loss_dis_0: 2.516  loss_dis_1: 2.487  time: 2.0831  data_time: 0.0624  lr: 0.002  max_mem: 15138M
[09/19 02:55:26 d2.utils.events]:  eta: 4:51:52  iter: 16599  total_loss: 5.276  loss_cls: 0.04245  loss_box_reg: 0.2262  loss_dis_0: 2.513  loss_dis_1: 2.489  time: 2.0831  data_time: 0.0553  lr: 0.002  max_mem: 15138M
[09/19 02:56:07 d2.utils.events]:  eta: 4:51:11  iter: 16619  total_loss: 5.258  loss_cls: 0.03841  loss_box_reg: 0.2168  loss_dis_0: 2.509  loss_dis_1: 2.492  time: 2.0831  data_time: 0.0699  lr: 0.002  max_mem: 15138M
[09/19 02:56:49 d2.utils.events]:  eta: 4:50:32  iter: 16639  total_loss: 5.26  loss_cls: 0.04231  loss_box_reg: 0.2104  loss_dis_0: 2.51  loss_dis_1: 2.491  time: 2.0831  data_time: 0.0676  lr: 0.002  max_mem: 15138M
[09/19 02:57:31 d2.utils.events]:  eta: 4:49:49  iter: 16659  total_loss: 5.261  loss_cls: 0.04091  loss_box_reg: 0.2235  loss_dis_0: 2.51  loss_dis_1: 2.489  time: 2.0831  data_time: 0.0591  lr: 0.002  max_mem: 15138M
[09/19 02:58:13 d2.utils.events]:  eta: 4:49:09  iter: 16679  total_loss: 5.267  loss_cls: 0.04617  loss_box_reg: 0.2242  loss_dis_0: 2.509  loss_dis_1: 2.489  time: 2.0831  data_time: 0.0682  lr: 0.002  max_mem: 15138M
[09/19 02:58:54 d2.utils.events]:  eta: 4:48:31  iter: 16699  total_loss: 5.235  loss_cls: 0.03711  loss_box_reg: 0.1955  loss_dis_0: 2.509  loss_dis_1: 2.488  time: 2.0831  data_time: 0.0628  lr: 0.002  max_mem: 15138M
[09/19 02:59:36 d2.utils.events]:  eta: 4:47:52  iter: 16719  total_loss: 5.247  loss_cls: 0.04248  loss_box_reg: 0.2088  loss_dis_0: 2.514  loss_dis_1: 2.487  time: 2.0831  data_time: 0.0596  lr: 0.002  max_mem: 15138M
[09/19 03:00:18 d2.utils.events]:  eta: 4:47:10  iter: 16739  total_loss: 5.275  loss_cls: 0.04285  loss_box_reg: 0.2263  loss_dis_0: 2.513  loss_dis_1: 2.489  time: 2.0831  data_time: 0.0756  lr: 0.002  max_mem: 15138M
[09/19 03:01:00 d2.utils.events]:  eta: 4:46:29  iter: 16759  total_loss: 5.241  loss_cls: 0.03893  loss_box_reg: 0.2092  loss_dis_0: 2.504  loss_dis_1: 2.496  time: 2.0831  data_time: 0.0485  lr: 0.002  max_mem: 15138M
[09/19 03:01:42 d2.utils.events]:  eta: 4:45:47  iter: 16779  total_loss: 5.271  loss_cls: 0.04459  loss_box_reg: 0.2242  loss_dis_0: 2.499  loss_dis_1: 2.5  time: 2.0831  data_time: 0.0610  lr: 0.002  max_mem: 15138M
[09/19 03:02:23 d2.utils.events]:  eta: 4:45:03  iter: 16799  total_loss: 5.279  loss_cls: 0.04335  loss_box_reg: 0.2328  loss_dis_0: 2.502  loss_dis_1: 2.496  time: 2.0831  data_time: 0.0617  lr: 0.002  max_mem: 15138M
[09/19 03:03:05 d2.utils.events]:  eta: 4:44:22  iter: 16819  total_loss: 5.251  loss_cls: 0.0399  loss_box_reg: 0.2141  loss_dis_0: 2.502  loss_dis_1: 2.496  time: 2.0831  data_time: 0.0655  lr: 0.002  max_mem: 15138M
[09/19 03:03:47 d2.utils.events]:  eta: 4:43:37  iter: 16839  total_loss: 5.27  loss_cls: 0.04362  loss_box_reg: 0.2365  loss_dis_0: 2.509  loss_dis_1: 2.492  time: 2.0831  data_time: 0.0584  lr: 0.002  max_mem: 15138M
[09/19 03:04:29 d2.utils.events]:  eta: 4:42:58  iter: 16859  total_loss: 5.255  loss_cls: 0.04253  loss_box_reg: 0.2115  loss_dis_0: 2.505  loss_dis_1: 2.488  time: 2.0831  data_time: 0.0567  lr: 0.002  max_mem: 15138M
[09/19 03:05:10 d2.utils.events]:  eta: 4:42:18  iter: 16879  total_loss: 5.273  loss_cls: 0.04692  loss_box_reg: 0.2249  loss_dis_0: 2.505  loss_dis_1: 2.499  time: 2.0831  data_time: 0.0652  lr: 0.002  max_mem: 15138M
[09/19 03:05:52 d2.utils.events]:  eta: 4:41:37  iter: 16899  total_loss: 5.249  loss_cls: 0.04277  loss_box_reg: 0.205  loss_dis_0: 2.503  loss_dis_1: 2.496  time: 2.0832  data_time: 0.0673  lr: 0.002  max_mem: 15138M
[09/19 03:06:34 d2.utils.events]:  eta: 4:40:57  iter: 16919  total_loss: 5.268  loss_cls: 0.03924  loss_box_reg: 0.2238  loss_dis_0: 2.507  loss_dis_1: 2.496  time: 2.0832  data_time: 0.0681  lr: 0.002  max_mem: 15138M
[09/19 03:07:16 d2.utils.events]:  eta: 4:40:14  iter: 16939  total_loss: 5.271  loss_cls: 0.0426  loss_box_reg: 0.2264  loss_dis_0: 2.513  loss_dis_1: 2.493  time: 2.0832  data_time: 0.0664  lr: 0.002  max_mem: 15138M
[09/19 03:07:57 d2.utils.events]:  eta: 4:39:38  iter: 16959  total_loss: 5.268  loss_cls: 0.04353  loss_box_reg: 0.2188  loss_dis_0: 2.506  loss_dis_1: 2.497  time: 2.0832  data_time: 0.0593  lr: 0.002  max_mem: 15138M
[09/19 03:08:39 d2.utils.events]:  eta: 4:38:56  iter: 16979  total_loss: 5.251  loss_cls: 0.04407  loss_box_reg: 0.2067  loss_dis_0: 2.504  loss_dis_1: 2.501  time: 2.0832  data_time: 0.0550  lr: 0.002  max_mem: 15138M
[09/19 03:09:21 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0016999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 03:09:23 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 03:09:23 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 03:09:24 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 03:09:24 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 03:09:38 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0011 s / iter. Inference: 0.4850 s / iter. Eval: 0.0019 s / iter. Total: 0.4880 s / iter. ETA=0:01:26
[09/19 03:09:44 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0014 s / iter. Inference: 0.4861 s / iter. Eval: 0.0013 s / iter. Total: 0.4888 s / iter. ETA=0:01:21
[09/19 03:09:49 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0015 s / iter. Inference: 0.4801 s / iter. Eval: 0.0012 s / iter. Total: 0.4829 s / iter. ETA=0:01:14
[09/19 03:09:54 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0023 s / iter. Inference: 0.4796 s / iter. Eval: 0.0016 s / iter. Total: 0.4836 s / iter. ETA=0:01:09
[09/19 03:10:00 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0023 s / iter. Inference: 0.4779 s / iter. Eval: 0.0015 s / iter. Total: 0.4817 s / iter. ETA=0:01:04
[09/19 03:10:05 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0021 s / iter. Inference: 0.4763 s / iter. Eval: 0.0015 s / iter. Total: 0.4799 s / iter. ETA=0:00:58
[09/19 03:10:10 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0021 s / iter. Inference: 0.4766 s / iter. Eval: 0.0014 s / iter. Total: 0.4802 s / iter. ETA=0:00:53
[09/19 03:10:15 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0020 s / iter. Inference: 0.4742 s / iter. Eval: 0.0014 s / iter. Total: 0.4777 s / iter. ETA=0:00:47
[09/19 03:10:20 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0020 s / iter. Inference: 0.4691 s / iter. Eval: 0.0014 s / iter. Total: 0.4726 s / iter. ETA=0:00:41
[09/19 03:10:26 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0020 s / iter. Inference: 0.4700 s / iter. Eval: 0.0013 s / iter. Total: 0.4735 s / iter. ETA=0:00:36
[09/19 03:10:31 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0024 s / iter. Inference: 0.4715 s / iter. Eval: 0.0013 s / iter. Total: 0.4753 s / iter. ETA=0:00:31
[09/19 03:10:37 d2.evaluation.evaluator]: Inference done 134/188. Dataloading: 0.0024 s / iter. Inference: 0.4691 s / iter. Eval: 0.0013 s / iter. Total: 0.4728 s / iter. ETA=0:00:25
[09/19 03:10:42 d2.evaluation.evaluator]: Inference done 146/188. Dataloading: 0.0023 s / iter. Inference: 0.4669 s / iter. Eval: 0.0013 s / iter. Total: 0.4705 s / iter. ETA=0:00:19
[09/19 03:10:47 d2.evaluation.evaluator]: Inference done 157/188. Dataloading: 0.0022 s / iter. Inference: 0.4668 s / iter. Eval: 0.0013 s / iter. Total: 0.4704 s / iter. ETA=0:00:14
[09/19 03:10:52 d2.evaluation.evaluator]: Inference done 169/188. Dataloading: 0.0023 s / iter. Inference: 0.4655 s / iter. Eval: 0.0013 s / iter. Total: 0.4692 s / iter. ETA=0:00:08
[09/19 03:10:58 d2.evaluation.evaluator]: Inference done 180/188. Dataloading: 0.0023 s / iter. Inference: 0.4657 s / iter. Eval: 0.0013 s / iter. Total: 0.4693 s / iter. ETA=0:00:03
[09/19 03:11:21 d2.evaluation.evaluator]: Total inference time: 0:01:45.712223 (0.577662 s / iter per device, on 8 devices)
[09/19 03:11:21 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:25 (0.464620 s / iter per device, on 8 devices)
[09/19 03:11:22 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[57.39729608399629, 61.835708282646586, 71.05191840702375, 42.38921857497897, 63.2046616464707, 54.99173068547793, 45.37296276695248, 57.90586726594535]
[09/19 03:12:18 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 03:12:18 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 03:12:18 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 03:12:18 d2.evaluation.testing]: copypaste: 32.5375,56.7687,32.0677
[09/19 03:12:18 d2.utils.events]:  eta: 4:38:15  iter: 16999  total_loss: 5.264  loss_cls: 0.04498  loss_box_reg: 0.2153  loss_dis_0: 2.509  loss_dis_1: 2.49  time: 2.0832  data_time: 0.0532  lr: 0.002  max_mem: 15138M
[09/19 03:12:59 d2.utils.events]:  eta: 4:37:31  iter: 17019  total_loss: 5.278  loss_cls: 0.04125  loss_box_reg: 0.2235  loss_dis_0: 2.509  loss_dis_1: 2.494  time: 2.0831  data_time: 0.0665  lr: 0.002  max_mem: 15138M
[09/19 03:13:41 d2.utils.events]:  eta: 4:36:49  iter: 17039  total_loss: 5.27  loss_cls: 0.04158  loss_box_reg: 0.2293  loss_dis_0: 2.511  loss_dis_1: 2.492  time: 2.0831  data_time: 0.0694  lr: 0.002  max_mem: 15138M
[09/19 03:14:22 d2.utils.events]:  eta: 4:36:09  iter: 17059  total_loss: 5.265  loss_cls: 0.04626  loss_box_reg: 0.2299  loss_dis_0: 2.509  loss_dis_1: 2.486  time: 2.0831  data_time: 0.0750  lr: 0.002  max_mem: 15138M
[09/19 03:15:04 d2.utils.events]:  eta: 4:35:27  iter: 17079  total_loss: 5.255  loss_cls: 0.03752  loss_box_reg: 0.2161  loss_dis_0: 2.518  loss_dis_1: 2.484  time: 2.0831  data_time: 0.0668  lr: 0.002  max_mem: 15138M
[09/19 03:15:45 d2.utils.events]:  eta: 4:34:45  iter: 17099  total_loss: 5.252  loss_cls: 0.0377  loss_box_reg: 0.2162  loss_dis_0: 2.512  loss_dis_1: 2.488  time: 2.0831  data_time: 0.0656  lr: 0.002  max_mem: 15138M
[09/19 03:16:27 d2.utils.events]:  eta: 4:34:04  iter: 17119  total_loss: 5.269  loss_cls: 0.04475  loss_box_reg: 0.2189  loss_dis_0: 2.514  loss_dis_1: 2.481  time: 2.0831  data_time: 0.0596  lr: 0.002  max_mem: 15138M
[09/19 03:17:08 d2.utils.events]:  eta: 4:33:20  iter: 17139  total_loss: 5.273  loss_cls: 0.0443  loss_box_reg: 0.2243  loss_dis_0: 2.514  loss_dis_1: 2.483  time: 2.0831  data_time: 0.0626  lr: 0.002  max_mem: 15138M
[09/19 03:17:50 d2.utils.events]:  eta: 4:32:36  iter: 17159  total_loss: 5.253  loss_cls: 0.04185  loss_box_reg: 0.2109  loss_dis_0: 2.518  loss_dis_1: 2.478  time: 2.0831  data_time: 0.0606  lr: 0.002  max_mem: 15138M
[09/19 03:18:31 d2.utils.events]:  eta: 4:31:54  iter: 17179  total_loss: 5.258  loss_cls: 0.04451  loss_box_reg: 0.2201  loss_dis_0: 2.532  loss_dis_1: 2.47  time: 2.0831  data_time: 0.0661  lr: 0.002  max_mem: 15138M
[09/19 03:19:13 d2.utils.events]:  eta: 4:31:10  iter: 17199  total_loss: 5.243  loss_cls: 0.04261  loss_box_reg: 0.2167  loss_dis_0: 2.567  loss_dis_1: 2.422  time: 2.0831  data_time: 0.0641  lr: 0.002  max_mem: 15138M
[09/19 03:19:55 d2.utils.events]:  eta: 4:30:28  iter: 17219  total_loss: 5.281  loss_cls: 0.04559  loss_box_reg: 0.2326  loss_dis_0: 2.447  loss_dis_1: 2.553  time: 2.0831  data_time: 0.0637  lr: 0.002  max_mem: 15138M
[09/19 03:20:37 d2.utils.events]:  eta: 4:29:44  iter: 17239  total_loss: 5.273  loss_cls: 0.04315  loss_box_reg: 0.2282  loss_dis_0: 2.451  loss_dis_1: 2.545  time: 2.0831  data_time: 0.0631  lr: 0.002  max_mem: 15138M
[09/19 03:21:18 d2.utils.events]:  eta: 4:29:02  iter: 17259  total_loss: 5.254  loss_cls: 0.04281  loss_box_reg: 0.225  loss_dis_0: 2.656  loss_dis_1: 2.358  time: 2.0831  data_time: 0.0599  lr: 0.002  max_mem: 15138M
[09/19 03:22:00 d2.utils.events]:  eta: 4:28:20  iter: 17279  total_loss: 5.265  loss_cls: 0.04229  loss_box_reg: 0.2296  loss_dis_0: 2.667  loss_dis_1: 2.323  time: 2.0831  data_time: 0.0654  lr: 0.002  max_mem: 15138M
[09/19 03:22:42 d2.utils.events]:  eta: 4:27:37  iter: 17299  total_loss: 5.256  loss_cls: 0.04165  loss_box_reg: 0.2239  loss_dis_0: 2.53  loss_dis_1: 2.462  time: 2.0831  data_time: 0.0700  lr: 0.002  max_mem: 15138M
[09/19 03:23:24 d2.utils.events]:  eta: 4:26:54  iter: 17319  total_loss: 5.253  loss_cls: 0.04426  loss_box_reg: 0.2103  loss_dis_0: 2.48  loss_dis_1: 2.512  time: 2.0831  data_time: 0.0631  lr: 0.002  max_mem: 15138M
[09/19 03:24:05 d2.utils.events]:  eta: 4:26:11  iter: 17339  total_loss: 5.262  loss_cls: 0.04379  loss_box_reg: 0.2253  loss_dis_0: 2.447  loss_dis_1: 2.538  time: 2.0831  data_time: 0.0570  lr: 0.002  max_mem: 15138M
[09/19 03:24:47 d2.utils.events]:  eta: 4:25:25  iter: 17359  total_loss: 5.267  loss_cls: 0.04052  loss_box_reg: 0.2084  loss_dis_0: 2.39  loss_dis_1: 2.623  time: 2.0830  data_time: 0.0601  lr: 0.002  max_mem: 15138M
[09/19 03:25:28 d2.utils.events]:  eta: 4:24:40  iter: 17379  total_loss: 5.285  loss_cls: 0.04179  loss_box_reg: 0.2207  loss_dis_0: 2.467  loss_dis_1: 2.548  time: 2.0830  data_time: 0.0700  lr: 0.002  max_mem: 15138M
[09/19 03:26:10 d2.utils.events]:  eta: 4:23:58  iter: 17399  total_loss: 5.233  loss_cls: 0.04188  loss_box_reg: 0.2201  loss_dis_0: 2.533  loss_dis_1: 2.449  time: 2.0830  data_time: 0.0613  lr: 0.002  max_mem: 15138M
[09/19 03:26:52 d2.utils.events]:  eta: 4:23:15  iter: 17419  total_loss: 5.206  loss_cls: 0.04174  loss_box_reg: 0.2303  loss_dis_0: 2.487  loss_dis_1: 2.449  time: 2.0830  data_time: 0.0719  lr: 0.002  max_mem: 15138M
[09/19 03:27:33 d2.utils.events]:  eta: 4:22:30  iter: 17439  total_loss: 5.235  loss_cls: 0.04397  loss_box_reg: 0.2293  loss_dis_0: 2.374  loss_dis_1: 2.584  time: 2.0830  data_time: 0.0686  lr: 0.002  max_mem: 15138M
[09/19 03:28:15 d2.utils.events]:  eta: 4:21:45  iter: 17459  total_loss: 5.251  loss_cls: 0.04175  loss_box_reg: 0.2156  loss_dis_0: 2.384  loss_dis_1: 2.616  time: 2.0830  data_time: 0.0652  lr: 0.002  max_mem: 15138M
[09/19 03:28:57 d2.utils.events]:  eta: 4:21:01  iter: 17479  total_loss: 5.247  loss_cls: 0.04199  loss_box_reg: 0.2174  loss_dis_0: 2.535  loss_dis_1: 2.434  time: 2.0830  data_time: 0.0644  lr: 0.002  max_mem: 15138M
[09/19 03:29:38 d2.utils.events]:  eta: 4:20:18  iter: 17499  total_loss: 5.226  loss_cls: 0.03948  loss_box_reg: 0.2142  loss_dis_0: 2.605  loss_dis_1: 2.379  time: 2.0830  data_time: 0.0568  lr: 0.002  max_mem: 15138M
[09/19 03:30:20 d2.utils.events]:  eta: 4:19:36  iter: 17519  total_loss: 5.284  loss_cls: 0.04519  loss_box_reg: 0.2305  loss_dis_0: 2.627  loss_dis_1: 2.376  time: 2.0830  data_time: 0.0765  lr: 0.002  max_mem: 15138M
[09/19 03:31:02 d2.utils.events]:  eta: 4:18:52  iter: 17539  total_loss: 5.257  loss_cls: 0.04281  loss_box_reg: 0.2206  loss_dis_0: 2.566  loss_dis_1: 2.429  time: 2.0830  data_time: 0.0651  lr: 0.002  max_mem: 15138M
[09/19 03:31:44 d2.utils.events]:  eta: 4:18:11  iter: 17559  total_loss: 5.232  loss_cls: 0.03954  loss_box_reg: 0.2118  loss_dis_0: 2.513  loss_dis_1: 2.49  time: 2.0830  data_time: 0.0710  lr: 0.002  max_mem: 15138M
[09/19 03:32:26 d2.utils.events]:  eta: 4:17:30  iter: 17579  total_loss: 5.261  loss_cls: 0.04797  loss_box_reg: 0.2493  loss_dis_0: 2.436  loss_dis_1: 2.55  time: 2.0831  data_time: 0.0595  lr: 0.002  max_mem: 15138M
[09/19 03:33:07 d2.utils.events]:  eta: 4:16:47  iter: 17599  total_loss: 5.271  loss_cls: 0.04587  loss_box_reg: 0.2358  loss_dis_0: 2.311  loss_dis_1: 2.659  time: 2.0831  data_time: 0.0610  lr: 0.002  max_mem: 15138M
[09/19 03:33:49 d2.utils.events]:  eta: 4:16:04  iter: 17619  total_loss: 5.273  loss_cls: 0.04535  loss_box_reg: 0.23  loss_dis_0: 2.47  loss_dis_1: 2.516  time: 2.0831  data_time: 0.0635  lr: 0.002  max_mem: 15138M
[09/19 03:34:31 d2.utils.events]:  eta: 4:15:23  iter: 17639  total_loss: 5.244  loss_cls: 0.04452  loss_box_reg: 0.2124  loss_dis_0: 2.456  loss_dis_1: 2.539  time: 2.0831  data_time: 0.0598  lr: 0.002  max_mem: 15138M
[09/19 03:35:12 d2.utils.events]:  eta: 4:14:42  iter: 17659  total_loss: 5.261  loss_cls: 0.04076  loss_box_reg: 0.2123  loss_dis_0: 2.6  loss_dis_1: 2.387  time: 2.0831  data_time: 0.0663  lr: 0.002  max_mem: 15138M
[09/19 03:35:54 d2.utils.events]:  eta: 4:14:02  iter: 17679  total_loss: 5.294  loss_cls: 0.04549  loss_box_reg: 0.2322  loss_dis_0: 2.693  loss_dis_1: 2.334  time: 2.0831  data_time: 0.0684  lr: 0.002  max_mem: 15138M
[09/19 03:36:36 d2.utils.events]:  eta: 4:13:20  iter: 17699  total_loss: 5.314  loss_cls: 0.04641  loss_box_reg: 0.2195  loss_dis_0: 2.615  loss_dis_1: 2.435  time: 2.0831  data_time: 0.0574  lr: 0.002  max_mem: 15138M
[09/19 03:37:18 d2.utils.events]:  eta: 4:12:38  iter: 17719  total_loss: 5.326  loss_cls: 0.04452  loss_box_reg: 0.2338  loss_dis_0: 2.542  loss_dis_1: 2.506  time: 2.0831  data_time: 0.0601  lr: 0.002  max_mem: 15138M
[09/19 03:37:59 d2.utils.events]:  eta: 4:11:55  iter: 17739  total_loss: 5.332  loss_cls: 0.04273  loss_box_reg: 0.2165  loss_dis_0: 2.511  loss_dis_1: 2.548  time: 2.0831  data_time: 0.0819  lr: 0.002  max_mem: 15138M
[09/19 03:38:41 d2.utils.events]:  eta: 4:11:12  iter: 17759  total_loss: 5.345  loss_cls: 0.04831  loss_box_reg: 0.2459  loss_dis_0: 2.512  loss_dis_1: 2.544  time: 2.0830  data_time: 0.0504  lr: 0.002  max_mem: 15138M
[09/19 03:39:22 d2.utils.events]:  eta: 4:10:29  iter: 17779  total_loss: 5.3  loss_cls: 0.04236  loss_box_reg: 0.225  loss_dis_0: 2.48  loss_dis_1: 2.554  time: 2.0830  data_time: 0.0682  lr: 0.002  max_mem: 15138M
[09/19 03:40:04 d2.utils.events]:  eta: 4:09:49  iter: 17799  total_loss: 5.306  loss_cls: 0.04994  loss_box_reg: 0.2461  loss_dis_0: 2.429  loss_dis_1: 2.564  time: 2.0830  data_time: 0.0524  lr: 0.002  max_mem: 15138M
[09/19 03:40:46 d2.utils.events]:  eta: 4:09:07  iter: 17819  total_loss: 5.248  loss_cls: 0.0449  loss_box_reg: 0.2327  loss_dis_0: 2.431  loss_dis_1: 2.552  time: 2.0830  data_time: 0.0625  lr: 0.002  max_mem: 15138M
[09/19 03:41:28 d2.utils.events]:  eta: 4:08:25  iter: 17839  total_loss: 5.246  loss_cls: 0.04403  loss_box_reg: 0.2359  loss_dis_0: 2.43  loss_dis_1: 2.542  time: 2.0830  data_time: 0.0563  lr: 0.002  max_mem: 15138M
[09/19 03:42:09 d2.utils.events]:  eta: 4:07:44  iter: 17859  total_loss: 5.258  loss_cls: 0.03983  loss_box_reg: 0.2195  loss_dis_0: 2.457  loss_dis_1: 2.537  time: 2.0830  data_time: 0.0650  lr: 0.002  max_mem: 15138M
[09/19 03:42:51 d2.utils.events]:  eta: 4:07:02  iter: 17879  total_loss: 5.224  loss_cls: 0.04034  loss_box_reg: 0.1951  loss_dis_0: 2.565  loss_dis_1: 2.434  time: 2.0830  data_time: 0.0653  lr: 0.002  max_mem: 15138M
[09/19 03:43:33 d2.utils.events]:  eta: 4:06:19  iter: 17899  total_loss: 5.227  loss_cls: 0.03988  loss_box_reg: 0.2029  loss_dis_0: 2.559  loss_dis_1: 2.433  time: 2.0830  data_time: 0.0740  lr: 0.002  max_mem: 15138M
[09/19 03:44:14 d2.utils.events]:  eta: 4:05:38  iter: 17919  total_loss: 5.275  loss_cls: 0.04612  loss_box_reg: 0.2424  loss_dis_0: 2.501  loss_dis_1: 2.493  time: 2.0830  data_time: 0.0595  lr: 0.002  max_mem: 15138M
[09/19 03:44:56 d2.utils.events]:  eta: 4:04:55  iter: 17939  total_loss: 5.264  loss_cls: 0.04173  loss_box_reg: 0.231  loss_dis_0: 2.5  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0716  lr: 0.002  max_mem: 15138M
[09/19 03:45:38 d2.utils.events]:  eta: 4:04:14  iter: 17959  total_loss: 5.268  loss_cls: 0.04523  loss_box_reg: 0.2205  loss_dis_0: 2.485  loss_dis_1: 2.517  time: 2.0830  data_time: 0.0626  lr: 0.002  max_mem: 15138M
[09/19 03:46:19 d2.utils.events]:  eta: 4:03:31  iter: 17979  total_loss: 5.255  loss_cls: 0.04235  loss_box_reg: 0.2364  loss_dis_0: 2.499  loss_dis_1: 2.486  time: 2.0830  data_time: 0.0664  lr: 0.002  max_mem: 15138M
[09/19 03:47:01 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0017999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 03:47:04 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 03:47:04 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 03:47:04 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 03:47:04 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 03:47:19 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0011 s / iter. Inference: 0.4750 s / iter. Eval: 0.0011 s / iter. Total: 0.4772 s / iter. ETA=0:01:24
[09/19 03:47:24 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0014 s / iter. Inference: 0.4738 s / iter. Eval: 0.0011 s / iter. Total: 0.4763 s / iter. ETA=0:01:19
[09/19 03:47:29 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0014 s / iter. Inference: 0.4730 s / iter. Eval: 0.0011 s / iter. Total: 0.4756 s / iter. ETA=0:01:13
[09/19 03:47:34 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0015 s / iter. Inference: 0.4693 s / iter. Eval: 0.0011 s / iter. Total: 0.4720 s / iter. ETA=0:01:07
[09/19 03:47:39 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0016 s / iter. Inference: 0.4683 s / iter. Eval: 0.0011 s / iter. Total: 0.4711 s / iter. ETA=0:01:02
[09/19 03:47:45 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0016 s / iter. Inference: 0.4701 s / iter. Eval: 0.0011 s / iter. Total: 0.4729 s / iter. ETA=0:00:57
[09/19 03:47:50 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0016 s / iter. Inference: 0.4694 s / iter. Eval: 0.0011 s / iter. Total: 0.4722 s / iter. ETA=0:00:52
[09/19 03:47:55 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0016 s / iter. Inference: 0.4675 s / iter. Eval: 0.0011 s / iter. Total: 0.4702 s / iter. ETA=0:00:47
[09/19 03:48:00 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0017 s / iter. Inference: 0.4636 s / iter. Eval: 0.0011 s / iter. Total: 0.4666 s / iter. ETA=0:00:41
[09/19 03:48:05 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0017 s / iter. Inference: 0.4650 s / iter. Eval: 0.0011 s / iter. Total: 0.4679 s / iter. ETA=0:00:36
[09/19 03:48:11 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0017 s / iter. Inference: 0.4659 s / iter. Eval: 0.0011 s / iter. Total: 0.4688 s / iter. ETA=0:00:30
[09/19 03:48:16 d2.evaluation.evaluator]: Inference done 133/188. Dataloading: 0.0018 s / iter. Inference: 0.4652 s / iter. Eval: 0.0011 s / iter. Total: 0.4682 s / iter. ETA=0:00:25
[09/19 03:48:21 d2.evaluation.evaluator]: Inference done 145/188. Dataloading: 0.0018 s / iter. Inference: 0.4628 s / iter. Eval: 0.0011 s / iter. Total: 0.4658 s / iter. ETA=0:00:20
[09/19 03:48:26 d2.evaluation.evaluator]: Inference done 156/188. Dataloading: 0.0018 s / iter. Inference: 0.4638 s / iter. Eval: 0.0011 s / iter. Total: 0.4668 s / iter. ETA=0:00:14
[09/19 03:48:32 d2.evaluation.evaluator]: Inference done 168/188. Dataloading: 0.0018 s / iter. Inference: 0.4625 s / iter. Eval: 0.0012 s / iter. Total: 0.4656 s / iter. ETA=0:00:09
[09/19 03:48:37 d2.evaluation.evaluator]: Inference done 179/188. Dataloading: 0.0018 s / iter. Inference: 0.4623 s / iter. Eval: 0.0012 s / iter. Total: 0.4654 s / iter. ETA=0:00:04
[09/19 03:49:01 d2.evaluation.evaluator]: Total inference time: 0:01:45.010825 (0.573830 s / iter per device, on 8 devices)
[09/19 03:49:01 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.461314 s / iter per device, on 8 devices)
[09/19 03:49:02 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[56.21346853477076, 61.62886945348518, 70.46771004161695, 39.32891553128262, 61.563617352754974, 51.139958805968654, 45.617999545440846, 58.94619634509517]
[09/19 03:49:58 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 03:49:58 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 03:49:58 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 03:49:58 d2.evaluation.testing]: copypaste: 31.7036,55.6133,30.9824
[09/19 03:49:58 d2.utils.events]:  eta: 4:02:49  iter: 17999  total_loss: 5.279  loss_cls: 0.04639  loss_box_reg: 0.2368  loss_dis_0: 2.466  loss_dis_1: 2.531  time: 2.0830  data_time: 0.0595  lr: 0.002  max_mem: 15138M
[09/19 03:50:40 d2.utils.events]:  eta: 4:02:08  iter: 18019  total_loss: 5.274  loss_cls: 0.04436  loss_box_reg: 0.2316  loss_dis_0: 2.492  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0598  lr: 0.002  max_mem: 15138M
[09/19 03:51:22 d2.utils.events]:  eta: 4:01:28  iter: 18039  total_loss: 5.248  loss_cls: 0.04161  loss_box_reg: 0.2105  loss_dis_0: 2.535  loss_dis_1: 2.461  time: 2.0830  data_time: 0.0727  lr: 0.002  max_mem: 15138M
[09/19 03:52:03 d2.utils.events]:  eta: 4:00:46  iter: 18059  total_loss: 5.267  loss_cls: 0.0449  loss_box_reg: 0.2268  loss_dis_0: 2.495  loss_dis_1: 2.503  time: 2.0830  data_time: 0.0575  lr: 0.002  max_mem: 15138M
[09/19 03:52:45 d2.utils.events]:  eta: 4:00:04  iter: 18079  total_loss: 5.242  loss_cls: 0.04489  loss_box_reg: 0.2189  loss_dis_0: 2.492  loss_dis_1: 2.505  time: 2.0830  data_time: 0.0674  lr: 0.002  max_mem: 15138M
[09/19 03:53:26 d2.utils.events]:  eta: 3:59:23  iter: 18099  total_loss: 5.285  loss_cls: 0.04856  loss_box_reg: 0.2423  loss_dis_0: 2.5  loss_dis_1: 2.493  time: 2.0830  data_time: 0.0631  lr: 0.002  max_mem: 15138M
[09/19 03:54:08 d2.utils.events]:  eta: 3:58:41  iter: 18119  total_loss: 5.253  loss_cls: 0.04301  loss_box_reg: 0.2117  loss_dis_0: 2.53  loss_dis_1: 2.466  time: 2.0830  data_time: 0.0691  lr: 0.002  max_mem: 15138M
[09/19 03:54:50 d2.utils.events]:  eta: 3:58:00  iter: 18139  total_loss: 5.303  loss_cls: 0.04434  loss_box_reg: 0.2368  loss_dis_0: 2.545  loss_dis_1: 2.474  time: 2.0830  data_time: 0.0636  lr: 0.002  max_mem: 15138M
[09/19 03:55:32 d2.utils.events]:  eta: 3:57:21  iter: 18159  total_loss: 5.298  loss_cls: 0.04417  loss_box_reg: 0.2354  loss_dis_0: 2.533  loss_dis_1: 2.472  time: 2.0830  data_time: 0.0607  lr: 0.002  max_mem: 15138M
[09/19 03:56:13 d2.utils.events]:  eta: 3:56:44  iter: 18179  total_loss: 5.265  loss_cls: 0.03929  loss_box_reg: 0.2204  loss_dis_0: 2.513  loss_dis_1: 2.489  time: 2.0830  data_time: 0.0650  lr: 0.002  max_mem: 15138M
[09/19 03:56:55 d2.utils.events]:  eta: 3:56:06  iter: 18199  total_loss: 5.255  loss_cls: 0.04229  loss_box_reg: 0.2151  loss_dis_0: 2.502  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0642  lr: 0.002  max_mem: 15138M
[09/19 03:57:37 d2.utils.events]:  eta: 3:55:24  iter: 18219  total_loss: 5.236  loss_cls: 0.04277  loss_box_reg: 0.2151  loss_dis_0: 2.479  loss_dis_1: 2.512  time: 2.0830  data_time: 0.0630  lr: 0.002  max_mem: 15138M
[09/19 03:58:19 d2.utils.events]:  eta: 3:54:43  iter: 18239  total_loss: 5.273  loss_cls: 0.04286  loss_box_reg: 0.2194  loss_dis_0: 2.534  loss_dis_1: 2.467  time: 2.0830  data_time: 0.0635  lr: 0.002  max_mem: 15138M
[09/19 03:59:01 d2.utils.events]:  eta: 3:54:04  iter: 18259  total_loss: 5.254  loss_cls: 0.04301  loss_box_reg: 0.2148  loss_dis_0: 2.487  loss_dis_1: 2.513  time: 2.0830  data_time: 0.0653  lr: 0.002  max_mem: 15138M
[09/19 03:59:42 d2.utils.events]:  eta: 3:53:18  iter: 18279  total_loss: 5.243  loss_cls: 0.04069  loss_box_reg: 0.2072  loss_dis_0: 2.472  loss_dis_1: 2.523  time: 2.0830  data_time: 0.0633  lr: 0.002  max_mem: 15138M
[09/19 04:00:24 d2.utils.events]:  eta: 3:52:37  iter: 18299  total_loss: 5.257  loss_cls: 0.04168  loss_box_reg: 0.2175  loss_dis_0: 2.415  loss_dis_1: 2.576  time: 2.0830  data_time: 0.0608  lr: 0.002  max_mem: 15138M
[09/19 04:01:06 d2.utils.events]:  eta: 3:51:55  iter: 18319  total_loss: 5.277  loss_cls: 0.04495  loss_box_reg: 0.2205  loss_dis_0: 2.496  loss_dis_1: 2.508  time: 2.0830  data_time: 0.0588  lr: 0.002  max_mem: 15138M
[09/19 04:01:47 d2.utils.events]:  eta: 3:51:15  iter: 18339  total_loss: 5.296  loss_cls: 0.04511  loss_box_reg: 0.2311  loss_dis_0: 2.505  loss_dis_1: 2.51  time: 2.0830  data_time: 0.0658  lr: 0.002  max_mem: 15138M
[09/19 04:02:29 d2.utils.events]:  eta: 3:50:34  iter: 18359  total_loss: 5.314  loss_cls: 0.04537  loss_box_reg: 0.2414  loss_dis_0: 2.512  loss_dis_1: 2.513  time: 2.0830  data_time: 0.0600  lr: 0.002  max_mem: 15138M
[09/19 04:03:11 d2.utils.events]:  eta: 3:49:55  iter: 18379  total_loss: 5.264  loss_cls: 0.03817  loss_box_reg: 0.2009  loss_dis_0: 2.514  loss_dis_1: 2.506  time: 2.0830  data_time: 0.0662  lr: 0.002  max_mem: 15138M
[09/19 04:03:52 d2.utils.events]:  eta: 3:49:12  iter: 18399  total_loss: 5.282  loss_cls: 0.04466  loss_box_reg: 0.2206  loss_dis_0: 2.528  loss_dis_1: 2.485  time: 2.0830  data_time: 0.0594  lr: 0.002  max_mem: 15138M
[09/19 04:04:34 d2.utils.events]:  eta: 3:48:31  iter: 18419  total_loss: 5.276  loss_cls: 0.0397  loss_box_reg: 0.2175  loss_dis_0: 2.519  loss_dis_1: 2.494  time: 2.0830  data_time: 0.0638  lr: 0.002  max_mem: 15138M
[09/19 04:05:16 d2.utils.events]:  eta: 3:47:49  iter: 18439  total_loss: 5.269  loss_cls: 0.04332  loss_box_reg: 0.2235  loss_dis_0: 2.485  loss_dis_1: 2.511  time: 2.0830  data_time: 0.0545  lr: 0.002  max_mem: 15138M
[09/19 04:05:58 d2.utils.events]:  eta: 3:47:12  iter: 18459  total_loss: 5.292  loss_cls: 0.04683  loss_box_reg: 0.2317  loss_dis_0: 2.468  loss_dis_1: 2.544  time: 2.0831  data_time: 0.0519  lr: 0.002  max_mem: 15138M
[09/19 04:06:40 d2.utils.events]:  eta: 3:46:31  iter: 18479  total_loss: 5.246  loss_cls: 0.04178  loss_box_reg: 0.2115  loss_dis_0: 2.435  loss_dis_1: 2.546  time: 2.0831  data_time: 0.0584  lr: 0.002  max_mem: 15138M
[09/19 04:07:21 d2.utils.events]:  eta: 3:45:48  iter: 18499  total_loss: 5.263  loss_cls: 0.04069  loss_box_reg: 0.2174  loss_dis_0: 2.437  loss_dis_1: 2.566  time: 2.0831  data_time: 0.0713  lr: 0.002  max_mem: 15138M
[09/19 04:08:03 d2.utils.events]:  eta: 3:45:07  iter: 18519  total_loss: 5.286  loss_cls: 0.04449  loss_box_reg: 0.2282  loss_dis_0: 2.469  loss_dis_1: 2.538  time: 2.0831  data_time: 0.0604  lr: 0.002  max_mem: 15138M
[09/19 04:08:45 d2.utils.events]:  eta: 3:44:25  iter: 18539  total_loss: 5.252  loss_cls: 0.04373  loss_box_reg: 0.2193  loss_dis_0: 2.482  loss_dis_1: 2.51  time: 2.0831  data_time: 0.0738  lr: 0.002  max_mem: 15138M
[09/19 04:09:27 d2.utils.events]:  eta: 3:43:44  iter: 18559  total_loss: 5.259  loss_cls: 0.04276  loss_box_reg: 0.2274  loss_dis_0: 2.432  loss_dis_1: 2.561  time: 2.0831  data_time: 0.0592  lr: 0.002  max_mem: 15138M
[09/19 04:10:09 d2.utils.events]:  eta: 3:43:03  iter: 18579  total_loss: 5.273  loss_cls: 0.04311  loss_box_reg: 0.2301  loss_dis_0: 2.476  loss_dis_1: 2.506  time: 2.0831  data_time: 0.0610  lr: 0.002  max_mem: 15138M
[09/19 04:10:50 d2.utils.events]:  eta: 3:42:20  iter: 18599  total_loss: 5.275  loss_cls: 0.04436  loss_box_reg: 0.214  loss_dis_0: 2.472  loss_dis_1: 2.539  time: 2.0831  data_time: 0.0670  lr: 0.002  max_mem: 15138M
[09/19 04:11:32 d2.utils.events]:  eta: 3:41:38  iter: 18619  total_loss: 5.252  loss_cls: 0.04375  loss_box_reg: 0.218  loss_dis_0: 2.498  loss_dis_1: 2.503  time: 2.0831  data_time: 0.0578  lr: 0.002  max_mem: 15138M
[09/19 04:12:14 d2.utils.events]:  eta: 3:40:57  iter: 18639  total_loss: 5.232  loss_cls: 0.04295  loss_box_reg: 0.204  loss_dis_0: 2.467  loss_dis_1: 2.527  time: 2.0831  data_time: 0.0593  lr: 0.002  max_mem: 15138M
[09/19 04:12:56 d2.utils.events]:  eta: 3:40:15  iter: 18659  total_loss: 5.266  loss_cls: 0.04512  loss_box_reg: 0.2218  loss_dis_0: 2.551  loss_dis_1: 2.454  time: 2.0831  data_time: 0.0643  lr: 0.002  max_mem: 15138M
[09/19 04:13:37 d2.utils.events]:  eta: 3:39:33  iter: 18679  total_loss: 5.255  loss_cls: 0.0409  loss_box_reg: 0.2147  loss_dis_0: 2.556  loss_dis_1: 2.446  time: 2.0831  data_time: 0.0598  lr: 0.002  max_mem: 15138M
[09/19 04:14:19 d2.utils.events]:  eta: 3:38:52  iter: 18699  total_loss: 5.284  loss_cls: 0.04356  loss_box_reg: 0.2229  loss_dis_0: 2.505  loss_dis_1: 2.496  time: 2.0831  data_time: 0.0623  lr: 0.002  max_mem: 15138M
[09/19 04:15:01 d2.utils.events]:  eta: 3:38:11  iter: 18719  total_loss: 5.242  loss_cls: 0.04041  loss_box_reg: 0.2032  loss_dis_0: 2.467  loss_dis_1: 2.528  time: 2.0831  data_time: 0.0611  lr: 0.002  max_mem: 15138M
[09/19 04:15:43 d2.utils.events]:  eta: 3:37:32  iter: 18739  total_loss: 5.281  loss_cls: 0.04751  loss_box_reg: 0.2372  loss_dis_0: 2.495  loss_dis_1: 2.5  time: 2.0831  data_time: 0.0583  lr: 0.002  max_mem: 15138M
[09/19 04:16:25 d2.utils.events]:  eta: 3:36:53  iter: 18759  total_loss: 5.246  loss_cls: 0.0398  loss_box_reg: 0.2308  loss_dis_0: 2.486  loss_dis_1: 2.498  time: 2.0831  data_time: 0.0685  lr: 0.002  max_mem: 15138M
[09/19 04:17:07 d2.utils.events]:  eta: 3:36:12  iter: 18779  total_loss: 5.235  loss_cls: 0.04008  loss_box_reg: 0.2051  loss_dis_0: 2.477  loss_dis_1: 2.514  time: 2.0831  data_time: 0.0655  lr: 0.002  max_mem: 15138M
[09/19 04:17:49 d2.utils.events]:  eta: 3:35:31  iter: 18799  total_loss: 5.227  loss_cls: 0.04228  loss_box_reg: 0.2016  loss_dis_0: 2.482  loss_dis_1: 2.505  time: 2.0831  data_time: 0.0734  lr: 0.002  max_mem: 15138M
[09/19 04:18:30 d2.utils.events]:  eta: 3:34:50  iter: 18819  total_loss: 5.252  loss_cls: 0.04457  loss_box_reg: 0.2181  loss_dis_0: 2.494  loss_dis_1: 2.481  time: 2.0831  data_time: 0.0670  lr: 0.002  max_mem: 15138M
[09/19 04:19:12 d2.utils.events]:  eta: 3:34:11  iter: 18839  total_loss: 5.23  loss_cls: 0.04243  loss_box_reg: 0.207  loss_dis_0: 2.535  loss_dis_1: 2.44  time: 2.0831  data_time: 0.0606  lr: 0.002  max_mem: 15138M
[09/19 04:19:54 d2.utils.events]:  eta: 3:33:28  iter: 18859  total_loss: 5.26  loss_cls: 0.04086  loss_box_reg: 0.2086  loss_dis_0: 2.533  loss_dis_1: 2.469  time: 2.0831  data_time: 0.0627  lr: 0.002  max_mem: 15138M
[09/19 04:20:36 d2.utils.events]:  eta: 3:32:49  iter: 18879  total_loss: 5.267  loss_cls: 0.04377  loss_box_reg: 0.2081  loss_dis_0: 2.509  loss_dis_1: 2.505  time: 2.0831  data_time: 0.0610  lr: 0.002  max_mem: 15138M
[09/19 04:21:17 d2.utils.events]:  eta: 3:32:06  iter: 18899  total_loss: 5.3  loss_cls: 0.04084  loss_box_reg: 0.2228  loss_dis_0: 2.482  loss_dis_1: 2.551  time: 2.0831  data_time: 0.0599  lr: 0.002  max_mem: 15138M
[09/19 04:21:59 d2.utils.events]:  eta: 3:31:25  iter: 18919  total_loss: 5.274  loss_cls: 0.04128  loss_box_reg: 0.205  loss_dis_0: 2.46  loss_dis_1: 2.56  time: 2.0832  data_time: 0.0522  lr: 0.002  max_mem: 15138M
[09/19 04:22:41 d2.utils.events]:  eta: 3:30:44  iter: 18939  total_loss: 5.265  loss_cls: 0.04484  loss_box_reg: 0.2261  loss_dis_0: 2.45  loss_dis_1: 2.556  time: 2.0832  data_time: 0.0726  lr: 0.002  max_mem: 15138M
[09/19 04:23:23 d2.utils.events]:  eta: 3:30:02  iter: 18959  total_loss: 5.234  loss_cls: 0.04261  loss_box_reg: 0.2083  loss_dis_0: 2.49  loss_dis_1: 2.475  time: 2.0832  data_time: 0.0567  lr: 0.002  max_mem: 15138M
[09/19 04:24:04 d2.utils.events]:  eta: 3:29:21  iter: 18979  total_loss: 5.22  loss_cls: 0.04354  loss_box_reg: 0.224  loss_dis_0: 2.47  loss_dis_1: 2.487  time: 2.0832  data_time: 0.0682  lr: 0.002  max_mem: 15138M
[09/19 04:24:46 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0018999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 04:24:49 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 04:24:49 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 04:24:49 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 04:24:49 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 04:25:03 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0010 s / iter. Inference: 0.4716 s / iter. Eval: 0.0011 s / iter. Total: 0.4737 s / iter. ETA=0:01:23
[09/19 04:25:09 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0015 s / iter. Inference: 0.4846 s / iter. Eval: 0.0012 s / iter. Total: 0.4873 s / iter. ETA=0:01:20
[09/19 04:25:14 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0014 s / iter. Inference: 0.4805 s / iter. Eval: 0.0012 s / iter. Total: 0.4832 s / iter. ETA=0:01:14
[09/19 04:25:19 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0015 s / iter. Inference: 0.4742 s / iter. Eval: 0.0012 s / iter. Total: 0.4769 s / iter. ETA=0:01:08
[09/19 04:25:24 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0015 s / iter. Inference: 0.4706 s / iter. Eval: 0.0012 s / iter. Total: 0.4734 s / iter. ETA=0:01:02
[09/19 04:25:29 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0015 s / iter. Inference: 0.4708 s / iter. Eval: 0.0012 s / iter. Total: 0.4735 s / iter. ETA=0:00:57
[09/19 04:25:35 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0015 s / iter. Inference: 0.4705 s / iter. Eval: 0.0012 s / iter. Total: 0.4732 s / iter. ETA=0:00:52
[09/19 04:25:40 d2.evaluation.evaluator]: Inference done 89/188. Dataloading: 0.0015 s / iter. Inference: 0.4670 s / iter. Eval: 0.0011 s / iter. Total: 0.4697 s / iter. ETA=0:00:46
[09/19 04:25:45 d2.evaluation.evaluator]: Inference done 101/188. Dataloading: 0.0015 s / iter. Inference: 0.4642 s / iter. Eval: 0.0011 s / iter. Total: 0.4668 s / iter. ETA=0:00:40
[09/19 04:25:51 d2.evaluation.evaluator]: Inference done 112/188. Dataloading: 0.0015 s / iter. Inference: 0.4662 s / iter. Eval: 0.0011 s / iter. Total: 0.4688 s / iter. ETA=0:00:35
[09/19 04:25:56 d2.evaluation.evaluator]: Inference done 123/188. Dataloading: 0.0015 s / iter. Inference: 0.4665 s / iter. Eval: 0.0011 s / iter. Total: 0.4692 s / iter. ETA=0:00:30
[09/19 04:26:01 d2.evaluation.evaluator]: Inference done 135/188. Dataloading: 0.0016 s / iter. Inference: 0.4652 s / iter. Eval: 0.0011 s / iter. Total: 0.4680 s / iter. ETA=0:00:24
[09/19 04:26:07 d2.evaluation.evaluator]: Inference done 147/188. Dataloading: 0.0015 s / iter. Inference: 0.4624 s / iter. Eval: 0.0011 s / iter. Total: 0.4651 s / iter. ETA=0:00:19
[09/19 04:26:12 d2.evaluation.evaluator]: Inference done 158/188. Dataloading: 0.0016 s / iter. Inference: 0.4634 s / iter. Eval: 0.0012 s / iter. Total: 0.4662 s / iter. ETA=0:00:13
[09/19 04:26:17 d2.evaluation.evaluator]: Inference done 169/188. Dataloading: 0.0016 s / iter. Inference: 0.4629 s / iter. Eval: 0.0012 s / iter. Total: 0.4657 s / iter. ETA=0:00:08
[09/19 04:26:22 d2.evaluation.evaluator]: Inference done 180/188. Dataloading: 0.0016 s / iter. Inference: 0.4626 s / iter. Eval: 0.0012 s / iter. Total: 0.4654 s / iter. ETA=0:00:03
[09/19 04:26:46 d2.evaluation.evaluator]: Total inference time: 0:01:45.041514 (0.573997 s / iter per device, on 8 devices)
[09/19 04:26:46 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.461703 s / iter per device, on 8 devices)
[09/19 04:26:47 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[56.95207031227676, 60.614508156830226, 70.65894808287077, 38.69373194594287, 62.69388945447795, 48.89556195120703, 43.827195487076054, 58.03596036648288]
[09/19 04:27:43 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 04:27:43 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 04:27:43 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 04:27:43 d2.evaluation.testing]: copypaste: 30.3111,55.0465,28.9087
[09/19 04:27:43 d2.utils.events]:  eta: 3:28:39  iter: 18999  total_loss: 5.252  loss_cls: 0.04676  loss_box_reg: 0.2324  loss_dis_0: 2.475  loss_dis_1: 2.492  time: 2.0832  data_time: 0.0610  lr: 0.002  max_mem: 15138M
[09/19 04:28:25 d2.utils.events]:  eta: 3:27:57  iter: 19019  total_loss: 5.241  loss_cls: 0.04212  loss_box_reg: 0.2188  loss_dis_0: 2.516  loss_dis_1: 2.463  time: 2.0832  data_time: 0.0723  lr: 0.002  max_mem: 15138M
[09/19 04:29:06 d2.utils.events]:  eta: 3:27:13  iter: 19039  total_loss: 5.274  loss_cls: 0.04655  loss_box_reg: 0.2309  loss_dis_0: 2.441  loss_dis_1: 2.549  time: 2.0831  data_time: 0.0598  lr: 0.002  max_mem: 15138M
[09/19 04:29:48 d2.utils.events]:  eta: 3:26:29  iter: 19059  total_loss: 5.276  loss_cls: 0.04128  loss_box_reg: 0.2118  loss_dis_0: 2.44  loss_dis_1: 2.578  time: 2.0831  data_time: 0.0693  lr: 0.002  max_mem: 15138M
[09/19 04:30:29 d2.utils.events]:  eta: 3:25:47  iter: 19079  total_loss: 5.305  loss_cls: 0.04987  loss_box_reg: 0.2284  loss_dis_0: 2.445  loss_dis_1: 2.576  time: 2.0831  data_time: 0.0657  lr: 0.002  max_mem: 15138M
[09/19 04:31:11 d2.utils.events]:  eta: 3:25:07  iter: 19099  total_loss: 5.312  loss_cls: 0.04954  loss_box_reg: 0.2472  loss_dis_0: 2.536  loss_dis_1: 2.505  time: 2.0831  data_time: 0.0660  lr: 0.002  max_mem: 15138M
[09/19 04:31:52 d2.utils.events]:  eta: 3:24:25  iter: 19119  total_loss: 5.321  loss_cls: 0.04769  loss_box_reg: 0.2404  loss_dis_0: 2.476  loss_dis_1: 2.546  time: 2.0831  data_time: 0.0511  lr: 0.002  max_mem: 15138M
[09/19 04:32:34 d2.utils.events]:  eta: 3:23:43  iter: 19139  total_loss: 5.284  loss_cls: 0.04472  loss_box_reg: 0.225  loss_dis_0: 2.497  loss_dis_1: 2.518  time: 2.0831  data_time: 0.0568  lr: 0.002  max_mem: 15138M
[09/19 04:33:15 d2.utils.events]:  eta: 3:22:59  iter: 19159  total_loss: 5.29  loss_cls: 0.04281  loss_box_reg: 0.2245  loss_dis_0: 2.521  loss_dis_1: 2.491  time: 2.0831  data_time: 0.0608  lr: 0.002  max_mem: 15138M
[09/19 04:33:57 d2.utils.events]:  eta: 3:22:15  iter: 19179  total_loss: 5.251  loss_cls: 0.045  loss_box_reg: 0.2297  loss_dis_0: 2.519  loss_dis_1: 2.458  time: 2.0831  data_time: 0.0635  lr: 0.002  max_mem: 15138M
[09/19 04:34:39 d2.utils.events]:  eta: 3:21:31  iter: 19199  total_loss: 5.231  loss_cls: 0.03804  loss_box_reg: 0.2081  loss_dis_0: 2.589  loss_dis_1: 2.387  time: 2.0831  data_time: 0.0680  lr: 0.002  max_mem: 15138M
[09/19 04:35:20 d2.utils.events]:  eta: 3:20:49  iter: 19219  total_loss: 5.234  loss_cls: 0.04324  loss_box_reg: 0.2338  loss_dis_0: 2.506  loss_dis_1: 2.456  time: 2.0831  data_time: 0.0549  lr: 0.002  max_mem: 15138M
[09/19 04:36:02 d2.utils.events]:  eta: 3:20:07  iter: 19239  total_loss: 5.221  loss_cls: 0.04329  loss_box_reg: 0.2142  loss_dis_0: 2.539  loss_dis_1: 2.428  time: 2.0831  data_time: 0.0561  lr: 0.002  max_mem: 15138M
[09/19 04:36:44 d2.utils.events]:  eta: 3:19:26  iter: 19259  total_loss: 5.3  loss_cls: 0.04357  loss_box_reg: 0.2414  loss_dis_0: 2.607  loss_dis_1: 2.4  time: 2.0831  data_time: 0.0694  lr: 0.002  max_mem: 15138M
[09/19 04:37:25 d2.utils.events]:  eta: 3:18:44  iter: 19279  total_loss: 5.28  loss_cls: 0.04154  loss_box_reg: 0.2237  loss_dis_0: 2.57  loss_dis_1: 2.422  time: 2.0831  data_time: 0.0681  lr: 0.002  max_mem: 15138M
[09/19 04:38:07 d2.utils.events]:  eta: 3:18:02  iter: 19299  total_loss: 5.254  loss_cls: 0.04647  loss_box_reg: 0.2314  loss_dis_0: 2.458  loss_dis_1: 2.51  time: 2.0831  data_time: 0.0635  lr: 0.002  max_mem: 15138M
[09/19 04:38:49 d2.utils.events]:  eta: 3:17:18  iter: 19319  total_loss: 5.238  loss_cls: 0.0375  loss_box_reg: 0.2189  loss_dis_0: 2.46  loss_dis_1: 2.5  time: 2.0830  data_time: 0.0680  lr: 0.002  max_mem: 15138M
[09/19 04:39:30 d2.utils.events]:  eta: 3:16:35  iter: 19339  total_loss: 5.239  loss_cls: 0.04198  loss_box_reg: 0.2257  loss_dis_0: 2.452  loss_dis_1: 2.511  time: 2.0830  data_time: 0.0613  lr: 0.002  max_mem: 15138M
[09/19 04:40:12 d2.utils.events]:  eta: 3:15:56  iter: 19359  total_loss: 5.277  loss_cls: 0.04442  loss_box_reg: 0.2283  loss_dis_0: 2.425  loss_dis_1: 2.576  time: 2.0830  data_time: 0.0592  lr: 0.002  max_mem: 15138M
[09/19 04:40:53 d2.utils.events]:  eta: 3:15:11  iter: 19379  total_loss: 5.264  loss_cls: 0.04354  loss_box_reg: 0.2118  loss_dis_0: 2.417  loss_dis_1: 2.588  time: 2.0830  data_time: 0.0646  lr: 0.002  max_mem: 15138M
[09/19 04:41:35 d2.utils.events]:  eta: 3:14:27  iter: 19399  total_loss: 5.291  loss_cls: 0.04274  loss_box_reg: 0.2216  loss_dis_0: 2.477  loss_dis_1: 2.556  time: 2.0830  data_time: 0.0548  lr: 0.002  max_mem: 15138M
[09/19 04:42:17 d2.utils.events]:  eta: 3:13:45  iter: 19419  total_loss: 5.257  loss_cls: 0.04377  loss_box_reg: 0.2084  loss_dis_0: 2.541  loss_dis_1: 2.47  time: 2.0830  data_time: 0.0587  lr: 0.002  max_mem: 15138M
[09/19 04:42:58 d2.utils.events]:  eta: 3:13:03  iter: 19439  total_loss: 5.257  loss_cls: 0.03899  loss_box_reg: 0.2142  loss_dis_0: 2.579  loss_dis_1: 2.407  time: 2.0830  data_time: 0.0680  lr: 0.002  max_mem: 15138M
[09/19 04:43:40 d2.utils.events]:  eta: 3:12:20  iter: 19459  total_loss: 5.264  loss_cls: 0.04269  loss_box_reg: 0.2171  loss_dis_0: 2.642  loss_dis_1: 2.377  time: 2.0830  data_time: 0.0518  lr: 0.002  max_mem: 15138M
[09/19 04:44:21 d2.utils.events]:  eta: 3:11:39  iter: 19479  total_loss: 5.269  loss_cls: 0.04062  loss_box_reg: 0.2167  loss_dis_0: 2.55  loss_dis_1: 2.454  time: 2.0830  data_time: 0.0617  lr: 0.002  max_mem: 15138M
[09/19 04:45:03 d2.utils.events]:  eta: 3:10:59  iter: 19499  total_loss: 5.268  loss_cls: 0.04786  loss_box_reg: 0.2266  loss_dis_0: 2.515  loss_dis_1: 2.488  time: 2.0830  data_time: 0.0714  lr: 0.002  max_mem: 15138M
[09/19 04:45:45 d2.utils.events]:  eta: 3:10:17  iter: 19519  total_loss: 5.276  loss_cls: 0.04504  loss_box_reg: 0.2165  loss_dis_0: 2.492  loss_dis_1: 2.511  time: 2.0830  data_time: 0.0655  lr: 0.002  max_mem: 15138M
[09/19 04:46:27 d2.utils.events]:  eta: 3:09:36  iter: 19539  total_loss: 5.258  loss_cls: 0.04056  loss_box_reg: 0.2252  loss_dis_0: 2.461  loss_dis_1: 2.529  time: 2.0830  data_time: 0.0565  lr: 0.002  max_mem: 15138M
[09/19 04:47:09 d2.utils.events]:  eta: 3:08:54  iter: 19559  total_loss: 5.28  loss_cls: 0.04276  loss_box_reg: 0.2252  loss_dis_0: 2.455  loss_dis_1: 2.544  time: 2.0830  data_time: 0.0636  lr: 0.002  max_mem: 15138M
[09/19 04:47:50 d2.utils.events]:  eta: 3:08:10  iter: 19579  total_loss: 5.258  loss_cls: 0.03911  loss_box_reg: 0.2211  loss_dis_0: 2.425  loss_dis_1: 2.567  time: 2.0830  data_time: 0.0651  lr: 0.002  max_mem: 15138M
[09/19 04:48:32 d2.utils.events]:  eta: 3:07:30  iter: 19599  total_loss: 5.262  loss_cls: 0.04262  loss_box_reg: 0.2125  loss_dis_0: 2.413  loss_dis_1: 2.586  time: 2.0830  data_time: 0.0560  lr: 0.002  max_mem: 15138M
[09/19 04:49:14 d2.utils.events]:  eta: 3:06:49  iter: 19619  total_loss: 5.267  loss_cls: 0.04397  loss_box_reg: 0.2165  loss_dis_0: 2.454  loss_dis_1: 2.537  time: 2.0830  data_time: 0.0688  lr: 0.002  max_mem: 15138M
[09/19 04:49:55 d2.utils.events]:  eta: 3:06:07  iter: 19639  total_loss: 5.267  loss_cls: 0.0427  loss_box_reg: 0.2295  loss_dis_0: 2.433  loss_dis_1: 2.554  time: 2.0830  data_time: 0.0548  lr: 0.002  max_mem: 15138M
[09/19 04:50:37 d2.utils.events]:  eta: 3:05:23  iter: 19659  total_loss: 5.275  loss_cls: 0.044  loss_box_reg: 0.2265  loss_dis_0: 2.516  loss_dis_1: 2.469  time: 2.0830  data_time: 0.0651  lr: 0.002  max_mem: 15138M
[09/19 04:51:18 d2.utils.events]:  eta: 3:04:41  iter: 19679  total_loss: 5.26  loss_cls: 0.04176  loss_box_reg: 0.2231  loss_dis_0: 2.513  loss_dis_1: 2.476  time: 2.0830  data_time: 0.0586  lr: 0.002  max_mem: 15138M
[09/19 04:52:00 d2.utils.events]:  eta: 3:03:59  iter: 19699  total_loss: 5.274  loss_cls: 0.04462  loss_box_reg: 0.2341  loss_dis_0: 2.474  loss_dis_1: 2.51  time: 2.0830  data_time: 0.0663  lr: 0.002  max_mem: 15138M
[09/19 04:52:41 d2.utils.events]:  eta: 3:03:13  iter: 19719  total_loss: 5.254  loss_cls: 0.04271  loss_box_reg: 0.2058  loss_dis_0: 2.54  loss_dis_1: 2.457  time: 2.0830  data_time: 0.0672  lr: 0.002  max_mem: 15138M
[09/19 04:53:23 d2.utils.events]:  eta: 3:02:31  iter: 19739  total_loss: 5.238  loss_cls: 0.0424  loss_box_reg: 0.2165  loss_dis_0: 2.491  loss_dis_1: 2.496  time: 2.0830  data_time: 0.0626  lr: 0.002  max_mem: 15138M
[09/19 04:54:05 d2.utils.events]:  eta: 3:01:48  iter: 19759  total_loss: 5.257  loss_cls: 0.04007  loss_box_reg: 0.2188  loss_dis_0: 2.48  loss_dis_1: 2.518  time: 2.0830  data_time: 0.0663  lr: 0.002  max_mem: 15138M
[09/19 04:54:47 d2.utils.events]:  eta: 3:01:05  iter: 19779  total_loss: 5.264  loss_cls: 0.0434  loss_box_reg: 0.2236  loss_dis_0: 2.501  loss_dis_1: 2.521  time: 2.0830  data_time: 0.0575  lr: 0.002  max_mem: 15138M
[09/19 04:55:28 d2.utils.events]:  eta: 3:00:22  iter: 19799  total_loss: 5.23  loss_cls: 0.03987  loss_box_reg: 0.2127  loss_dis_0: 2.616  loss_dis_1: 2.362  time: 2.0830  data_time: 0.0620  lr: 0.002  max_mem: 15138M
[09/19 04:56:10 d2.utils.events]:  eta: 2:59:40  iter: 19819  total_loss: 5.289  loss_cls: 0.0424  loss_box_reg: 0.2167  loss_dis_0: 2.557  loss_dis_1: 2.454  time: 2.0830  data_time: 0.0660  lr: 0.002  max_mem: 15138M
[09/19 04:56:52 d2.utils.events]:  eta: 2:59:00  iter: 19839  total_loss: 5.271  loss_cls: 0.04353  loss_box_reg: 0.2205  loss_dis_0: 2.522  loss_dis_1: 2.488  time: 2.0830  data_time: 0.0624  lr: 0.002  max_mem: 15138M
[09/19 04:57:34 d2.utils.events]:  eta: 2:58:19  iter: 19859  total_loss: 5.28  loss_cls: 0.04555  loss_box_reg: 0.2332  loss_dis_0: 2.46  loss_dis_1: 2.547  time: 2.0830  data_time: 0.0578  lr: 0.002  max_mem: 15138M
[09/19 04:58:15 d2.utils.events]:  eta: 2:57:35  iter: 19879  total_loss: 5.246  loss_cls: 0.04576  loss_box_reg: 0.2267  loss_dis_0: 2.391  loss_dis_1: 2.556  time: 2.0830  data_time: 0.0625  lr: 0.002  max_mem: 15138M
[09/19 04:58:57 d2.utils.events]:  eta: 2:56:55  iter: 19899  total_loss: 5.297  loss_cls: 0.04279  loss_box_reg: 0.2191  loss_dis_0: 2.504  loss_dis_1: 2.531  time: 2.0830  data_time: 0.0628  lr: 0.002  max_mem: 15138M
[09/19 04:59:39 d2.utils.events]:  eta: 2:56:13  iter: 19919  total_loss: 5.281  loss_cls: 0.04297  loss_box_reg: 0.2186  loss_dis_0: 2.581  loss_dis_1: 2.445  time: 2.0830  data_time: 0.0648  lr: 0.002  max_mem: 15138M
[09/19 05:00:21 d2.utils.events]:  eta: 2:55:32  iter: 19939  total_loss: 5.262  loss_cls: 0.04225  loss_box_reg: 0.2196  loss_dis_0: 2.581  loss_dis_1: 2.42  time: 2.0830  data_time: 0.0626  lr: 0.002  max_mem: 15138M
[09/19 05:01:02 d2.utils.events]:  eta: 2:54:46  iter: 19959  total_loss: 5.249  loss_cls: 0.04092  loss_box_reg: 0.211  loss_dis_0: 2.558  loss_dis_1: 2.436  time: 2.0830  data_time: 0.0560  lr: 0.002  max_mem: 15138M
[09/19 05:01:44 d2.utils.events]:  eta: 2:54:04  iter: 19979  total_loss: 5.271  loss_cls: 0.04263  loss_box_reg: 0.217  loss_dis_0: 2.518  loss_dis_1: 2.484  time: 2.0830  data_time: 0.0641  lr: 0.002  max_mem: 15138M
[09/19 05:02:25 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0019999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 05:02:28 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 05:02:28 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 05:02:28 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 05:02:28 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 05:02:44 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0011 s / iter. Inference: 0.4641 s / iter. Eval: 0.0012 s / iter. Total: 0.4663 s / iter. ETA=0:01:22
[09/19 05:02:49 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0016 s / iter. Inference: 0.4754 s / iter. Eval: 0.0012 s / iter. Total: 0.4782 s / iter. ETA=0:01:19
[09/19 05:02:55 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0027 s / iter. Inference: 0.4800 s / iter. Eval: 0.0013 s / iter. Total: 0.4841 s / iter. ETA=0:01:15
[09/19 05:03:00 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0023 s / iter. Inference: 0.4760 s / iter. Eval: 0.0012 s / iter. Total: 0.4797 s / iter. ETA=0:01:09
[09/19 05:03:05 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0022 s / iter. Inference: 0.4727 s / iter. Eval: 0.0012 s / iter. Total: 0.4762 s / iter. ETA=0:01:03
[09/19 05:03:10 d2.evaluation.evaluator]: Inference done 65/188. Dataloading: 0.0023 s / iter. Inference: 0.4781 s / iter. Eval: 0.0012 s / iter. Total: 0.4817 s / iter. ETA=0:00:59
[09/19 05:03:15 d2.evaluation.evaluator]: Inference done 76/188. Dataloading: 0.0022 s / iter. Inference: 0.4779 s / iter. Eval: 0.0012 s / iter. Total: 0.4814 s / iter. ETA=0:00:53
[09/19 05:03:20 d2.evaluation.evaluator]: Inference done 87/188. Dataloading: 0.0021 s / iter. Inference: 0.4765 s / iter. Eval: 0.0012 s / iter. Total: 0.4798 s / iter. ETA=0:00:48
[09/19 05:03:26 d2.evaluation.evaluator]: Inference done 99/188. Dataloading: 0.0023 s / iter. Inference: 0.4723 s / iter. Eval: 0.0012 s / iter. Total: 0.4758 s / iter. ETA=0:00:42
[09/19 05:03:31 d2.evaluation.evaluator]: Inference done 110/188. Dataloading: 0.0023 s / iter. Inference: 0.4730 s / iter. Eval: 0.0012 s / iter. Total: 0.4766 s / iter. ETA=0:00:37
[09/19 05:03:36 d2.evaluation.evaluator]: Inference done 121/188. Dataloading: 0.0024 s / iter. Inference: 0.4729 s / iter. Eval: 0.0012 s / iter. Total: 0.4766 s / iter. ETA=0:00:31
[09/19 05:03:42 d2.evaluation.evaluator]: Inference done 133/188. Dataloading: 0.0023 s / iter. Inference: 0.4704 s / iter. Eval: 0.0012 s / iter. Total: 0.4741 s / iter. ETA=0:00:26
[09/19 05:03:47 d2.evaluation.evaluator]: Inference done 145/188. Dataloading: 0.0023 s / iter. Inference: 0.4680 s / iter. Eval: 0.0012 s / iter. Total: 0.4716 s / iter. ETA=0:00:20
[09/19 05:03:52 d2.evaluation.evaluator]: Inference done 156/188. Dataloading: 0.0022 s / iter. Inference: 0.4682 s / iter. Eval: 0.0012 s / iter. Total: 0.4717 s / iter. ETA=0:00:15
[09/19 05:03:58 d2.evaluation.evaluator]: Inference done 168/188. Dataloading: 0.0022 s / iter. Inference: 0.4663 s / iter. Eval: 0.0012 s / iter. Total: 0.4697 s / iter. ETA=0:00:09
[09/19 05:04:03 d2.evaluation.evaluator]: Inference done 179/188. Dataloading: 0.0021 s / iter. Inference: 0.4659 s / iter. Eval: 0.0012 s / iter. Total: 0.4693 s / iter. ETA=0:00:04
[09/19 05:04:27 d2.evaluation.evaluator]: Total inference time: 0:01:45.650523 (0.577325 s / iter per device, on 8 devices)
[09/19 05:04:27 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:25 (0.464534 s / iter per device, on 8 devices)
[09/19 05:04:28 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[57.02527336949381, 62.030270913822704, 70.738715319408, 40.723843986430154, 63.19884373956539, 54.165496037161844, 45.06741867203302, 58.45959447139394]
[09/19 05:05:33 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 05:05:33 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 05:05:33 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 05:05:33 d2.evaluation.testing]: copypaste: 32.4533,56.4262,32.3936
[09/19 05:05:33 d2.utils.events]:  eta: 2:53:21  iter: 19999  total_loss: 5.247  loss_cls: 0.03899  loss_box_reg: 0.2103  loss_dis_0: 2.484  loss_dis_1: 2.513  time: 2.0830  data_time: 0.0622  lr: 0.002  max_mem: 15138M
[09/19 05:06:15 d2.utils.events]:  eta: 2:52:40  iter: 20019  total_loss: 5.285  loss_cls: 0.04374  loss_box_reg: 0.2351  loss_dis_0: 2.462  loss_dis_1: 2.542  time: 2.0830  data_time: 0.0559  lr: 0.002  max_mem: 15138M
[09/19 05:06:56 d2.utils.events]:  eta: 2:51:59  iter: 20039  total_loss: 5.241  loss_cls: 0.03815  loss_box_reg: 0.2024  loss_dis_0: 2.448  loss_dis_1: 2.549  time: 2.0830  data_time: 0.0533  lr: 0.002  max_mem: 15138M
[09/19 05:07:38 d2.utils.events]:  eta: 2:51:19  iter: 20059  total_loss: 5.261  loss_cls: 0.04253  loss_box_reg: 0.228  loss_dis_0: 2.43  loss_dis_1: 2.57  time: 2.0830  data_time: 0.0649  lr: 0.002  max_mem: 15138M
[09/19 05:08:20 d2.utils.events]:  eta: 2:50:40  iter: 20079  total_loss: 5.264  loss_cls: 0.04225  loss_box_reg: 0.223  loss_dis_0: 2.434  loss_dis_1: 2.562  time: 2.0830  data_time: 0.0621  lr: 0.002  max_mem: 15138M
[09/19 05:09:01 d2.utils.events]:  eta: 2:49:58  iter: 20099  total_loss: 5.248  loss_cls: 0.04506  loss_box_reg: 0.2334  loss_dis_0: 2.514  loss_dis_1: 2.482  time: 2.0829  data_time: 0.0571  lr: 0.002  max_mem: 15138M
[09/19 05:09:43 d2.utils.events]:  eta: 2:49:17  iter: 20119  total_loss: 5.193  loss_cls: 0.04242  loss_box_reg: 0.221  loss_dis_0: 2.459  loss_dis_1: 2.471  time: 2.0829  data_time: 0.0625  lr: 0.002  max_mem: 15138M
[09/19 05:10:24 d2.utils.events]:  eta: 2:48:37  iter: 20139  total_loss: 5.244  loss_cls: 0.04002  loss_box_reg: 0.2307  loss_dis_0: 2.518  loss_dis_1: 2.483  time: 2.0829  data_time: 0.0546  lr: 0.002  max_mem: 15138M
[09/19 05:11:06 d2.utils.events]:  eta: 2:47:57  iter: 20159  total_loss: 5.255  loss_cls: 0.04049  loss_box_reg: 0.2069  loss_dis_0: 2.492  loss_dis_1: 2.489  time: 2.0829  data_time: 0.0572  lr: 0.002  max_mem: 15138M
[09/19 05:11:48 d2.utils.events]:  eta: 2:47:18  iter: 20179  total_loss: 5.265  loss_cls: 0.04158  loss_box_reg: 0.2321  loss_dis_0: 2.525  loss_dis_1: 2.474  time: 2.0829  data_time: 0.0708  lr: 0.002  max_mem: 15138M
[09/19 05:12:29 d2.utils.events]:  eta: 2:46:35  iter: 20199  total_loss: 5.277  loss_cls: 0.04434  loss_box_reg: 0.2397  loss_dis_0: 2.521  loss_dis_1: 2.476  time: 2.0829  data_time: 0.0671  lr: 0.002  max_mem: 15138M
[09/19 05:13:11 d2.utils.events]:  eta: 2:45:54  iter: 20219  total_loss: 5.24  loss_cls: 0.0421  loss_box_reg: 0.2234  loss_dis_0: 2.486  loss_dis_1: 2.503  time: 2.0829  data_time: 0.0595  lr: 0.002  max_mem: 15138M
[09/19 05:13:53 d2.utils.events]:  eta: 2:45:12  iter: 20239  total_loss: 5.26  loss_cls: 0.04212  loss_box_reg: 0.217  loss_dis_0: 2.454  loss_dis_1: 2.527  time: 2.0829  data_time: 0.0628  lr: 0.002  max_mem: 15138M
[09/19 05:14:35 d2.utils.events]:  eta: 2:44:30  iter: 20259  total_loss: 5.264  loss_cls: 0.03943  loss_box_reg: 0.2127  loss_dis_0: 2.609  loss_dis_1: 2.401  time: 2.0829  data_time: 0.0606  lr: 0.002  max_mem: 15138M
[09/19 05:15:17 d2.utils.events]:  eta: 2:43:50  iter: 20279  total_loss: 5.267  loss_cls: 0.04145  loss_box_reg: 0.222  loss_dis_0: 2.522  loss_dis_1: 2.48  time: 2.0830  data_time: 0.0637  lr: 0.002  max_mem: 15138M
[09/19 05:15:58 d2.utils.events]:  eta: 2:43:06  iter: 20299  total_loss: 5.278  loss_cls: 0.04519  loss_box_reg: 0.2306  loss_dis_0: 2.481  loss_dis_1: 2.53  time: 2.0829  data_time: 0.0583  lr: 0.002  max_mem: 15138M
[09/19 05:16:40 d2.utils.events]:  eta: 2:42:25  iter: 20319  total_loss: 5.23  loss_cls: 0.04165  loss_box_reg: 0.2053  loss_dis_0: 2.395  loss_dis_1: 2.591  time: 2.0829  data_time: 0.0660  lr: 0.002  max_mem: 15138M
[09/19 05:17:22 d2.utils.events]:  eta: 2:41:44  iter: 20339  total_loss: 5.285  loss_cls: 0.04812  loss_box_reg: 0.2169  loss_dis_0: 2.398  loss_dis_1: 2.572  time: 2.0829  data_time: 0.0679  lr: 0.002  max_mem: 15138M
[09/19 05:18:03 d2.utils.events]:  eta: 2:41:03  iter: 20359  total_loss: 5.309  loss_cls: 0.04982  loss_box_reg: 0.2408  loss_dis_0: 2.515  loss_dis_1: 2.509  time: 2.0830  data_time: 0.0603  lr: 0.002  max_mem: 15138M
[09/19 05:18:45 d2.utils.events]:  eta: 2:40:22  iter: 20379  total_loss: 5.335  loss_cls: 0.04947  loss_box_reg: 0.2477  loss_dis_0: 2.499  loss_dis_1: 2.538  time: 2.0830  data_time: 0.0602  lr: 0.002  max_mem: 15138M
[09/19 05:19:27 d2.utils.events]:  eta: 2:39:41  iter: 20399  total_loss: 5.374  loss_cls: 0.05327  loss_box_reg: 0.2442  loss_dis_0: 2.38  loss_dis_1: 2.687  time: 2.0830  data_time: 0.0614  lr: 0.002  max_mem: 15138M
[09/19 05:20:09 d2.utils.events]:  eta: 2:38:59  iter: 20419  total_loss: 5.311  loss_cls: 0.04772  loss_box_reg: 0.2455  loss_dis_0: 2.404  loss_dis_1: 2.626  time: 2.0830  data_time: 0.0590  lr: 0.002  max_mem: 15138M
[09/19 05:20:51 d2.utils.events]:  eta: 2:38:18  iter: 20439  total_loss: 5.281  loss_cls: 0.04739  loss_box_reg: 0.2266  loss_dis_0: 2.517  loss_dis_1: 2.493  time: 2.0830  data_time: 0.0575  lr: 0.002  max_mem: 15138M
[09/19 05:21:33 d2.utils.events]:  eta: 2:37:37  iter: 20459  total_loss: 5.283  loss_cls: 0.04477  loss_box_reg: 0.2268  loss_dis_0: 2.589  loss_dis_1: 2.428  time: 2.0830  data_time: 0.0572  lr: 0.002  max_mem: 15138M
[09/19 05:22:14 d2.utils.events]:  eta: 2:36:54  iter: 20479  total_loss: 5.293  loss_cls: 0.04379  loss_box_reg: 0.2345  loss_dis_0: 2.572  loss_dis_1: 2.443  time: 2.0830  data_time: 0.0596  lr: 0.002  max_mem: 15138M
[09/19 05:22:56 d2.utils.events]:  eta: 2:36:13  iter: 20499  total_loss: 5.285  loss_cls: 0.04298  loss_box_reg: 0.2206  loss_dis_0: 2.577  loss_dis_1: 2.44  time: 2.0830  data_time: 0.0697  lr: 0.002  max_mem: 15138M
[09/19 05:23:38 d2.utils.events]:  eta: 2:35:31  iter: 20519  total_loss: 5.278  loss_cls: 0.04268  loss_box_reg: 0.2237  loss_dis_0: 2.578  loss_dis_1: 2.438  time: 2.0830  data_time: 0.0595  lr: 0.002  max_mem: 15138M
[09/19 05:24:20 d2.utils.events]:  eta: 2:34:50  iter: 20539  total_loss: 5.285  loss_cls: 0.04303  loss_box_reg: 0.2182  loss_dis_0: 2.576  loss_dis_1: 2.442  time: 2.0830  data_time: 0.0612  lr: 0.002  max_mem: 15138M
[09/19 05:25:01 d2.utils.events]:  eta: 2:34:08  iter: 20559  total_loss: 5.276  loss_cls: 0.04223  loss_box_reg: 0.2129  loss_dis_0: 2.574  loss_dis_1: 2.442  time: 2.0830  data_time: 0.0621  lr: 0.002  max_mem: 15138M
[09/19 05:25:43 d2.utils.events]:  eta: 2:33:26  iter: 20579  total_loss: 5.257  loss_cls: 0.04165  loss_box_reg: 0.2114  loss_dis_0: 2.567  loss_dis_1: 2.442  time: 2.0830  data_time: 0.0729  lr: 0.002  max_mem: 15138M
[09/19 05:26:25 d2.utils.events]:  eta: 2:32:45  iter: 20599  total_loss: 5.281  loss_cls: 0.04637  loss_box_reg: 0.2399  loss_dis_0: 2.548  loss_dis_1: 2.449  time: 2.0830  data_time: 0.0632  lr: 0.002  max_mem: 15138M
[09/19 05:27:07 d2.utils.events]:  eta: 2:32:03  iter: 20619  total_loss: 5.267  loss_cls: 0.0435  loss_box_reg: 0.2243  loss_dis_0: 2.537  loss_dis_1: 2.464  time: 2.0830  data_time: 0.0604  lr: 0.002  max_mem: 15138M
[09/19 05:27:48 d2.utils.events]:  eta: 2:31:22  iter: 20639  total_loss: 5.258  loss_cls: 0.04033  loss_box_reg: 0.2247  loss_dis_0: 2.54  loss_dis_1: 2.462  time: 2.0830  data_time: 0.0737  lr: 0.002  max_mem: 15138M
[09/19 05:28:31 d2.utils.events]:  eta: 2:30:43  iter: 20659  total_loss: 5.257  loss_cls: 0.04121  loss_box_reg: 0.2176  loss_dis_0: 2.536  loss_dis_1: 2.461  time: 2.0830  data_time: 0.0667  lr: 0.002  max_mem: 15138M
[09/19 05:29:13 d2.utils.events]:  eta: 2:30:03  iter: 20679  total_loss: 5.272  loss_cls: 0.04171  loss_box_reg: 0.2281  loss_dis_0: 2.523  loss_dis_1: 2.475  time: 2.0830  data_time: 0.0622  lr: 0.002  max_mem: 15138M
[09/19 05:29:55 d2.utils.events]:  eta: 2:29:24  iter: 20699  total_loss: 5.252  loss_cls: 0.04093  loss_box_reg: 0.2126  loss_dis_0: 2.514  loss_dis_1: 2.48  time: 2.0831  data_time: 0.0776  lr: 0.002  max_mem: 15138M
[09/19 05:30:36 d2.utils.events]:  eta: 2:28:45  iter: 20719  total_loss: 5.237  loss_cls: 0.04159  loss_box_reg: 0.2181  loss_dis_0: 2.51  loss_dis_1: 2.48  time: 2.0831  data_time: 0.0645  lr: 0.002  max_mem: 15138M
[09/19 05:31:18 d2.utils.events]:  eta: 2:28:02  iter: 20739  total_loss: 5.264  loss_cls: 0.04234  loss_box_reg: 0.2177  loss_dis_0: 2.518  loss_dis_1: 2.485  time: 2.0831  data_time: 0.0649  lr: 0.002  max_mem: 15138M
[09/19 05:32:00 d2.utils.events]:  eta: 2:27:20  iter: 20759  total_loss: 5.27  loss_cls: 0.04233  loss_box_reg: 0.2361  loss_dis_0: 2.505  loss_dis_1: 2.486  time: 2.0831  data_time: 0.0553  lr: 0.002  max_mem: 15138M
[09/19 05:32:41 d2.utils.events]:  eta: 2:26:39  iter: 20779  total_loss: 5.256  loss_cls: 0.04532  loss_box_reg: 0.2211  loss_dis_0: 2.515  loss_dis_1: 2.478  time: 2.0831  data_time: 0.0607  lr: 0.002  max_mem: 15138M
[09/19 05:33:23 d2.utils.events]:  eta: 2:25:58  iter: 20799  total_loss: 5.235  loss_cls: 0.0395  loss_box_reg: 0.2019  loss_dis_0: 2.505  loss_dis_1: 2.489  time: 2.0831  data_time: 0.0663  lr: 0.002  max_mem: 15138M
[09/19 05:34:05 d2.utils.events]:  eta: 2:25:18  iter: 20819  total_loss: 5.259  loss_cls: 0.04215  loss_box_reg: 0.2145  loss_dis_0: 2.505  loss_dis_1: 2.493  time: 2.0831  data_time: 0.0601  lr: 0.002  max_mem: 15138M
[09/19 05:34:47 d2.utils.events]:  eta: 2:24:35  iter: 20839  total_loss: 5.254  loss_cls: 0.04034  loss_box_reg: 0.209  loss_dis_0: 2.504  loss_dis_1: 2.495  time: 2.0831  data_time: 0.0617  lr: 0.002  max_mem: 15138M
[09/19 05:35:29 d2.utils.events]:  eta: 2:23:53  iter: 20859  total_loss: 5.261  loss_cls: 0.04224  loss_box_reg: 0.2216  loss_dis_0: 2.497  loss_dis_1: 2.499  time: 2.0831  data_time: 0.0628  lr: 0.002  max_mem: 15138M
[09/19 05:36:11 d2.utils.events]:  eta: 2:23:12  iter: 20879  total_loss: 5.253  loss_cls: 0.03918  loss_box_reg: 0.2119  loss_dis_0: 2.499  loss_dis_1: 2.502  time: 2.0831  data_time: 0.0613  lr: 0.002  max_mem: 15138M
[09/19 05:36:52 d2.utils.events]:  eta: 2:22:30  iter: 20899  total_loss: 5.245  loss_cls: 0.04002  loss_box_reg: 0.2059  loss_dis_0: 2.502  loss_dis_1: 2.496  time: 2.0831  data_time: 0.0551  lr: 0.002  max_mem: 15138M
[09/19 05:37:34 d2.utils.events]:  eta: 2:21:48  iter: 20919  total_loss: 5.271  loss_cls: 0.04579  loss_box_reg: 0.2335  loss_dis_0: 2.505  loss_dis_1: 2.495  time: 2.0831  data_time: 0.0587  lr: 0.002  max_mem: 15138M
[09/19 05:38:16 d2.utils.events]:  eta: 2:21:05  iter: 20939  total_loss: 5.261  loss_cls: 0.0432  loss_box_reg: 0.2188  loss_dis_0: 2.503  loss_dis_1: 2.494  time: 2.0831  data_time: 0.0677  lr: 0.002  max_mem: 15138M
[09/19 05:38:57 d2.utils.events]:  eta: 2:20:25  iter: 20959  total_loss: 5.263  loss_cls: 0.04177  loss_box_reg: 0.2207  loss_dis_0: 2.497  loss_dis_1: 2.502  time: 2.0831  data_time: 0.0552  lr: 0.002  max_mem: 15138M
[09/19 05:39:39 d2.utils.events]:  eta: 2:19:45  iter: 20979  total_loss: 5.273  loss_cls: 0.03992  loss_box_reg: 0.2334  loss_dis_0: 2.5  loss_dis_1: 2.497  time: 2.0831  data_time: 0.0643  lr: 0.002  max_mem: 15138M
[09/19 05:40:21 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0020999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 05:40:24 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 05:40:24 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 05:40:24 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 05:40:24 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 05:40:39 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0012 s / iter. Inference: 0.4659 s / iter. Eval: 0.0012 s / iter. Total: 0.4682 s / iter. ETA=0:01:22
[09/19 05:40:45 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0013 s / iter. Inference: 0.4703 s / iter. Eval: 0.0011 s / iter. Total: 0.4728 s / iter. ETA=0:01:18
[09/19 05:40:50 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0013 s / iter. Inference: 0.4708 s / iter. Eval: 0.0011 s / iter. Total: 0.4732 s / iter. ETA=0:01:13
[09/19 05:40:55 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0013 s / iter. Inference: 0.4688 s / iter. Eval: 0.0011 s / iter. Total: 0.4713 s / iter. ETA=0:01:07
[09/19 05:41:00 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0015 s / iter. Inference: 0.4705 s / iter. Eval: 0.0011 s / iter. Total: 0.4731 s / iter. ETA=0:01:02
[09/19 05:41:05 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0015 s / iter. Inference: 0.4715 s / iter. Eval: 0.0011 s / iter. Total: 0.4742 s / iter. ETA=0:00:57
[09/19 05:41:11 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0015 s / iter. Inference: 0.4716 s / iter. Eval: 0.0011 s / iter. Total: 0.4743 s / iter. ETA=0:00:52
[09/19 05:41:16 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0017 s / iter. Inference: 0.4692 s / iter. Eval: 0.0011 s / iter. Total: 0.4720 s / iter. ETA=0:00:47
[09/19 05:41:21 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0017 s / iter. Inference: 0.4665 s / iter. Eval: 0.0013 s / iter. Total: 0.4695 s / iter. ETA=0:00:41
[09/19 05:41:26 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0017 s / iter. Inference: 0.4688 s / iter. Eval: 0.0013 s / iter. Total: 0.4718 s / iter. ETA=0:00:36
[09/19 05:41:32 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0016 s / iter. Inference: 0.4688 s / iter. Eval: 0.0012 s / iter. Total: 0.4717 s / iter. ETA=0:00:31
[09/19 05:41:37 d2.evaluation.evaluator]: Inference done 134/188. Dataloading: 0.0016 s / iter. Inference: 0.4661 s / iter. Eval: 0.0012 s / iter. Total: 0.4690 s / iter. ETA=0:00:25
[09/19 05:41:42 d2.evaluation.evaluator]: Inference done 146/188. Dataloading: 0.0016 s / iter. Inference: 0.4633 s / iter. Eval: 0.0012 s / iter. Total: 0.4662 s / iter. ETA=0:00:19
[09/19 05:41:47 d2.evaluation.evaluator]: Inference done 157/188. Dataloading: 0.0016 s / iter. Inference: 0.4630 s / iter. Eval: 0.0012 s / iter. Total: 0.4659 s / iter. ETA=0:00:14
[09/19 05:41:53 d2.evaluation.evaluator]: Inference done 169/188. Dataloading: 0.0016 s / iter. Inference: 0.4623 s / iter. Eval: 0.0012 s / iter. Total: 0.4652 s / iter. ETA=0:00:08
[09/19 05:41:58 d2.evaluation.evaluator]: Inference done 180/188. Dataloading: 0.0016 s / iter. Inference: 0.4630 s / iter. Eval: 0.0012 s / iter. Total: 0.4659 s / iter. ETA=0:00:03
[09/19 05:42:22 d2.evaluation.evaluator]: Total inference time: 0:01:45.109333 (0.574368 s / iter per device, on 8 devices)
[09/19 05:42:22 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.461926 s / iter per device, on 8 devices)
[09/19 05:42:22 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[57.27880246425545, 62.33350149593565, 71.09705317667976, 41.47855654479208, 62.45358479632364, 51.55230458132164, 43.57545442398863, 58.06749773262685]
[09/19 05:43:18 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 05:43:18 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 05:43:18 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 05:43:18 d2.evaluation.testing]: copypaste: 32.3398,55.9796,32.1605
[09/19 05:43:18 d2.utils.events]:  eta: 2:19:05  iter: 20999  total_loss: 5.266  loss_cls: 0.04106  loss_box_reg: 0.2331  loss_dis_0: 2.5  loss_dis_1: 2.499  time: 2.0831  data_time: 0.0574  lr: 0.002  max_mem: 15138M
[09/19 05:43:59 d2.utils.events]:  eta: 2:18:22  iter: 21019  total_loss: 5.243  loss_cls: 0.04014  loss_box_reg: 0.2071  loss_dis_0: 2.494  loss_dis_1: 2.503  time: 2.0831  data_time: 0.0619  lr: 0.002  max_mem: 15138M
[09/19 05:44:41 d2.utils.events]:  eta: 2:17:41  iter: 21039  total_loss: 5.248  loss_cls: 0.04098  loss_box_reg: 0.2075  loss_dis_0: 2.498  loss_dis_1: 2.5  time: 2.0831  data_time: 0.0722  lr: 0.002  max_mem: 15138M
[09/19 05:45:22 d2.utils.events]:  eta: 2:16:58  iter: 21059  total_loss: 5.271  loss_cls: 0.0429  loss_box_reg: 0.2294  loss_dis_0: 2.499  loss_dis_1: 2.501  time: 2.0831  data_time: 0.0680  lr: 0.002  max_mem: 15138M
[09/19 05:46:04 d2.utils.events]:  eta: 2:16:16  iter: 21079  total_loss: 5.277  loss_cls: 0.04597  loss_box_reg: 0.2377  loss_dis_0: 2.5  loss_dis_1: 2.498  time: 2.0831  data_time: 0.0633  lr: 0.002  max_mem: 15138M
[09/19 05:46:45 d2.utils.events]:  eta: 2:15:33  iter: 21099  total_loss: 5.257  loss_cls: 0.0425  loss_box_reg: 0.2099  loss_dis_0: 2.516  loss_dis_1: 2.484  time: 2.0830  data_time: 0.0595  lr: 0.002  max_mem: 15138M
[09/19 05:47:27 d2.utils.events]:  eta: 2:14:51  iter: 21119  total_loss: 5.258  loss_cls: 0.04211  loss_box_reg: 0.2245  loss_dis_0: 2.511  loss_dis_1: 2.485  time: 2.0830  data_time: 0.0667  lr: 0.002  max_mem: 15138M
[09/19 05:48:08 d2.utils.events]:  eta: 2:14:09  iter: 21139  total_loss: 5.263  loss_cls: 0.04335  loss_box_reg: 0.2125  loss_dis_0: 2.621  loss_dis_1: 2.38  time: 2.0830  data_time: 0.0637  lr: 0.002  max_mem: 15138M
[09/19 05:48:50 d2.utils.events]:  eta: 2:13:25  iter: 21159  total_loss: 5.257  loss_cls: 0.046  loss_box_reg: 0.2226  loss_dis_0: 2.433  loss_dis_1: 2.568  time: 2.0830  data_time: 0.0586  lr: 0.002  max_mem: 15138M
[09/19 05:49:31 d2.utils.events]:  eta: 2:12:43  iter: 21179  total_loss: 5.246  loss_cls: 0.04034  loss_box_reg: 0.202  loss_dis_0: 2.455  loss_dis_1: 2.534  time: 2.0830  data_time: 0.0664  lr: 0.002  max_mem: 15138M
[09/19 05:50:13 d2.utils.events]:  eta: 2:12:03  iter: 21199  total_loss: 5.251  loss_cls: 0.04317  loss_box_reg: 0.2264  loss_dis_0: 2.506  loss_dis_1: 2.486  time: 2.0830  data_time: 0.0514  lr: 0.002  max_mem: 15138M
[09/19 05:50:55 d2.utils.events]:  eta: 2:11:20  iter: 21219  total_loss: 5.265  loss_cls: 0.04416  loss_box_reg: 0.2287  loss_dis_0: 2.511  loss_dis_1: 2.487  time: 2.0830  data_time: 0.0649  lr: 0.002  max_mem: 15138M
[09/19 05:51:36 d2.utils.events]:  eta: 2:10:39  iter: 21239  total_loss: 5.257  loss_cls: 0.04237  loss_box_reg: 0.2183  loss_dis_0: 2.499  loss_dis_1: 2.499  time: 2.0830  data_time: 0.0656  lr: 0.002  max_mem: 15138M
[09/19 05:52:18 d2.utils.events]:  eta: 2:09:57  iter: 21259  total_loss: 5.254  loss_cls: 0.04496  loss_box_reg: 0.2116  loss_dis_0: 2.492  loss_dis_1: 2.511  time: 2.0830  data_time: 0.0605  lr: 0.002  max_mem: 15138M
[09/19 05:53:00 d2.utils.events]:  eta: 2:09:15  iter: 21279  total_loss: 5.271  loss_cls: 0.04172  loss_box_reg: 0.2143  loss_dis_0: 2.49  loss_dis_1: 2.509  time: 2.0830  data_time: 0.0655  lr: 0.002  max_mem: 15138M
[09/19 05:53:42 d2.utils.events]:  eta: 2:08:36  iter: 21299  total_loss: 5.265  loss_cls: 0.04319  loss_box_reg: 0.2258  loss_dis_0: 2.494  loss_dis_1: 2.508  time: 2.0830  data_time: 0.0565  lr: 0.002  max_mem: 15138M
[09/19 05:54:24 d2.utils.events]:  eta: 2:07:55  iter: 21319  total_loss: 5.242  loss_cls: 0.04013  loss_box_reg: 0.2027  loss_dis_0: 2.492  loss_dis_1: 2.507  time: 2.0830  data_time: 0.0695  lr: 0.002  max_mem: 15138M
[09/19 05:55:05 d2.utils.events]:  eta: 2:07:13  iter: 21339  total_loss: 5.262  loss_cls: 0.04206  loss_box_reg: 0.2187  loss_dis_0: 2.498  loss_dis_1: 2.499  time: 2.0830  data_time: 0.0617  lr: 0.002  max_mem: 15138M
[09/19 05:55:47 d2.utils.events]:  eta: 2:06:31  iter: 21359  total_loss: 5.277  loss_cls: 0.03869  loss_box_reg: 0.2137  loss_dis_0: 2.732  loss_dis_1: 2.228  time: 2.0830  data_time: 0.0625  lr: 0.002  max_mem: 15138M
[09/19 05:56:29 d2.utils.events]:  eta: 2:05:50  iter: 21379  total_loss: 5.248  loss_cls: 0.04614  loss_box_reg: 0.2295  loss_dis_0: 2.586  loss_dis_1: 2.384  time: 2.0830  data_time: 0.0486  lr: 0.002  max_mem: 15138M
[09/19 05:57:10 d2.utils.events]:  eta: 2:05:08  iter: 21399  total_loss: 5.273  loss_cls: 0.04638  loss_box_reg: 0.2263  loss_dis_0: 2.599  loss_dis_1: 2.379  time: 2.0830  data_time: 0.0643  lr: 0.002  max_mem: 15138M
[09/19 05:57:52 d2.utils.events]:  eta: 2:04:28  iter: 21419  total_loss: 5.274  loss_cls: 0.04357  loss_box_reg: 0.2222  loss_dis_0: 2.382  loss_dis_1: 2.631  time: 2.0830  data_time: 0.0655  lr: 0.002  max_mem: 15138M
[09/19 05:58:34 d2.utils.events]:  eta: 2:03:45  iter: 21439  total_loss: 5.286  loss_cls: 0.04594  loss_box_reg: 0.2269  loss_dis_0: 2.341  loss_dis_1: 2.676  time: 2.0830  data_time: 0.0599  lr: 0.002  max_mem: 15138M
[09/19 05:59:16 d2.utils.events]:  eta: 2:03:03  iter: 21459  total_loss: 5.257  loss_cls: 0.04  loss_box_reg: 0.217  loss_dis_0: 2.46  loss_dis_1: 2.544  time: 2.0830  data_time: 0.0701  lr: 0.002  max_mem: 15138M
[09/19 05:59:57 d2.utils.events]:  eta: 2:02:22  iter: 21479  total_loss: 5.254  loss_cls: 0.04018  loss_box_reg: 0.2212  loss_dis_0: 2.496  loss_dis_1: 2.498  time: 2.0830  data_time: 0.0677  lr: 0.002  max_mem: 15138M
[09/19 06:00:39 d2.utils.events]:  eta: 2:01:40  iter: 21499  total_loss: 5.263  loss_cls: 0.04465  loss_box_reg: 0.2267  loss_dis_0: 2.535  loss_dis_1: 2.461  time: 2.0830  data_time: 0.0589  lr: 0.002  max_mem: 15138M
[09/19 06:01:21 d2.utils.events]:  eta: 2:00:58  iter: 21519  total_loss: 5.277  loss_cls: 0.0442  loss_box_reg: 0.2306  loss_dis_0: 2.504  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0616  lr: 0.002  max_mem: 15138M
[09/19 06:02:03 d2.utils.events]:  eta: 2:00:15  iter: 21539  total_loss: 5.258  loss_cls: 0.04175  loss_box_reg: 0.2236  loss_dis_0: 2.482  loss_dis_1: 2.505  time: 2.0830  data_time: 0.0568  lr: 0.002  max_mem: 15138M
[09/19 06:02:44 d2.utils.events]:  eta: 1:59:34  iter: 21559  total_loss: 5.261  loss_cls: 0.03987  loss_box_reg: 0.22  loss_dis_0: 2.514  loss_dis_1: 2.481  time: 2.0830  data_time: 0.0579  lr: 0.002  max_mem: 15138M
[09/19 06:03:26 d2.utils.events]:  eta: 1:58:52  iter: 21579  total_loss: 5.263  loss_cls: 0.03918  loss_box_reg: 0.2235  loss_dis_0: 2.5  loss_dis_1: 2.494  time: 2.0830  data_time: 0.0631  lr: 0.002  max_mem: 15138M
[09/19 06:04:08 d2.utils.events]:  eta: 1:58:10  iter: 21599  total_loss: 5.267  loss_cls: 0.04324  loss_box_reg: 0.2183  loss_dis_0: 2.459  loss_dis_1: 2.547  time: 2.0830  data_time: 0.0682  lr: 0.002  max_mem: 15138M
[09/19 06:04:49 d2.utils.events]:  eta: 1:57:28  iter: 21619  total_loss: 5.277  loss_cls: 0.04482  loss_box_reg: 0.2313  loss_dis_0: 2.529  loss_dis_1: 2.47  time: 2.0830  data_time: 0.0516  lr: 0.002  max_mem: 15138M
[09/19 06:05:31 d2.utils.events]:  eta: 1:56:46  iter: 21639  total_loss: 5.259  loss_cls: 0.04086  loss_box_reg: 0.2224  loss_dis_0: 2.435  loss_dis_1: 2.565  time: 2.0830  data_time: 0.0609  lr: 0.002  max_mem: 15138M
[09/19 06:06:13 d2.utils.events]:  eta: 1:56:04  iter: 21659  total_loss: 5.257  loss_cls: 0.04311  loss_box_reg: 0.2097  loss_dis_0: 2.451  loss_dis_1: 2.56  time: 2.0831  data_time: 0.0627  lr: 0.002  max_mem: 15138M
[09/19 06:06:55 d2.utils.events]:  eta: 1:55:21  iter: 21679  total_loss: 5.266  loss_cls: 0.04093  loss_box_reg: 0.224  loss_dis_0: 2.479  loss_dis_1: 2.522  time: 2.0830  data_time: 0.0645  lr: 0.002  max_mem: 15138M
[09/19 06:07:36 d2.utils.events]:  eta: 1:54:39  iter: 21699  total_loss: 5.236  loss_cls: 0.03618  loss_box_reg: 0.2026  loss_dis_0: 2.501  loss_dis_1: 2.495  time: 2.0830  data_time: 0.0626  lr: 0.002  max_mem: 15138M
[09/19 06:08:18 d2.utils.events]:  eta: 1:53:57  iter: 21719  total_loss: 5.269  loss_cls: 0.04359  loss_box_reg: 0.2325  loss_dis_0: 2.509  loss_dis_1: 2.492  time: 2.0830  data_time: 0.0725  lr: 0.002  max_mem: 15138M
[09/19 06:09:00 d2.utils.events]:  eta: 1:53:13  iter: 21739  total_loss: 5.279  loss_cls: 0.04513  loss_box_reg: 0.2333  loss_dis_0: 2.51  loss_dis_1: 2.491  time: 2.0830  data_time: 0.0658  lr: 0.002  max_mem: 15138M
[09/19 06:09:41 d2.utils.events]:  eta: 1:52:32  iter: 21759  total_loss: 5.247  loss_cls: 0.04083  loss_box_reg: 0.2081  loss_dis_0: 2.504  loss_dis_1: 2.497  time: 2.0830  data_time: 0.0651  lr: 0.002  max_mem: 15138M
[09/19 06:10:23 d2.utils.events]:  eta: 1:51:50  iter: 21779  total_loss: 5.259  loss_cls: 0.04187  loss_box_reg: 0.2217  loss_dis_0: 2.523  loss_dis_1: 2.465  time: 2.0830  data_time: 0.0583  lr: 0.002  max_mem: 15138M
[09/19 06:11:05 d2.utils.events]:  eta: 1:51:07  iter: 21799  total_loss: 5.265  loss_cls: 0.04259  loss_box_reg: 0.2221  loss_dis_0: 2.477  loss_dis_1: 2.523  time: 2.0830  data_time: 0.0632  lr: 0.002  max_mem: 15138M
[09/19 06:11:46 d2.utils.events]:  eta: 1:50:25  iter: 21819  total_loss: 5.248  loss_cls: 0.03972  loss_box_reg: 0.2151  loss_dis_0: 2.491  loss_dis_1: 2.502  time: 2.0830  data_time: 0.0561  lr: 0.002  max_mem: 15138M
[09/19 06:12:28 d2.utils.events]:  eta: 1:49:43  iter: 21839  total_loss: 5.252  loss_cls: 0.04171  loss_box_reg: 0.2124  loss_dis_0: 2.547  loss_dis_1: 2.456  time: 2.0830  data_time: 0.0687  lr: 0.002  max_mem: 15138M
[09/19 06:13:09 d2.utils.events]:  eta: 1:49:01  iter: 21859  total_loss: 5.262  loss_cls: 0.04251  loss_box_reg: 0.2232  loss_dis_0: 2.458  loss_dis_1: 2.546  time: 2.0830  data_time: 0.0570  lr: 0.002  max_mem: 15138M
[09/19 06:13:51 d2.utils.events]:  eta: 1:48:19  iter: 21879  total_loss: 5.253  loss_cls: 0.04225  loss_box_reg: 0.2106  loss_dis_0: 2.47  loss_dis_1: 2.525  time: 2.0830  data_time: 0.0656  lr: 0.002  max_mem: 15138M
[09/19 06:14:33 d2.utils.events]:  eta: 1:47:36  iter: 21899  total_loss: 5.254  loss_cls: 0.04057  loss_box_reg: 0.2141  loss_dis_0: 2.499  loss_dis_1: 2.501  time: 2.0830  data_time: 0.0685  lr: 0.002  max_mem: 15138M
[09/19 06:15:14 d2.utils.events]:  eta: 1:46:55  iter: 21919  total_loss: 5.266  loss_cls: 0.04578  loss_box_reg: 0.221  loss_dis_0: 2.55  loss_dis_1: 2.45  time: 2.0830  data_time: 0.0639  lr: 0.002  max_mem: 15138M
[09/19 06:15:56 d2.utils.events]:  eta: 1:46:13  iter: 21939  total_loss: 5.259  loss_cls: 0.04135  loss_box_reg: 0.2128  loss_dis_0: 2.497  loss_dis_1: 2.505  time: 2.0830  data_time: 0.0562  lr: 0.002  max_mem: 15138M
[09/19 06:16:38 d2.utils.events]:  eta: 1:45:32  iter: 21959  total_loss: 5.254  loss_cls: 0.04121  loss_box_reg: 0.2173  loss_dis_0: 2.474  loss_dis_1: 2.522  time: 2.0830  data_time: 0.0708  lr: 0.002  max_mem: 15138M
[09/19 06:17:20 d2.utils.events]:  eta: 1:44:48  iter: 21979  total_loss: 5.262  loss_cls: 0.04154  loss_box_reg: 0.2188  loss_dis_0: 2.497  loss_dis_1: 2.515  time: 2.0830  data_time: 0.0647  lr: 0.002  max_mem: 15138M
[09/19 06:18:01 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0021999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 06:18:04 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 06:18:04 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 06:18:04 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 06:18:04 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 06:18:20 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0011 s / iter. Inference: 0.4741 s / iter. Eval: 0.0012 s / iter. Total: 0.4764 s / iter. ETA=0:01:24
[09/19 06:18:26 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0013 s / iter. Inference: 0.4789 s / iter. Eval: 0.0011 s / iter. Total: 0.4814 s / iter. ETA=0:01:19
[09/19 06:18:31 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0013 s / iter. Inference: 0.4783 s / iter. Eval: 0.0011 s / iter. Total: 0.4807 s / iter. ETA=0:01:14
[09/19 06:18:36 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0017 s / iter. Inference: 0.4743 s / iter. Eval: 0.0011 s / iter. Total: 0.4772 s / iter. ETA=0:01:08
[09/19 06:18:41 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0017 s / iter. Inference: 0.4725 s / iter. Eval: 0.0012 s / iter. Total: 0.4754 s / iter. ETA=0:01:03
[09/19 06:18:47 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0016 s / iter. Inference: 0.4726 s / iter. Eval: 0.0012 s / iter. Total: 0.4754 s / iter. ETA=0:00:58
[09/19 06:18:52 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0016 s / iter. Inference: 0.4733 s / iter. Eval: 0.0012 s / iter. Total: 0.4762 s / iter. ETA=0:00:52
[09/19 06:18:57 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0016 s / iter. Inference: 0.4709 s / iter. Eval: 0.0012 s / iter. Total: 0.4738 s / iter. ETA=0:00:47
[09/19 06:19:02 d2.evaluation.evaluator]: Inference done 99/188. Dataloading: 0.0019 s / iter. Inference: 0.4684 s / iter. Eval: 0.0012 s / iter. Total: 0.4716 s / iter. ETA=0:00:41
[09/19 06:19:07 d2.evaluation.evaluator]: Inference done 110/188. Dataloading: 0.0019 s / iter. Inference: 0.4689 s / iter. Eval: 0.0012 s / iter. Total: 0.4720 s / iter. ETA=0:00:36
[09/19 06:19:12 d2.evaluation.evaluator]: Inference done 121/188. Dataloading: 0.0018 s / iter. Inference: 0.4691 s / iter. Eval: 0.0012 s / iter. Total: 0.4721 s / iter. ETA=0:00:31
[09/19 06:19:18 d2.evaluation.evaluator]: Inference done 133/188. Dataloading: 0.0018 s / iter. Inference: 0.4671 s / iter. Eval: 0.0012 s / iter. Total: 0.4701 s / iter. ETA=0:00:25
[09/19 06:19:23 d2.evaluation.evaluator]: Inference done 145/188. Dataloading: 0.0018 s / iter. Inference: 0.4642 s / iter. Eval: 0.0012 s / iter. Total: 0.4672 s / iter. ETA=0:00:20
[09/19 06:19:28 d2.evaluation.evaluator]: Inference done 156/188. Dataloading: 0.0017 s / iter. Inference: 0.4637 s / iter. Eval: 0.0012 s / iter. Total: 0.4666 s / iter. ETA=0:00:14
[09/19 06:19:33 d2.evaluation.evaluator]: Inference done 168/188. Dataloading: 0.0018 s / iter. Inference: 0.4622 s / iter. Eval: 0.0012 s / iter. Total: 0.4652 s / iter. ETA=0:00:09
[09/19 06:19:38 d2.evaluation.evaluator]: Inference done 179/188. Dataloading: 0.0017 s / iter. Inference: 0.4621 s / iter. Eval: 0.0011 s / iter. Total: 0.4651 s / iter. ETA=0:00:04
[09/19 06:20:03 d2.evaluation.evaluator]: Total inference time: 0:01:44.986133 (0.573695 s / iter per device, on 8 devices)
[09/19 06:20:03 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.461250 s / iter per device, on 8 devices)
[09/19 06:20:05 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[57.373430054742535, 62.569812787873836, 71.14948938745022, 42.67940154105389, 62.15147424607452, 54.001831747986486, 46.007432682177885, 58.28426988780506]
[09/19 06:21:01 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 06:21:01 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 06:21:01 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 06:21:01 d2.evaluation.testing]: copypaste: 32.8202,56.7771,32.4379
[09/19 06:21:01 d2.utils.events]:  eta: 1:44:07  iter: 21999  total_loss: 5.248  loss_cls: 0.04204  loss_box_reg: 0.214  loss_dis_0: 2.555  loss_dis_1: 2.429  time: 2.0830  data_time: 0.0525  lr: 0.002  max_mem: 15138M
[09/19 06:21:42 d2.utils.events]:  eta: 1:43:25  iter: 22019  total_loss: 5.263  loss_cls: 0.0455  loss_box_reg: 0.2244  loss_dis_0: 2.46  loss_dis_1: 2.518  time: 2.0830  data_time: 0.0589  lr: 0.002  max_mem: 15138M
[09/19 06:22:24 d2.utils.events]:  eta: 1:42:45  iter: 22039  total_loss: 5.264  loss_cls: 0.04225  loss_box_reg: 0.2263  loss_dis_0: 2.58  loss_dis_1: 2.407  time: 2.0830  data_time: 0.0615  lr: 0.002  max_mem: 15138M
[09/19 06:23:06 d2.utils.events]:  eta: 1:42:03  iter: 22059  total_loss: 5.246  loss_cls: 0.04266  loss_box_reg: 0.2137  loss_dis_0: 2.477  loss_dis_1: 2.526  time: 2.0830  data_time: 0.0612  lr: 0.002  max_mem: 15138M
[09/19 06:23:47 d2.utils.events]:  eta: 1:41:22  iter: 22079  total_loss: 5.267  loss_cls: 0.04649  loss_box_reg: 0.2221  loss_dis_0: 2.4  loss_dis_1: 2.607  time: 2.0830  data_time: 0.0665  lr: 0.002  max_mem: 15138M
[09/19 06:24:29 d2.utils.events]:  eta: 1:40:42  iter: 22099  total_loss: 5.266  loss_cls: 0.04063  loss_box_reg: 0.2214  loss_dis_0: 2.469  loss_dis_1: 2.542  time: 2.0830  data_time: 0.0584  lr: 0.002  max_mem: 15138M
[09/19 06:25:11 d2.utils.events]:  eta: 1:40:00  iter: 22119  total_loss: 5.254  loss_cls: 0.03778  loss_box_reg: 0.2173  loss_dis_0: 2.525  loss_dis_1: 2.464  time: 2.0830  data_time: 0.0652  lr: 0.002  max_mem: 15138M
[09/19 06:25:52 d2.utils.events]:  eta: 1:39:21  iter: 22139  total_loss: 5.252  loss_cls: 0.03858  loss_box_reg: 0.2144  loss_dis_0: 2.455  loss_dis_1: 2.537  time: 2.0830  data_time: 0.0600  lr: 0.002  max_mem: 15138M
[09/19 06:26:34 d2.utils.events]:  eta: 1:38:40  iter: 22159  total_loss: 5.253  loss_cls: 0.04143  loss_box_reg: 0.2182  loss_dis_0: 2.55  loss_dis_1: 2.433  time: 2.0830  data_time: 0.0606  lr: 0.002  max_mem: 15138M
[09/19 06:27:16 d2.utils.events]:  eta: 1:37:58  iter: 22179  total_loss: 5.253  loss_cls: 0.0433  loss_box_reg: 0.2264  loss_dis_0: 2.485  loss_dis_1: 2.503  time: 2.0830  data_time: 0.0619  lr: 0.002  max_mem: 15138M
[09/19 06:27:57 d2.utils.events]:  eta: 1:37:16  iter: 22199  total_loss: 5.242  loss_cls: 0.0426  loss_box_reg: 0.22  loss_dis_0: 2.577  loss_dis_1: 2.398  time: 2.0830  data_time: 0.0627  lr: 0.002  max_mem: 15138M
[09/19 06:28:39 d2.utils.events]:  eta: 1:36:33  iter: 22219  total_loss: 5.266  loss_cls: 0.04184  loss_box_reg: 0.2247  loss_dis_0: 2.536  loss_dis_1: 2.479  time: 2.0830  data_time: 0.0675  lr: 0.002  max_mem: 15138M
[09/19 06:29:21 d2.utils.events]:  eta: 1:35:50  iter: 22239  total_loss: 5.296  loss_cls: 0.04635  loss_box_reg: 0.2216  loss_dis_0: 2.433  loss_dis_1: 2.567  time: 2.0830  data_time: 0.0624  lr: 0.002  max_mem: 15138M
[09/19 06:30:02 d2.utils.events]:  eta: 1:35:08  iter: 22259  total_loss: 5.286  loss_cls: 0.04469  loss_box_reg: 0.2275  loss_dis_0: 2.388  loss_dis_1: 2.636  time: 2.0830  data_time: 0.0611  lr: 0.002  max_mem: 15138M
[09/19 06:30:44 d2.utils.events]:  eta: 1:34:26  iter: 22279  total_loss: 5.287  loss_cls: 0.04343  loss_box_reg: 0.2309  loss_dis_0: 2.435  loss_dis_1: 2.576  time: 2.0830  data_time: 0.0634  lr: 0.002  max_mem: 15138M
[09/19 06:31:26 d2.utils.events]:  eta: 1:33:42  iter: 22299  total_loss: 5.287  loss_cls: 0.04583  loss_box_reg: 0.2306  loss_dis_0: 2.508  loss_dis_1: 2.508  time: 2.0830  data_time: 0.0608  lr: 0.002  max_mem: 15138M
[09/19 06:32:07 d2.utils.events]:  eta: 1:33:01  iter: 22319  total_loss: 5.263  loss_cls: 0.04128  loss_box_reg: 0.2152  loss_dis_0: 2.557  loss_dis_1: 2.464  time: 2.0830  data_time: 0.0578  lr: 0.002  max_mem: 15138M
[09/19 06:32:49 d2.utils.events]:  eta: 1:32:19  iter: 22339  total_loss: 5.281  loss_cls: 0.04571  loss_box_reg: 0.2367  loss_dis_0: 2.543  loss_dis_1: 2.459  time: 2.0830  data_time: 0.0618  lr: 0.002  max_mem: 15138M
[09/19 06:33:31 d2.utils.events]:  eta: 1:31:38  iter: 22359  total_loss: 5.24  loss_cls: 0.04099  loss_box_reg: 0.2193  loss_dis_0: 2.665  loss_dis_1: 2.301  time: 2.0830  data_time: 0.0604  lr: 0.002  max_mem: 15138M
[09/19 06:34:13 d2.utils.events]:  eta: 1:30:56  iter: 22379  total_loss: 5.221  loss_cls: 0.0397  loss_box_reg: 0.2069  loss_dis_0: 2.527  loss_dis_1: 2.412  time: 2.0830  data_time: 0.0555  lr: 0.002  max_mem: 15138M
[09/19 06:34:54 d2.utils.events]:  eta: 1:30:15  iter: 22399  total_loss: 5.265  loss_cls: 0.04301  loss_box_reg: 0.2139  loss_dis_0: 2.35  loss_dis_1: 2.655  time: 2.0830  data_time: 0.0676  lr: 0.002  max_mem: 15138M
[09/19 06:35:37 d2.utils.events]:  eta: 1:29:33  iter: 22419  total_loss: 5.277  loss_cls: 0.0446  loss_box_reg: 0.2299  loss_dis_0: 2.448  loss_dis_1: 2.569  time: 2.0830  data_time: 0.0721  lr: 0.002  max_mem: 15138M
[09/19 06:36:18 d2.utils.events]:  eta: 1:28:51  iter: 22439  total_loss: 5.285  loss_cls: 0.04372  loss_box_reg: 0.2157  loss_dis_0: 2.688  loss_dis_1: 2.33  time: 2.0830  data_time: 0.0689  lr: 0.002  max_mem: 15138M
[09/19 06:37:00 d2.utils.events]:  eta: 1:28:10  iter: 22459  total_loss: 5.288  loss_cls: 0.04281  loss_box_reg: 0.2214  loss_dis_0: 2.775  loss_dis_1: 2.251  time: 2.0830  data_time: 0.0720  lr: 0.002  max_mem: 15138M
[09/19 06:37:42 d2.utils.events]:  eta: 1:27:27  iter: 22479  total_loss: 5.283  loss_cls: 0.04403  loss_box_reg: 0.2158  loss_dis_0: 2.579  loss_dis_1: 2.431  time: 2.0830  data_time: 0.0664  lr: 0.002  max_mem: 15138M
[09/19 06:38:24 d2.utils.events]:  eta: 1:26:45  iter: 22499  total_loss: 5.277  loss_cls: 0.04564  loss_box_reg: 0.227  loss_dis_0: 2.455  loss_dis_1: 2.552  time: 2.0830  data_time: 0.0619  lr: 0.002  max_mem: 15138M
[09/19 06:39:05 d2.utils.events]:  eta: 1:26:04  iter: 22519  total_loss: 5.235  loss_cls: 0.04232  loss_box_reg: 0.2167  loss_dis_0: 2.379  loss_dis_1: 2.588  time: 2.0830  data_time: 0.0618  lr: 0.002  max_mem: 15138M
[09/19 06:39:47 d2.utils.events]:  eta: 1:25:22  iter: 22539  total_loss: 5.211  loss_cls: 0.0416  loss_box_reg: 0.2216  loss_dis_0: 2.531  loss_dis_1: 2.426  time: 2.0830  data_time: 0.0544  lr: 0.002  max_mem: 15138M
[09/19 06:40:29 d2.utils.events]:  eta: 1:24:41  iter: 22559  total_loss: 5.242  loss_cls: 0.04181  loss_box_reg: 0.2082  loss_dis_0: 2.476  loss_dis_1: 2.522  time: 2.0830  data_time: 0.0640  lr: 0.002  max_mem: 15138M
[09/19 06:41:11 d2.utils.events]:  eta: 1:24:01  iter: 22579  total_loss: 5.251  loss_cls: 0.04099  loss_box_reg: 0.2129  loss_dis_0: 2.408  loss_dis_1: 2.601  time: 2.0830  data_time: 0.0716  lr: 0.002  max_mem: 15138M
[09/19 06:41:53 d2.utils.events]:  eta: 1:23:19  iter: 22599  total_loss: 5.303  loss_cls: 0.04278  loss_box_reg: 0.2111  loss_dis_0: 2.397  loss_dis_1: 2.635  time: 2.0830  data_time: 0.0684  lr: 0.002  max_mem: 15138M
[09/19 06:42:35 d2.utils.events]:  eta: 1:22:38  iter: 22619  total_loss: 5.275  loss_cls: 0.04112  loss_box_reg: 0.2194  loss_dis_0: 2.522  loss_dis_1: 2.509  time: 2.0830  data_time: 0.0586  lr: 0.002  max_mem: 15138M
[09/19 06:43:16 d2.utils.events]:  eta: 1:21:57  iter: 22639  total_loss: 5.25  loss_cls: 0.04514  loss_box_reg: 0.224  loss_dis_0: 2.571  loss_dis_1: 2.423  time: 2.0830  data_time: 0.0565  lr: 0.002  max_mem: 15138M
[09/19 06:43:58 d2.utils.events]:  eta: 1:21:13  iter: 22659  total_loss: 5.248  loss_cls: 0.03904  loss_box_reg: 0.2116  loss_dis_0: 2.443  loss_dis_1: 2.586  time: 2.0830  data_time: 0.0577  lr: 0.002  max_mem: 15138M
[09/19 06:44:40 d2.utils.events]:  eta: 1:20:31  iter: 22679  total_loss: 5.274  loss_cls: 0.0405  loss_box_reg: 0.2089  loss_dis_0: 2.424  loss_dis_1: 2.58  time: 2.0830  data_time: 0.0579  lr: 0.002  max_mem: 15138M
[09/19 06:45:21 d2.utils.events]:  eta: 1:19:49  iter: 22699  total_loss: 5.262  loss_cls: 0.04108  loss_box_reg: 0.2053  loss_dis_0: 2.474  loss_dis_1: 2.549  time: 2.0830  data_time: 0.0538  lr: 0.002  max_mem: 15138M
[09/19 06:46:03 d2.utils.events]:  eta: 1:19:08  iter: 22719  total_loss: 5.254  loss_cls: 0.03994  loss_box_reg: 0.2165  loss_dis_0: 2.572  loss_dis_1: 2.436  time: 2.0830  data_time: 0.0718  lr: 0.002  max_mem: 15138M
[09/19 06:46:45 d2.utils.events]:  eta: 1:18:28  iter: 22739  total_loss: 5.266  loss_cls: 0.0429  loss_box_reg: 0.218  loss_dis_0: 2.604  loss_dis_1: 2.404  time: 2.0831  data_time: 0.0660  lr: 0.002  max_mem: 15138M
[09/19 06:47:27 d2.utils.events]:  eta: 1:17:47  iter: 22759  total_loss: 5.266  loss_cls: 0.0424  loss_box_reg: 0.221  loss_dis_0: 2.427  loss_dis_1: 2.583  time: 2.0831  data_time: 0.0637  lr: 0.002  max_mem: 15138M
[09/19 06:48:08 d2.utils.events]:  eta: 1:17:06  iter: 22779  total_loss: 5.255  loss_cls: 0.04094  loss_box_reg: 0.2136  loss_dis_0: 2.432  loss_dis_1: 2.561  time: 2.0831  data_time: 0.0602  lr: 0.002  max_mem: 15138M
[09/19 06:48:50 d2.utils.events]:  eta: 1:16:24  iter: 22799  total_loss: 5.285  loss_cls: 0.04374  loss_box_reg: 0.2314  loss_dis_0: 2.473  loss_dis_1: 2.536  time: 2.0831  data_time: 0.0599  lr: 0.002  max_mem: 15138M
[09/19 06:49:32 d2.utils.events]:  eta: 1:15:43  iter: 22819  total_loss: 5.284  loss_cls: 0.04537  loss_box_reg: 0.2078  loss_dis_0: 2.49  loss_dis_1: 2.532  time: 2.0831  data_time: 0.0547  lr: 0.002  max_mem: 15138M
[09/19 06:50:14 d2.utils.events]:  eta: 1:15:03  iter: 22839  total_loss: 5.28  loss_cls: 0.04632  loss_box_reg: 0.2332  loss_dis_0: 2.515  loss_dis_1: 2.498  time: 2.0831  data_time: 0.0576  lr: 0.002  max_mem: 15138M
[09/19 06:50:56 d2.utils.events]:  eta: 1:14:22  iter: 22859  total_loss: 5.263  loss_cls: 0.03881  loss_box_reg: 0.2169  loss_dis_0: 2.549  loss_dis_1: 2.462  time: 2.0831  data_time: 0.0672  lr: 0.002  max_mem: 15138M
[09/19 06:51:38 d2.utils.events]:  eta: 1:13:41  iter: 22879  total_loss: 5.252  loss_cls: 0.04204  loss_box_reg: 0.2089  loss_dis_0: 2.559  loss_dis_1: 2.44  time: 2.0831  data_time: 0.0680  lr: 0.002  max_mem: 15138M
[09/19 06:52:20 d2.utils.events]:  eta: 1:13:00  iter: 22899  total_loss: 5.265  loss_cls: 0.04183  loss_box_reg: 0.2166  loss_dis_0: 2.509  loss_dis_1: 2.504  time: 2.0831  data_time: 0.0632  lr: 0.002  max_mem: 15138M
[09/19 06:53:02 d2.utils.events]:  eta: 1:12:18  iter: 22919  total_loss: 5.266  loss_cls: 0.04221  loss_box_reg: 0.2249  loss_dis_0: 2.489  loss_dis_1: 2.514  time: 2.0831  data_time: 0.0575  lr: 0.002  max_mem: 15138M
[09/19 06:53:43 d2.utils.events]:  eta: 1:11:37  iter: 22939  total_loss: 5.256  loss_cls: 0.03854  loss_box_reg: 0.2116  loss_dis_0: 2.501  loss_dis_1: 2.507  time: 2.0831  data_time: 0.0626  lr: 0.002  max_mem: 15138M
[09/19 06:54:25 d2.utils.events]:  eta: 1:10:55  iter: 22959  total_loss: 5.271  loss_cls: 0.04404  loss_box_reg: 0.2229  loss_dis_0: 2.518  loss_dis_1: 2.493  time: 2.0831  data_time: 0.0521  lr: 0.002  max_mem: 15138M
[09/19 06:55:07 d2.utils.events]:  eta: 1:10:15  iter: 22979  total_loss: 5.289  loss_cls: 0.04422  loss_box_reg: 0.2345  loss_dis_0: 2.518  loss_dis_1: 2.482  time: 2.0831  data_time: 0.0632  lr: 0.002  max_mem: 15138M
[09/19 06:55:49 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0022999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 06:55:52 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 06:55:52 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 06:55:52 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 06:55:52 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 06:56:07 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0013 s / iter. Inference: 0.4671 s / iter. Eval: 0.0011 s / iter. Total: 0.4695 s / iter. ETA=0:01:23
[09/19 06:56:12 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0014 s / iter. Inference: 0.4739 s / iter. Eval: 0.0012 s / iter. Total: 0.4765 s / iter. ETA=0:01:19
[09/19 06:56:17 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0019 s / iter. Inference: 0.4742 s / iter. Eval: 0.0012 s / iter. Total: 0.4774 s / iter. ETA=0:01:13
[09/19 06:56:23 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0019 s / iter. Inference: 0.4726 s / iter. Eval: 0.0012 s / iter. Total: 0.4758 s / iter. ETA=0:01:08
[09/19 06:56:28 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0018 s / iter. Inference: 0.4694 s / iter. Eval: 0.0012 s / iter. Total: 0.4725 s / iter. ETA=0:01:02
[09/19 06:56:33 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0018 s / iter. Inference: 0.4736 s / iter. Eval: 0.0012 s / iter. Total: 0.4766 s / iter. ETA=0:00:58
[09/19 06:56:38 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0017 s / iter. Inference: 0.4722 s / iter. Eval: 0.0011 s / iter. Total: 0.4751 s / iter. ETA=0:00:52
[09/19 06:56:44 d2.evaluation.evaluator]: Inference done 89/188. Dataloading: 0.0017 s / iter. Inference: 0.4687 s / iter. Eval: 0.0011 s / iter. Total: 0.4716 s / iter. ETA=0:00:46
[09/19 06:56:49 d2.evaluation.evaluator]: Inference done 101/188. Dataloading: 0.0017 s / iter. Inference: 0.4659 s / iter. Eval: 0.0011 s / iter. Total: 0.4688 s / iter. ETA=0:00:40
[09/19 06:56:54 d2.evaluation.evaluator]: Inference done 112/188. Dataloading: 0.0017 s / iter. Inference: 0.4673 s / iter. Eval: 0.0012 s / iter. Total: 0.4702 s / iter. ETA=0:00:35
[09/19 06:57:00 d2.evaluation.evaluator]: Inference done 123/188. Dataloading: 0.0017 s / iter. Inference: 0.4677 s / iter. Eval: 0.0011 s / iter. Total: 0.4706 s / iter. ETA=0:00:30
[09/19 06:57:05 d2.evaluation.evaluator]: Inference done 135/188. Dataloading: 0.0017 s / iter. Inference: 0.4660 s / iter. Eval: 0.0011 s / iter. Total: 0.4689 s / iter. ETA=0:00:24
[09/19 06:57:10 d2.evaluation.evaluator]: Inference done 147/188. Dataloading: 0.0020 s / iter. Inference: 0.4639 s / iter. Eval: 0.0012 s / iter. Total: 0.4671 s / iter. ETA=0:00:19
[09/19 06:57:16 d2.evaluation.evaluator]: Inference done 158/188. Dataloading: 0.0022 s / iter. Inference: 0.4650 s / iter. Eval: 0.0012 s / iter. Total: 0.4684 s / iter. ETA=0:00:14
[09/19 06:57:21 d2.evaluation.evaluator]: Inference done 170/188. Dataloading: 0.0021 s / iter. Inference: 0.4639 s / iter. Eval: 0.0012 s / iter. Total: 0.4672 s / iter. ETA=0:00:08
[09/19 06:57:26 d2.evaluation.evaluator]: Inference done 181/188. Dataloading: 0.0021 s / iter. Inference: 0.4634 s / iter. Eval: 0.0012 s / iter. Total: 0.4667 s / iter. ETA=0:00:03
[09/19 06:57:49 d2.evaluation.evaluator]: Total inference time: 0:01:45.253847 (0.575158 s / iter per device, on 8 devices)
[09/19 06:57:49 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.462366 s / iter per device, on 8 devices)
[09/19 06:57:50 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[57.42685041622649, 62.656014524317904, 71.22853828899403, 42.44745716183598, 63.08671543054003, 49.43351048103818, 45.26186961358511, 58.21478872765395]
[09/19 06:58:56 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 06:58:56 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 06:58:56 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 06:58:56 d2.evaluation.testing]: copypaste: 32.2150,56.2195,31.8831
[09/19 06:58:56 d2.utils.events]:  eta: 1:09:33  iter: 22999  total_loss: 5.268  loss_cls: 0.04237  loss_box_reg: 0.2235  loss_dis_0: 2.514  loss_dis_1: 2.49  time: 2.0831  data_time: 0.0569  lr: 0.002  max_mem: 15138M
[09/19 06:59:37 d2.utils.events]:  eta: 1:08:52  iter: 23019  total_loss: 5.246  loss_cls: 0.04094  loss_box_reg: 0.2085  loss_dis_0: 2.511  loss_dis_1: 2.494  time: 2.0831  data_time: 0.0683  lr: 0.002  max_mem: 15138M
[09/19 07:00:19 d2.utils.events]:  eta: 1:08:10  iter: 23039  total_loss: 5.256  loss_cls: 0.04138  loss_box_reg: 0.2116  loss_dis_0: 2.512  loss_dis_1: 2.489  time: 2.0831  data_time: 0.0546  lr: 0.002  max_mem: 15138M
[09/19 07:01:00 d2.utils.events]:  eta: 1:07:27  iter: 23059  total_loss: 5.277  loss_cls: 0.04503  loss_box_reg: 0.2289  loss_dis_0: 2.52  loss_dis_1: 2.482  time: 2.0831  data_time: 0.0695  lr: 0.002  max_mem: 15138M
[09/19 07:01:42 d2.utils.events]:  eta: 1:06:45  iter: 23079  total_loss: 5.261  loss_cls: 0.04261  loss_box_reg: 0.2194  loss_dis_0: 2.516  loss_dis_1: 2.487  time: 2.0831  data_time: 0.0600  lr: 0.002  max_mem: 15138M
[09/19 07:02:23 d2.utils.events]:  eta: 1:06:03  iter: 23099  total_loss: 5.255  loss_cls: 0.04009  loss_box_reg: 0.2165  loss_dis_0: 2.513  loss_dis_1: 2.484  time: 2.0831  data_time: 0.0692  lr: 0.002  max_mem: 15138M
[09/19 07:03:05 d2.utils.events]:  eta: 1:05:21  iter: 23119  total_loss: 5.261  loss_cls: 0.04038  loss_box_reg: 0.2188  loss_dis_0: 2.543  loss_dis_1: 2.459  time: 2.0831  data_time: 0.0611  lr: 0.002  max_mem: 15138M
[09/19 07:03:46 d2.utils.events]:  eta: 1:04:38  iter: 23139  total_loss: 5.257  loss_cls: 0.04168  loss_box_reg: 0.223  loss_dis_0: 2.566  loss_dis_1: 2.421  time: 2.0831  data_time: 0.0723  lr: 0.002  max_mem: 15138M
[09/19 07:04:28 d2.utils.events]:  eta: 1:03:56  iter: 23159  total_loss: 5.225  loss_cls: 0.03583  loss_box_reg: 0.1943  loss_dis_0: 2.756  loss_dis_1: 2.233  time: 2.0831  data_time: 0.0598  lr: 0.002  max_mem: 15138M
[09/19 07:05:09 d2.utils.events]:  eta: 1:03:14  iter: 23179  total_loss: 5.258  loss_cls: 0.04326  loss_box_reg: 0.2259  loss_dis_0: 2.582  loss_dis_1: 2.387  time: 2.0831  data_time: 0.0634  lr: 0.002  max_mem: 15138M
[09/19 07:05:51 d2.utils.events]:  eta: 1:02:33  iter: 23199  total_loss: 5.298  loss_cls: 0.04251  loss_box_reg: 0.2289  loss_dis_0: 2.587  loss_dis_1: 2.409  time: 2.0830  data_time: 0.0676  lr: 0.002  max_mem: 15138M
[09/19 07:06:33 d2.utils.events]:  eta: 1:01:51  iter: 23219  total_loss: 5.257  loss_cls: 0.04121  loss_box_reg: 0.2195  loss_dis_0: 2.537  loss_dis_1: 2.448  time: 2.0830  data_time: 0.0608  lr: 0.002  max_mem: 15138M
[09/19 07:07:14 d2.utils.events]:  eta: 1:01:09  iter: 23239  total_loss: 5.23  loss_cls: 0.04134  loss_box_reg: 0.2045  loss_dis_0: 2.474  loss_dis_1: 2.518  time: 2.0830  data_time: 0.0665  lr: 0.002  max_mem: 15138M
[09/19 07:07:56 d2.utils.events]:  eta: 1:00:27  iter: 23259  total_loss: 5.248  loss_cls: 0.04486  loss_box_reg: 0.2097  loss_dis_0: 2.545  loss_dis_1: 2.444  time: 2.0830  data_time: 0.0662  lr: 0.002  max_mem: 15138M
[09/19 07:08:37 d2.utils.events]:  eta: 0:59:46  iter: 23279  total_loss: 5.243  loss_cls: 0.04646  loss_box_reg: 0.2173  loss_dis_0: 2.451  loss_dis_1: 2.524  time: 2.0830  data_time: 0.0614  lr: 0.002  max_mem: 15138M
[09/19 07:09:19 d2.utils.events]:  eta: 0:59:04  iter: 23299  total_loss: 5.264  loss_cls: 0.04754  loss_box_reg: 0.2205  loss_dis_0: 2.476  loss_dis_1: 2.532  time: 2.0830  data_time: 0.0587  lr: 0.002  max_mem: 15138M
[09/19 07:10:01 d2.utils.events]:  eta: 0:58:23  iter: 23319  total_loss: 5.287  loss_cls: 0.0484  loss_box_reg: 0.2369  loss_dis_0: 2.655  loss_dis_1: 2.358  time: 2.0830  data_time: 0.0675  lr: 0.002  max_mem: 15138M
[09/19 07:10:42 d2.utils.events]:  eta: 0:57:41  iter: 23339  total_loss: 5.293  loss_cls: 0.04548  loss_box_reg: 0.2156  loss_dis_0: 2.628  loss_dis_1: 2.394  time: 2.0830  data_time: 0.0621  lr: 0.002  max_mem: 15138M
[09/19 07:11:24 d2.utils.events]:  eta: 0:56:59  iter: 23359  total_loss: 5.286  loss_cls: 0.04722  loss_box_reg: 0.2244  loss_dis_0: 2.565  loss_dis_1: 2.449  time: 2.0830  data_time: 0.0654  lr: 0.002  max_mem: 15138M
[09/19 07:12:06 d2.utils.events]:  eta: 0:56:16  iter: 23379  total_loss: 5.25  loss_cls: 0.04245  loss_box_reg: 0.2203  loss_dis_0: 2.52  loss_dis_1: 2.483  time: 2.0830  data_time: 0.0702  lr: 0.002  max_mem: 15138M
[09/19 07:12:47 d2.utils.events]:  eta: 0:55:35  iter: 23399  total_loss: 5.316  loss_cls: 0.05067  loss_box_reg: 0.2524  loss_dis_0: 2.483  loss_dis_1: 2.532  time: 2.0830  data_time: 0.0572  lr: 0.002  max_mem: 15138M
[09/19 07:13:29 d2.utils.events]:  eta: 0:54:53  iter: 23419  total_loss: 5.295  loss_cls: 0.04665  loss_box_reg: 0.2304  loss_dis_0: 2.48  loss_dis_1: 2.55  time: 2.0830  data_time: 0.0604  lr: 0.002  max_mem: 15138M
[09/19 07:14:10 d2.utils.events]:  eta: 0:54:11  iter: 23439  total_loss: 5.305  loss_cls: 0.04692  loss_box_reg: 0.223  loss_dis_0: 2.49  loss_dis_1: 2.54  time: 2.0830  data_time: 0.0618  lr: 0.002  max_mem: 15138M
[09/19 07:14:52 d2.utils.events]:  eta: 0:53:29  iter: 23459  total_loss: 5.327  loss_cls: 0.04646  loss_box_reg: 0.2285  loss_dis_0: 2.516  loss_dis_1: 2.534  time: 2.0830  data_time: 0.0660  lr: 0.002  max_mem: 15138M
[09/19 07:15:34 d2.utils.events]:  eta: 0:52:48  iter: 23479  total_loss: 5.315  loss_cls: 0.04575  loss_box_reg: 0.216  loss_dis_0: 2.513  loss_dis_1: 2.54  time: 2.0830  data_time: 0.0642  lr: 0.002  max_mem: 15138M
[09/19 07:16:16 d2.utils.events]:  eta: 0:52:06  iter: 23499  total_loss: 5.376  loss_cls: 0.05254  loss_box_reg: 0.2515  loss_dis_0: 2.485  loss_dis_1: 2.586  time: 2.0830  data_time: 0.0530  lr: 0.002  max_mem: 15138M
[09/19 07:16:58 d2.utils.events]:  eta: 0:51:25  iter: 23519  total_loss: 5.434  loss_cls: 0.05731  loss_box_reg: 0.2666  loss_dis_0: 2.468  loss_dis_1: 2.64  time: 2.0830  data_time: 0.0698  lr: 0.002  max_mem: 15138M
[09/19 07:17:39 d2.utils.events]:  eta: 0:50:43  iter: 23539  total_loss: 5.392  loss_cls: 0.05145  loss_box_reg: 0.258  loss_dis_0: 2.446  loss_dis_1: 2.635  time: 2.0830  data_time: 0.0692  lr: 0.002  max_mem: 15138M
[09/19 07:18:21 d2.utils.events]:  eta: 0:50:01  iter: 23559  total_loss: 5.328  loss_cls: 0.04988  loss_box_reg: 0.2345  loss_dis_0: 2.394  loss_dis_1: 2.65  time: 2.0830  data_time: 0.0675  lr: 0.002  max_mem: 15138M
[09/19 07:19:02 d2.utils.events]:  eta: 0:49:19  iter: 23579  total_loss: 5.366  loss_cls: 0.05693  loss_box_reg: 0.2537  loss_dis_0: 2.378  loss_dis_1: 2.673  time: 2.0830  data_time: 0.0712  lr: 0.002  max_mem: 15138M
[09/19 07:19:44 d2.utils.events]:  eta: 0:48:36  iter: 23599  total_loss: 5.295  loss_cls: 0.05142  loss_box_reg: 0.2291  loss_dis_0: 2.343  loss_dis_1: 2.653  time: 2.0830  data_time: 0.0582  lr: 0.002  max_mem: 15138M
[09/19 07:20:26 d2.utils.events]:  eta: 0:47:54  iter: 23619  total_loss: 5.275  loss_cls: 0.04672  loss_box_reg: 0.2406  loss_dis_0: 2.405  loss_dis_1: 2.599  time: 2.0830  data_time: 0.0670  lr: 0.002  max_mem: 15138M
[09/19 07:21:07 d2.utils.events]:  eta: 0:47:12  iter: 23639  total_loss: 5.263  loss_cls: 0.04992  loss_box_reg: 0.2424  loss_dis_0: 2.454  loss_dis_1: 2.52  time: 2.0830  data_time: 0.0692  lr: 0.002  max_mem: 15138M
[09/19 07:21:49 d2.utils.events]:  eta: 0:46:30  iter: 23659  total_loss: 5.244  loss_cls: 0.04481  loss_box_reg: 0.2165  loss_dis_0: 2.48  loss_dis_1: 2.483  time: 2.0830  data_time: 0.0608  lr: 0.002  max_mem: 15138M
[09/19 07:22:31 d2.utils.events]:  eta: 0:45:48  iter: 23679  total_loss: 5.263  loss_cls: 0.04709  loss_box_reg: 0.2306  loss_dis_0: 2.54  loss_dis_1: 2.442  time: 2.0830  data_time: 0.0672  lr: 0.002  max_mem: 15138M
[09/19 07:23:12 d2.utils.events]:  eta: 0:45:07  iter: 23699  total_loss: 5.246  loss_cls: 0.04477  loss_box_reg: 0.2377  loss_dis_0: 2.506  loss_dis_1: 2.479  time: 2.0830  data_time: 0.0671  lr: 0.002  max_mem: 15138M
[09/19 07:23:54 d2.utils.events]:  eta: 0:44:25  iter: 23719  total_loss: 5.258  loss_cls: 0.03962  loss_box_reg: 0.2154  loss_dis_0: 2.589  loss_dis_1: 2.42  time: 2.0830  data_time: 0.0720  lr: 0.002  max_mem: 15138M
[09/19 07:24:36 d2.utils.events]:  eta: 0:43:44  iter: 23739  total_loss: 5.273  loss_cls: 0.04194  loss_box_reg: 0.2193  loss_dis_0: 2.608  loss_dis_1: 2.401  time: 2.0830  data_time: 0.0661  lr: 0.002  max_mem: 15138M
[09/19 07:25:18 d2.utils.events]:  eta: 0:43:02  iter: 23759  total_loss: 5.291  loss_cls: 0.04702  loss_box_reg: 0.2372  loss_dis_0: 2.561  loss_dis_1: 2.436  time: 2.0830  data_time: 0.0667  lr: 0.002  max_mem: 15138M
[09/19 07:25:59 d2.utils.events]:  eta: 0:42:20  iter: 23779  total_loss: 5.285  loss_cls: 0.04837  loss_box_reg: 0.2414  loss_dis_0: 2.527  loss_dis_1: 2.472  time: 2.0830  data_time: 0.0553  lr: 0.002  max_mem: 15138M
[09/19 07:26:41 d2.utils.events]:  eta: 0:41:39  iter: 23799  total_loss: 5.288  loss_cls: 0.04264  loss_box_reg: 0.2304  loss_dis_0: 2.506  loss_dis_1: 2.499  time: 2.0830  data_time: 0.0639  lr: 0.002  max_mem: 15138M
[09/19 07:27:23 d2.utils.events]:  eta: 0:40:57  iter: 23819  total_loss: 5.262  loss_cls: 0.0405  loss_box_reg: 0.2154  loss_dis_0: 2.503  loss_dis_1: 2.501  time: 2.0830  data_time: 0.0691  lr: 0.002  max_mem: 15138M
[09/19 07:28:05 d2.utils.events]:  eta: 0:40:15  iter: 23839  total_loss: 5.265  loss_cls: 0.04286  loss_box_reg: 0.209  loss_dis_0: 2.495  loss_dis_1: 2.516  time: 2.0830  data_time: 0.0750  lr: 0.002  max_mem: 15138M
[09/19 07:28:46 d2.utils.events]:  eta: 0:39:33  iter: 23859  total_loss: 5.286  loss_cls: 0.04384  loss_box_reg: 0.225  loss_dis_0: 2.501  loss_dis_1: 2.514  time: 2.0830  data_time: 0.0611  lr: 0.002  max_mem: 15138M
[09/19 07:29:28 d2.utils.events]:  eta: 0:38:51  iter: 23879  total_loss: 5.269  loss_cls: 0.04057  loss_box_reg: 0.2144  loss_dis_0: 2.499  loss_dis_1: 2.515  time: 2.0830  data_time: 0.0669  lr: 0.002  max_mem: 15138M
[09/19 07:30:10 d2.utils.events]:  eta: 0:38:10  iter: 23899  total_loss: 5.298  loss_cls: 0.04493  loss_box_reg: 0.2361  loss_dis_0: 2.502  loss_dis_1: 2.514  time: 2.0830  data_time: 0.0634  lr: 0.002  max_mem: 15138M
[09/19 07:30:51 d2.utils.events]:  eta: 0:37:28  iter: 23919  total_loss: 5.278  loss_cls: 0.04293  loss_box_reg: 0.2238  loss_dis_0: 2.505  loss_dis_1: 2.505  time: 2.0830  data_time: 0.0665  lr: 0.002  max_mem: 15138M
[09/19 07:31:33 d2.utils.events]:  eta: 0:36:47  iter: 23939  total_loss: 5.286  loss_cls: 0.04662  loss_box_reg: 0.2294  loss_dis_0: 2.512  loss_dis_1: 2.495  time: 2.0830  data_time: 0.0638  lr: 0.002  max_mem: 15138M
[09/19 07:32:15 d2.utils.events]:  eta: 0:36:05  iter: 23959  total_loss: 5.285  loss_cls: 0.04475  loss_box_reg: 0.2327  loss_dis_0: 2.507  loss_dis_1: 2.495  time: 2.0830  data_time: 0.0628  lr: 0.002  max_mem: 15138M
[09/19 07:32:57 d2.utils.events]:  eta: 0:35:23  iter: 23979  total_loss: 5.27  loss_cls: 0.04295  loss_box_reg: 0.218  loss_dis_0: 2.501  loss_dis_1: 2.503  time: 2.0830  data_time: 0.0659  lr: 0.002  max_mem: 15138M
[09/19 07:33:38 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0023999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 07:33:41 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 07:33:41 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 07:33:41 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 07:33:41 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 07:33:56 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0012 s / iter. Inference: 0.4745 s / iter. Eval: 0.0013 s / iter. Total: 0.4770 s / iter. ETA=0:01:24
[09/19 07:34:01 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0014 s / iter. Inference: 0.4802 s / iter. Eval: 0.0012 s / iter. Total: 0.4829 s / iter. ETA=0:01:20
[09/19 07:34:06 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0014 s / iter. Inference: 0.4773 s / iter. Eval: 0.0012 s / iter. Total: 0.4799 s / iter. ETA=0:01:14
[09/19 07:34:11 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0015 s / iter. Inference: 0.4739 s / iter. Eval: 0.0011 s / iter. Total: 0.4766 s / iter. ETA=0:01:08
[09/19 07:34:17 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0019 s / iter. Inference: 0.4750 s / iter. Eval: 0.0012 s / iter. Total: 0.4781 s / iter. ETA=0:01:03
[09/19 07:34:22 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0023 s / iter. Inference: 0.4775 s / iter. Eval: 0.0012 s / iter. Total: 0.4813 s / iter. ETA=0:00:58
[09/19 07:34:27 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0021 s / iter. Inference: 0.4762 s / iter. Eval: 0.0012 s / iter. Total: 0.4797 s / iter. ETA=0:00:53
[09/19 07:34:32 d2.evaluation.evaluator]: Inference done 88/188. Dataloading: 0.0021 s / iter. Inference: 0.4732 s / iter. Eval: 0.0012 s / iter. Total: 0.4767 s / iter. ETA=0:00:47
[09/19 07:34:38 d2.evaluation.evaluator]: Inference done 100/188. Dataloading: 0.0020 s / iter. Inference: 0.4691 s / iter. Eval: 0.0012 s / iter. Total: 0.4725 s / iter. ETA=0:00:41
[09/19 07:34:43 d2.evaluation.evaluator]: Inference done 111/188. Dataloading: 0.0020 s / iter. Inference: 0.4710 s / iter. Eval: 0.0012 s / iter. Total: 0.4743 s / iter. ETA=0:00:36
[09/19 07:34:48 d2.evaluation.evaluator]: Inference done 122/188. Dataloading: 0.0020 s / iter. Inference: 0.4714 s / iter. Eval: 0.0012 s / iter. Total: 0.4748 s / iter. ETA=0:00:31
[09/19 07:34:53 d2.evaluation.evaluator]: Inference done 133/188. Dataloading: 0.0020 s / iter. Inference: 0.4701 s / iter. Eval: 0.0012 s / iter. Total: 0.4735 s / iter. ETA=0:00:26
[09/19 07:34:58 d2.evaluation.evaluator]: Inference done 144/188. Dataloading: 0.0021 s / iter. Inference: 0.4691 s / iter. Eval: 0.0012 s / iter. Total: 0.4725 s / iter. ETA=0:00:20
[09/19 07:35:04 d2.evaluation.evaluator]: Inference done 156/188. Dataloading: 0.0020 s / iter. Inference: 0.4678 s / iter. Eval: 0.0012 s / iter. Total: 0.4711 s / iter. ETA=0:00:15
[09/19 07:35:09 d2.evaluation.evaluator]: Inference done 168/188. Dataloading: 0.0020 s / iter. Inference: 0.4662 s / iter. Eval: 0.0012 s / iter. Total: 0.4696 s / iter. ETA=0:00:09
[09/19 07:35:14 d2.evaluation.evaluator]: Inference done 179/188. Dataloading: 0.0020 s / iter. Inference: 0.4658 s / iter. Eval: 0.0012 s / iter. Total: 0.4691 s / iter. ETA=0:00:04
[09/19 07:35:38 d2.evaluation.evaluator]: Total inference time: 0:01:45.615857 (0.577136 s / iter per device, on 8 devices)
[09/19 07:35:38 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.464388 s / iter per device, on 8 devices)
[09/19 07:35:39 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[57.20012881389708, 62.61211098262977, 71.06283652157121, 41.5126785126818, 63.40764553203415, 50.88322227121015, 45.83594779574395, 58.940816953711476]
[09/19 07:36:35 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 07:36:35 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 07:36:35 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 07:36:35 d2.evaluation.testing]: copypaste: 32.0453,56.4319,31.9857
[09/19 07:36:35 d2.utils.events]:  eta: 0:34:41  iter: 23999  total_loss: 5.262  loss_cls: 0.04267  loss_box_reg: 0.2217  loss_dis_0: 2.498  loss_dis_1: 2.501  time: 2.0830  data_time: 0.0739  lr: 0.002  max_mem: 15138M
[09/19 07:37:17 d2.utils.events]:  eta: 0:33:59  iter: 24019  total_loss: 5.255  loss_cls: 0.03972  loss_box_reg: 0.2167  loss_dis_0: 2.494  loss_dis_1: 2.502  time: 2.0830  data_time: 0.0678  lr: 0.002  max_mem: 15138M
[09/19 07:37:58 d2.utils.events]:  eta: 0:33:18  iter: 24039  total_loss: 5.251  loss_cls: 0.04171  loss_box_reg: 0.2074  loss_dis_0: 2.483  loss_dis_1: 2.517  time: 2.0830  data_time: 0.0616  lr: 0.002  max_mem: 15138M
[09/19 07:38:40 d2.utils.events]:  eta: 0:32:36  iter: 24059  total_loss: 5.271  loss_cls: 0.04007  loss_box_reg: 0.2241  loss_dis_0: 2.482  loss_dis_1: 2.516  time: 2.0830  data_time: 0.0578  lr: 0.002  max_mem: 15138M
[09/19 07:39:21 d2.utils.events]:  eta: 0:31:55  iter: 24079  total_loss: 5.258  loss_cls: 0.0409  loss_box_reg: 0.2215  loss_dis_0: 2.478  loss_dis_1: 2.525  time: 2.0830  data_time: 0.0693  lr: 0.002  max_mem: 15138M
[09/19 07:40:03 d2.utils.events]:  eta: 0:31:13  iter: 24099  total_loss: 5.251  loss_cls: 0.04087  loss_box_reg: 0.2219  loss_dis_0: 2.408  loss_dis_1: 2.576  time: 2.0830  data_time: 0.0606  lr: 0.002  max_mem: 15138M
[09/19 07:40:45 d2.utils.events]:  eta: 0:30:31  iter: 24119  total_loss: 5.262  loss_cls: 0.04119  loss_box_reg: 0.2138  loss_dis_0: 2.506  loss_dis_1: 2.495  time: 2.0830  data_time: 0.0650  lr: 0.002  max_mem: 15138M
[09/19 07:41:27 d2.utils.events]:  eta: 0:29:50  iter: 24139  total_loss: 5.265  loss_cls: 0.04358  loss_box_reg: 0.2158  loss_dis_0: 2.513  loss_dis_1: 2.494  time: 2.0830  data_time: 0.0655  lr: 0.002  max_mem: 15138M
[09/19 07:42:08 d2.utils.events]:  eta: 0:29:08  iter: 24159  total_loss: 5.229  loss_cls: 0.03653  loss_box_reg: 0.2045  loss_dis_0: 2.485  loss_dis_1: 2.509  time: 2.0830  data_time: 0.0671  lr: 0.002  max_mem: 15138M
[09/19 07:42:50 d2.utils.events]:  eta: 0:28:27  iter: 24179  total_loss: 5.24  loss_cls: 0.04287  loss_box_reg: 0.2092  loss_dis_0: 2.442  loss_dis_1: 2.562  time: 2.0830  data_time: 0.0636  lr: 0.002  max_mem: 15138M
[09/19 07:43:32 d2.utils.events]:  eta: 0:27:45  iter: 24199  total_loss: 5.265  loss_cls: 0.0446  loss_box_reg: 0.2209  loss_dis_0: 2.43  loss_dis_1: 2.571  time: 2.0830  data_time: 0.0655  lr: 0.002  max_mem: 15138M
[09/19 07:44:14 d2.utils.events]:  eta: 0:27:04  iter: 24219  total_loss: 5.281  loss_cls: 0.04093  loss_box_reg: 0.2356  loss_dis_0: 2.413  loss_dis_1: 2.596  time: 2.0830  data_time: 0.0605  lr: 0.002  max_mem: 15138M
[09/19 07:44:56 d2.utils.events]:  eta: 0:26:22  iter: 24239  total_loss: 5.269  loss_cls: 0.04638  loss_box_reg: 0.237  loss_dis_0: 2.494  loss_dis_1: 2.484  time: 2.0830  data_time: 0.0625  lr: 0.002  max_mem: 15138M
[09/19 07:45:37 d2.utils.events]:  eta: 0:25:41  iter: 24259  total_loss: 5.259  loss_cls: 0.04591  loss_box_reg: 0.2358  loss_dis_0: 2.519  loss_dis_1: 2.456  time: 2.0830  data_time: 0.0636  lr: 0.002  max_mem: 15138M
[09/19 07:46:19 d2.utils.events]:  eta: 0:24:59  iter: 24279  total_loss: 5.257  loss_cls: 0.04248  loss_box_reg: 0.2189  loss_dis_0: 2.525  loss_dis_1: 2.469  time: 2.0830  data_time: 0.0573  lr: 0.002  max_mem: 15138M
[09/19 07:47:01 d2.utils.events]:  eta: 0:24:17  iter: 24299  total_loss: 5.251  loss_cls: 0.04131  loss_box_reg: 0.2208  loss_dis_0: 2.541  loss_dis_1: 2.452  time: 2.0830  data_time: 0.0757  lr: 0.002  max_mem: 15138M
[09/19 07:47:42 d2.utils.events]:  eta: 0:23:36  iter: 24319  total_loss: 5.268  loss_cls: 0.0421  loss_box_reg: 0.2244  loss_dis_0: 2.545  loss_dis_1: 2.449  time: 2.0830  data_time: 0.0627  lr: 0.002  max_mem: 15138M
[09/19 07:48:24 d2.utils.events]:  eta: 0:22:54  iter: 24339  total_loss: 5.271  loss_cls: 0.04444  loss_box_reg: 0.2291  loss_dis_0: 2.522  loss_dis_1: 2.486  time: 2.0830  data_time: 0.0666  lr: 0.002  max_mem: 15138M
[09/19 07:49:06 d2.utils.events]:  eta: 0:22:13  iter: 24359  total_loss: 5.235  loss_cls: 0.03857  loss_box_reg: 0.2072  loss_dis_0: 2.518  loss_dis_1: 2.48  time: 2.0830  data_time: 0.0731  lr: 0.002  max_mem: 15138M
[09/19 07:49:48 d2.utils.events]:  eta: 0:21:31  iter: 24379  total_loss: 5.251  loss_cls: 0.03818  loss_box_reg: 0.2056  loss_dis_0: 2.486  loss_dis_1: 2.525  time: 2.0830  data_time: 0.0578  lr: 0.002  max_mem: 15138M
[09/19 07:50:29 d2.utils.events]:  eta: 0:20:50  iter: 24399  total_loss: 5.285  loss_cls: 0.04436  loss_box_reg: 0.239  loss_dis_0: 2.465  loss_dis_1: 2.55  time: 2.0830  data_time: 0.0491  lr: 0.002  max_mem: 15138M
[09/19 07:51:11 d2.utils.events]:  eta: 0:20:08  iter: 24419  total_loss: 5.277  loss_cls: 0.04263  loss_box_reg: 0.2165  loss_dis_0: 2.431  loss_dis_1: 2.58  time: 2.0830  data_time: 0.0669  lr: 0.002  max_mem: 15138M
[09/19 07:51:53 d2.utils.events]:  eta: 0:19:26  iter: 24439  total_loss: 5.279  loss_cls: 0.04547  loss_box_reg: 0.2264  loss_dis_0: 2.461  loss_dis_1: 2.551  time: 2.0830  data_time: 0.0726  lr: 0.002  max_mem: 15138M
[09/19 07:52:35 d2.utils.events]:  eta: 0:18:45  iter: 24459  total_loss: 5.277  loss_cls: 0.04585  loss_box_reg: 0.221  loss_dis_0: 2.537  loss_dis_1: 2.472  time: 2.0830  data_time: 0.0613  lr: 0.002  max_mem: 15138M
[09/19 07:53:17 d2.utils.events]:  eta: 0:18:03  iter: 24479  total_loss: 5.244  loss_cls: 0.0446  loss_box_reg: 0.2234  loss_dis_0: 2.687  loss_dis_1: 2.299  time: 2.0830  data_time: 0.0613  lr: 0.002  max_mem: 15138M
[09/19 07:53:58 d2.utils.events]:  eta: 0:17:21  iter: 24499  total_loss: 5.232  loss_cls: 0.04557  loss_box_reg: 0.2225  loss_dis_0: 2.565  loss_dis_1: 2.409  time: 2.0830  data_time: 0.0735  lr: 0.002  max_mem: 15138M
[09/19 07:54:40 d2.utils.events]:  eta: 0:16:40  iter: 24519  total_loss: 5.246  loss_cls: 0.04149  loss_box_reg: 0.2082  loss_dis_0: 2.475  loss_dis_1: 2.499  time: 2.0830  data_time: 0.0683  lr: 0.002  max_mem: 15138M
[09/19 07:55:22 d2.utils.events]:  eta: 0:15:58  iter: 24539  total_loss: 5.233  loss_cls: 0.04154  loss_box_reg: 0.2136  loss_dis_0: 2.416  loss_dis_1: 2.566  time: 2.0830  data_time: 0.0571  lr: 0.002  max_mem: 15138M
[09/19 07:56:03 d2.utils.events]:  eta: 0:15:16  iter: 24559  total_loss: 5.277  loss_cls: 0.04663  loss_box_reg: 0.235  loss_dis_0: 2.388  loss_dis_1: 2.605  time: 2.0830  data_time: 0.0594  lr: 0.002  max_mem: 15138M
[09/19 07:56:45 d2.utils.events]:  eta: 0:14:35  iter: 24579  total_loss: 5.276  loss_cls: 0.04293  loss_box_reg: 0.226  loss_dis_0: 2.457  loss_dis_1: 2.587  time: 2.0830  data_time: 0.0600  lr: 0.002  max_mem: 15138M
[09/19 07:57:27 d2.utils.events]:  eta: 0:13:53  iter: 24599  total_loss: 5.267  loss_cls: 0.0459  loss_box_reg: 0.2194  loss_dis_0: 2.407  loss_dis_1: 2.596  time: 2.0830  data_time: 0.0665  lr: 0.002  max_mem: 15138M
[09/19 07:58:09 d2.utils.events]:  eta: 0:13:12  iter: 24619  total_loss: 5.263  loss_cls: 0.04237  loss_box_reg: 0.2223  loss_dis_0: 2.472  loss_dis_1: 2.53  time: 2.0830  data_time: 0.0581  lr: 0.002  max_mem: 15138M
[09/19 07:58:50 d2.utils.events]:  eta: 0:12:30  iter: 24639  total_loss: 5.261  loss_cls: 0.04146  loss_box_reg: 0.2226  loss_dis_0: 2.512  loss_dis_1: 2.486  time: 2.0830  data_time: 0.0643  lr: 0.002  max_mem: 15138M
[09/19 07:59:33 d2.utils.events]:  eta: 0:11:49  iter: 24659  total_loss: 5.243  loss_cls: 0.04459  loss_box_reg: 0.224  loss_dis_0: 2.529  loss_dis_1: 2.458  time: 2.0830  data_time: 0.0715  lr: 0.002  max_mem: 15138M
[09/19 08:00:14 d2.utils.events]:  eta: 0:11:07  iter: 24679  total_loss: 5.217  loss_cls: 0.04097  loss_box_reg: 0.2206  loss_dis_0: 2.626  loss_dis_1: 2.344  time: 2.0831  data_time: 0.0664  lr: 0.002  max_mem: 15138M
[09/19 08:00:56 d2.utils.events]:  eta: 0:10:25  iter: 24699  total_loss: 5.276  loss_cls: 0.04624  loss_box_reg: 0.2352  loss_dis_0: 2.577  loss_dis_1: 2.416  time: 2.0831  data_time: 0.0568  lr: 0.002  max_mem: 15138M
[09/19 08:01:38 d2.utils.events]:  eta: 0:09:44  iter: 24719  total_loss: 5.244  loss_cls: 0.04469  loss_box_reg: 0.2249  loss_dis_0: 2.571  loss_dis_1: 2.415  time: 2.0831  data_time: 0.0630  lr: 0.002  max_mem: 15138M
[09/19 08:02:20 d2.utils.events]:  eta: 0:09:02  iter: 24739  total_loss: 5.222  loss_cls: 0.03854  loss_box_reg: 0.2011  loss_dis_0: 2.522  loss_dis_1: 2.451  time: 2.0831  data_time: 0.0622  lr: 0.002  max_mem: 15138M
[09/19 08:03:02 d2.utils.events]:  eta: 0:08:20  iter: 24759  total_loss: 5.268  loss_cls: 0.04454  loss_box_reg: 0.2262  loss_dis_0: 2.537  loss_dis_1: 2.459  time: 2.0831  data_time: 0.0668  lr: 0.002  max_mem: 15138M
[09/19 08:03:44 d2.utils.events]:  eta: 0:07:38  iter: 24779  total_loss: 5.273  loss_cls: 0.04453  loss_box_reg: 0.2218  loss_dis_0: 2.514  loss_dis_1: 2.495  time: 2.0831  data_time: 0.0637  lr: 0.002  max_mem: 15138M
[09/19 08:04:25 d2.utils.events]:  eta: 0:06:57  iter: 24799  total_loss: 5.275  loss_cls: 0.0425  loss_box_reg: 0.2285  loss_dis_0: 2.508  loss_dis_1: 2.503  time: 2.0831  data_time: 0.0584  lr: 0.002  max_mem: 15138M
[09/19 08:05:07 d2.utils.events]:  eta: 0:06:15  iter: 24819  total_loss: 5.28  loss_cls: 0.04587  loss_box_reg: 0.2207  loss_dis_0: 2.499  loss_dis_1: 2.507  time: 2.0831  data_time: 0.0617  lr: 0.002  max_mem: 15138M
[09/19 08:05:49 d2.utils.events]:  eta: 0:05:33  iter: 24839  total_loss: 5.271  loss_cls: 0.04229  loss_box_reg: 0.2127  loss_dis_0: 2.491  loss_dis_1: 2.519  time: 2.0831  data_time: 0.0615  lr: 0.002  max_mem: 15138M
[09/19 08:06:31 d2.utils.events]:  eta: 0:04:52  iter: 24859  total_loss: 5.293  loss_cls: 0.04627  loss_box_reg: 0.2228  loss_dis_0: 2.499  loss_dis_1: 2.537  time: 2.0831  data_time: 0.0625  lr: 0.002  max_mem: 15138M
[09/19 08:07:13 d2.utils.events]:  eta: 0:04:10  iter: 24879  total_loss: 5.306  loss_cls: 0.04899  loss_box_reg: 0.237  loss_dis_0: 2.499  loss_dis_1: 2.532  time: 2.0831  data_time: 0.0645  lr: 0.002  max_mem: 15138M
[09/19 08:07:55 d2.utils.events]:  eta: 0:03:28  iter: 24899  total_loss: 5.247  loss_cls: 0.04404  loss_box_reg: 0.2156  loss_dis_0: 2.491  loss_dis_1: 2.488  time: 2.0831  data_time: 0.0616  lr: 0.002  max_mem: 15138M
[09/19 08:08:37 d2.utils.events]:  eta: 0:02:47  iter: 24919  total_loss: 5.236  loss_cls: 0.0487  loss_box_reg: 0.2233  loss_dis_0: 2.489  loss_dis_1: 2.469  time: 2.0831  data_time: 0.0708  lr: 0.002  max_mem: 15138M
[09/19 08:09:19 d2.utils.events]:  eta: 0:02:05  iter: 24939  total_loss: 5.237  loss_cls: 0.04282  loss_box_reg: 0.2097  loss_dis_0: 2.465  loss_dis_1: 2.5  time: 2.0831  data_time: 0.0615  lr: 0.002  max_mem: 15138M
[09/19 08:10:00 d2.utils.events]:  eta: 0:01:23  iter: 24959  total_loss: 5.216  loss_cls: 0.04394  loss_box_reg: 0.2238  loss_dis_0: 2.507  loss_dis_1: 2.426  time: 2.0831  data_time: 0.0678  lr: 0.002  max_mem: 15138M
[09/19 08:10:42 d2.utils.events]:  eta: 0:00:41  iter: 24979  total_loss: 5.232  loss_cls: 0.04607  loss_box_reg: 0.2375  loss_dis_0: 2.497  loss_dis_1: 2.446  time: 2.0831  data_time: 0.0594  lr: 0.002  max_mem: 15138M
[09/19 08:11:24 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0024999.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 08:11:25 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_final.pth
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 08:11:27 d2.utils.events]:  eta: 0:00:00  iter: 24999  total_loss: 5.251  loss_cls: 0.04308  loss_box_reg: 0.2263  loss_dis_0: 2.497  loss_dis_1: 2.459  time: 2.0831  data_time: 0.0700  lr: 0.002  max_mem: 15138M
[09/19 08:11:27 d2.engine.hooks]: Overall training speed: 24998 iterations in 14:27:54 (2.0832 s / it)
[09/19 08:11:27 d2.engine.hooks]: Total training time: 15:40:52 (1:12:57 on hooks)
['foggy_cityscapes_voc_test']
datasets/foggy_cityscapes_voc/VOC2007/ImageSets/Main/test.txt
[09/19 08:11:28 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[09/19 08:11:28 d2.data.common]: Serializing 1500 elements to byte tensors and concatenating them all ...
[09/19 08:11:29 d2.data.common]: Serialized dataset takes 2.36 MiB
[09/19 08:11:29 d2.evaluation.evaluator]: Start inference on 188 batches
[09/19 08:11:44 d2.evaluation.evaluator]: Inference done 11/188. Dataloading: 0.0010 s / iter. Inference: 0.4703 s / iter. Eval: 0.0011 s / iter. Total: 0.4724 s / iter. ETA=0:01:23
[09/19 08:11:49 d2.evaluation.evaluator]: Inference done 22/188. Dataloading: 0.0013 s / iter. Inference: 0.4727 s / iter. Eval: 0.0011 s / iter. Total: 0.4753 s / iter. ETA=0:01:18
[09/19 08:11:54 d2.evaluation.evaluator]: Inference done 33/188. Dataloading: 0.0017 s / iter. Inference: 0.4713 s / iter. Eval: 0.0011 s / iter. Total: 0.4742 s / iter. ETA=0:01:13
[09/19 08:11:59 d2.evaluation.evaluator]: Inference done 44/188. Dataloading: 0.0017 s / iter. Inference: 0.4730 s / iter. Eval: 0.0011 s / iter. Total: 0.4759 s / iter. ETA=0:01:08
[09/19 08:12:05 d2.evaluation.evaluator]: Inference done 55/188. Dataloading: 0.0018 s / iter. Inference: 0.4717 s / iter. Eval: 0.0011 s / iter. Total: 0.4747 s / iter. ETA=0:01:03
[09/19 08:12:10 d2.evaluation.evaluator]: Inference done 66/188. Dataloading: 0.0019 s / iter. Inference: 0.4729 s / iter. Eval: 0.0011 s / iter. Total: 0.4760 s / iter. ETA=0:00:58
[09/19 08:12:15 d2.evaluation.evaluator]: Inference done 77/188. Dataloading: 0.0018 s / iter. Inference: 0.4721 s / iter. Eval: 0.0011 s / iter. Total: 0.4751 s / iter. ETA=0:00:52
[09/19 08:12:20 d2.evaluation.evaluator]: Inference done 89/188. Dataloading: 0.0018 s / iter. Inference: 0.4683 s / iter. Eval: 0.0011 s / iter. Total: 0.4713 s / iter. ETA=0:00:46
[09/19 08:12:26 d2.evaluation.evaluator]: Inference done 101/188. Dataloading: 0.0018 s / iter. Inference: 0.4660 s / iter. Eval: 0.0011 s / iter. Total: 0.4689 s / iter. ETA=0:00:40
[09/19 08:12:31 d2.evaluation.evaluator]: Inference done 112/188. Dataloading: 0.0017 s / iter. Inference: 0.4668 s / iter. Eval: 0.0011 s / iter. Total: 0.4698 s / iter. ETA=0:00:35
[09/19 08:12:36 d2.evaluation.evaluator]: Inference done 123/188. Dataloading: 0.0017 s / iter. Inference: 0.4679 s / iter. Eval: 0.0011 s / iter. Total: 0.4709 s / iter. ETA=0:00:30
[09/19 08:12:42 d2.evaluation.evaluator]: Inference done 135/188. Dataloading: 0.0017 s / iter. Inference: 0.4662 s / iter. Eval: 0.0012 s / iter. Total: 0.4691 s / iter. ETA=0:00:24
[09/19 08:12:47 d2.evaluation.evaluator]: Inference done 147/188. Dataloading: 0.0017 s / iter. Inference: 0.4637 s / iter. Eval: 0.0012 s / iter. Total: 0.4666 s / iter. ETA=0:00:19
[09/19 08:12:52 d2.evaluation.evaluator]: Inference done 158/188. Dataloading: 0.0017 s / iter. Inference: 0.4646 s / iter. Eval: 0.0012 s / iter. Total: 0.4675 s / iter. ETA=0:00:14
[09/19 08:12:58 d2.evaluation.evaluator]: Inference done 170/188. Dataloading: 0.0016 s / iter. Inference: 0.4635 s / iter. Eval: 0.0012 s / iter. Total: 0.4664 s / iter. ETA=0:00:08
[09/19 08:13:03 d2.evaluation.evaluator]: Inference done 181/188. Dataloading: 0.0016 s / iter. Inference: 0.4629 s / iter. Eval: 0.0012 s / iter. Total: 0.4658 s / iter. ETA=0:00:03
[09/19 08:13:26 d2.evaluation.evaluator]: Total inference time: 0:01:45.081468 (0.574216 s / iter per device, on 8 devices)
[09/19 08:13:26 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:24 (0.461849 s / iter per device, on 8 devices)
[09/19 08:13:26 d2.evaluation.pascal_voc_evaluation]: Evaluating foggy_cityscapes_voc_test using 2012 metric. Note that results do not use the official Matlab API.
[57.33129410837521, 61.99094140748793, 70.99370577789816, 41.98720389779809, 63.712240683209956, 51.60968552721502, 44.41917543202962, 58.644206358323125]
[09/19 08:14:23 d2.engine.defaults]: Evaluation results for foggy_cityscapes_voc_test in csv format:
[09/19 08:14:23 d2.evaluation.testing]: copypaste: Task: bbox
[09/19 08:14:23 d2.evaluation.testing]: copypaste: AP,AP50,AP75
[09/19 08:14:23 d2.evaluation.testing]: copypaste: 32.0422,56.3361,31.7359
Job end at 2023-09-19 08:15:06
